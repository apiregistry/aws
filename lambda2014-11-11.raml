#%RAML 1.0
title: AWS Lambda
version: '2014-11-11'
description: '  <b>Overview</b>  This is the AWS Lambda API Reference. The AWS Lambda
  Developer Guide provides additional information. For the service overview, go to
  <a href="http://docs.aws.amazon.com/lambda/latest/dg/welcome.html">What is AWS Lambda</a>,
  and for information about how the service works, go to <a href="http://docs.aws.amazon.com/lambda/latest/dg/lambda-introduction.html">AWS
  LambdaL How it Works</a> in the AWS Lambda Developer Guide.'
mediaType:
- application/json
uses:
  commons: https://raw.githubusercontent.com/apiregistry/commons/master/commons.raml
  extras: https://raw.githubusercontent.com/apiregistry/typesExtras/master/typeExtras.raml
types:
  Blob:
    type: file
  Boolean:
    type: boolean
  Description:
    type: string
    minLength: 0
    maxLength: 256
  EventSourceList:
    type: array
    items:
      type: EventSourceConfiguration
  FunctionArn:
    type: string
    pattern: arn:aws:lambda:[a-z]{2}-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9-_]+(\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?
  FunctionList:
    type: array
    items:
      type: FunctionConfiguration
  FunctionName:
    type: string
    pattern: '[a-zA-Z0-9-_]+'
    minLength: 1
    maxLength: 64
  Handler:
    type: string
    pattern: '[a-zA-Z0-9./\-_]+'
  HttpStatus:
    type: integer
    format: int
  Integer:
    type: integer
    format: int
  Long:
    type: integer
    format: long
  MaxListItems:
    type: integer
    format: int
    minimum: 1
    maximum: 10000
  MemorySize:
    type: integer
    format: int
    minimum: 128
    maximum: 1024
  Mode:
    type: string
    enum:
    - event
  RoleArn:
    type: string
    pattern: arn:aws:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+
  Runtime:
    type: string
    enum:
    - nodejs
  String:
    type: string
  Timeout:
    type: integer
    format: int
    minimum: 1
    maximum: 60
  Timestamp:
    type: string
  AddEventSourceRequest:
    type: object
    properties:
      EventSource:
        type: String
        description: <p>The Amazon Resource Name (ARN) of the Amazon Kinesis stream that is the event source. Any record added to this stream causes AWS Lambda to invoke your Lambda function. AWS Lambda POSTs the Amazon Kinesis event, containing records, to your Lambda function as JSON.</p>
      FunctionName:
        type: FunctionName
        description: <p>The Lambda function to invoke when AWS Lambda detects an event on the stream.</p>
      Role:
        type: RoleArn
        description: <p>The ARN of the IAM role (invocation role) that AWS Lambda can assume to read from the stream and invoke the function.</p>
      BatchSize?:
        type: Integer
        description: <p>The largest number of records that AWS Lambda will give to your function in a single event. The default is 100 records.</p>
      Parameters?:
        type: Map
        description: '<p>A map (key-value pairs) defining the configuration for AWS
          Lambda to use when reading the event source. Currently, AWS Lambda supports
          only the <code>InitialPositionInStream</code> key. The valid values are:
          "TRIM_HORIZON" and "LATEST". The default value is "TRIM_HORIZON". For more
          information, go to <a href="http://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html#Kinesis-GetShardIterator-request-ShardIteratorType">ShardIteratorType</a>
          in the Amazon Kinesis Service API Reference. </p>'
  EventSourceConfiguration:
    type: object
    properties:
      UUID?:
        type: String
        description: <p>The AWS Lambda assigned opaque identifier for the mapping.</p>
      BatchSize?:
        type: Integer
        description: <p>The largest number of records that AWS Lambda will POST in the invocation request to your function.</p>
      EventSource?:
        type: String
        description: <p>The Amazon Resource Name (ARN) of the Amazon Kinesis stream that is the source of events.</p>
      FunctionName?:
        type: FunctionName
        description: <p>The Lambda function to invoke when AWS Lambda detects an event on the stream.</p>
      Parameters?:
        type: Map
        description: <p>The map (key-value pairs) defining the configuration for AWS Lambda to use when reading the event source.</p>
      Role?:
        type: RoleArn
        description: <p>The ARN of the IAM role (invocation role) that AWS Lambda can assume to read from the stream and invoke the function.</p>
      LastModified?:
        type: Timestamp
        description: <p>The UTC time string indicating the last time the event mapping was updated.</p>
      IsActive?:
        type: Boolean
        description: <p>Indicates whether the event source mapping is currently honored. Events are only processes if IsActive is true.</p>
      Status?:
        type: String
        description: '<p>The description of the health of the event source mapping.
          Valid values are: "PENDING", "OK", and "PROBLEM:<i>message</i>". Initially
          this staus is "PENDING". When AWS Lambda begins processing events, it changes
          the status to "OK".</p>'
    description: <p>Describes mapping between an Amazon Kinesis stream and a Lambda function.</p>
  FunctionCodeLocation:
    type: object
    properties:
      RepositoryType?:
        type: String
        description: <p>The repository from which you can download the function.</p>
      Location?:
        type: String
        description: <p>The presigned URL you can use to download the function's .zip file that you previously uploaded. The URL is valid for up to 10 minutes.</p>
    description: <p>The object for the Lambda function location.</p>
  FunctionConfiguration:
    type: object
    properties:
      FunctionName?:
        type: FunctionName
        description: <p>The name of the function.</p>
      FunctionARN?:
        type: FunctionArn
        description: <p>The Amazon Resource Name (ARN) assigned to the function.</p>
      ConfigurationId?:
        type: String
        description: <p>A Lambda-assigned unique identifier for the current function code and related configuration.</p>
      Runtime?:
        type: Runtime
        description: <p>The runtime environment for the Lambda function.</p>
      Role?:
        type: RoleArn
        description: <p>The Amazon Resource Name (ARN) of the IAM role that Lambda assumes when it executes your function to access any other Amazon Web Services (AWS) resources.</p>
      Handler?:
        type: Handler
        description: <p>The function Lambda calls to begin executing your function.</p>
      Mode?:
        type: Mode
        description: <p>The type of the Lambda function you uploaded. </p>
      CodeSize?:
        type: Long
        description: <p>The size, in bytes, of the function .zip file you uploaded.</p>
      Description?:
        type: Description
        description: <p>The user-provided description.</p>
      Timeout?:
        type: Timeout
        description: <p>The function execution time at which Lambda should terminate the function. Because the execution time has cost implications, we recommend you set this value based on your expected execution time. The default is 3 seconds. </p>
      MemorySize?:
        type: MemorySize
        description: <p>The memory size, in MB, you configured for the function. Must be a multiple of 64 MB.</p>
      LastModified?:
        type: Timestamp
        description: <p>The timestamp of the last time you updated the function.</p>
    description: <p>A complex type that describes function metadata.</p>
  GetFunctionResponse:
    type: object
    properties:
      Configuration?:
        type: FunctionConfiguration
      Code?:
        type: FunctionCodeLocation
    description: <p>This response contains the object for AWS Lambda function location (see <a>API_FunctionCodeLocation</a></p>
  ListEventSourcesResponse:
    type: object
    properties:
      NextMarker?:
        type: String
        description: <p>A string, present if there are more event source mappings.</p>
      EventSources?:
        type: EventSourceList
        description: <p>An arrary of <code>EventSourceConfiguration</code> objects.</p>
    description: <p>Contains a list of event sources (see <a>API_EventSourceConfiguration</a>)</p>
  ListFunctionsResponse:
    type: object
    properties:
      NextMarker?:
        type: String
        description: <p>A string, present if there are more functions.</p>
      Functions?:
        type: FunctionList
        description: <p>A list of Lambda functions.</p>
    description: <p>Contains a list of AWS Lambda function configurations (see <a>API_FunctionConfiguration</a>.</p>
  Map:
    type: object
    properties:
      //:
        type: String
/2014-11-13:
  /functions:
    /{FunctionName}:
      uriParameters:
        FunctionName:
          type: FunctionName
          description: <p>The Lambda function to delete.</p>
      /configuration:
        put:
          description: Updates the configuration parameters for the specified Lambda function by using the values provided in the request. You provide only the parameters you want to change. This operation must only be used on an existing Lambda function and cannot be used to update the function's code.  This operation requires permission for the <code>lambda:UpdateFunctionConfiguration</code> action.
          displayName: Update Function Configuration
          queryParameters:
            Role?:
              type: RoleArn
              description: <p>The Amazon Resource Name (ARN) of the IAM role that Lambda will assume when it executes your function. </p>
            Handler?:
              type: Handler
              description: <p>The function that Lambda calls to begin executing your function. For Node.js, it is the <i>module-name.export</i> value in your function. </p>
            Description?:
              type: Description
              description: <p>A short user-defined function description. Lambda does not use this value. Assign a meaningful description as you see fit.</p>
            Timeout?:
              type: Timeout
              description: <p>The function execution time at which Lambda should terminate the function. Because the execution time has cost implications, we recommend you set this value based on your expected execution time. The default is 3 seconds. </p>
            MemorySize?:
              type: MemorySize
              description: <p>The amount of memory, in MB, your Lambda function is given. Lambda uses this memory size to infer the amount of CPU allocated to your function. Your function use-case determines your CPU and memory requirements. For example, a database operation might need less memory compared to an image processing function. The default value is 128 MB. The value must be a multiple of 64 MB.</p>
          responses:
            200:
              body:
                application/json: FunctionConfiguration
            500:
              description: ServiceException
            404:
              description: ResourceNotFoundException
            400:
              description: InvalidParameterValueException
        get:
          description: Returns the configuration information of the Lambda function. This the same information you provided as parameters when uploading the function by using <a>UploadFunction</a>. This operation requires permission for the <code>lambda:GetFunctionConfiguration</code> operation.
          displayName: Get Function Configuration
          responses:
            200:
              body:
                application/json: FunctionConfiguration
            500:
              description: ServiceException
            404:
              description: ResourceNotFoundException
      /invoke-async:
        post:
          description: Submits an invocation request to AWS Lambda. Upon receiving the request, Lambda executes the specified function asynchronously. To see the logs generated by the Lambda function execution, see the CloudWatch logs console. This operation requires permission for the <code>lambda:InvokeFunction</code> action.
          displayName: Invoke Async
          body:
            application/json:
              type: Blob
              description: <p>JSON that you want to provide to your Lambda function as input.</p>
          responses:
            202:
              body:
                application/json: null
            500:
              description: ServiceException
            404:
              description: ResourceNotFoundException
            400:
              description: InvalidRequestContentException
      delete:
        description: Deletes the specified Lambda function code and configuration. This operation requires permission for the <code>lambda:DeleteFunction</code> action.
        displayName: Delete Function
        responses:
          204:
            body:
              application/json: null
          500:
            description: ServiceException
          404:
            description: ResourceNotFoundException
      get:
        description: Returns the configuration information of the Lambda function and a presigned URL link to the .zip file you uploaded with <a>UploadFunction</a> so you can download the .zip file. Note that the URL is valid for up to 10 minutes. The configuration information is the same information you provided as parameters when uploading the function. This operation requires permission for the <code>lambda:GetFunction</code> action.
        displayName: Get Function
        responses:
          200:
            body:
              application/json: GetFunctionResponse
          500:
            description: ServiceException
          404:
            description: ResourceNotFoundException
      put:
        description: Creates a new Lambda function or updates an existing function. The function metadata is created from the request parameters, and the code for the function is provided by a .zip file in the request body. If the function name already exists, the existing Lambda function is updated with the new code and metadata.  This operation requires permission for the <code>lambda:UploadFunction</code> action.
        displayName: Upload Function
        queryParameters:
          Runtime:
            type: Runtime
            description: <p>The runtime environment for the Lambda function you are uploading. Currently, Lambda supports only "nodejs" as the runtime.</p>
          Role:
            type: RoleArn
            description: <p>The Amazon Resource Name (ARN) of the IAM role that Lambda assumes when it executes your function to access any other Amazon Web Services (AWS) resources. </p>
          Handler:
            type: Handler
            description: <p>The function that Lambda calls to begin execution. For Node.js, it is the <i>module-name</i>.<i>export</i> value in your function. </p>
          Mode:
            type: Mode
            description: <p>How the Lambda function will be invoked. Lambda supports only the "event" mode. </p>
          Description?:
            type: Description
            description: <p>A short, user-defined function description. Lambda does not use this value. Assign a meaningful description as you see fit.</p>
          Timeout?:
            type: Timeout
            description: <p>The function execution time at which Lambda should terminate the function. Because the execution time has cost implications, we recommend you set this value based on your expected execution time. The default is 3 seconds. </p>
          MemorySize?:
            type: MemorySize
            description: <p>The amount of memory, in MB, your Lambda function is given. Lambda uses this memory size to infer the amount of CPU allocated to your function. Your function use-case determines your CPU and memory requirements. For example, database operation might need less memory compared to image processing function. The default value is 128 MB. The value must be a multiple of 64 MB.</p>
        body:
          application/json:
            type: Blob
            description: <p>A .zip file containing your packaged source code. For more information about creating a .zip file, go to <a href="http://docs.aws.amazon.com/lambda/latest/dg/walkthrough-custom-events.html">AWS LambdaL How it Works</a> in the AWS Lambda Developer Guide. </p>
        responses:
          201:
            body:
              application/json: FunctionConfiguration
          500:
            description: ServiceException
          400:
            description: InvalidParameterValueException
          404:
            description: ResourceNotFoundException
    get:
      description: Returns a list of your Lambda functions. For each function, the response includes the function configuration information. You must use <a>GetFunction</a> to retrieve the code for your function. This operation requires permission for the <code>lambda:ListFunctions</code> action.
      displayName: List Functions
      queryParameters:
        Marker?:
          type: String
          description: <p>Optional string. An opaque pagination token returned from a previous <code>ListFunctions</code> operation. If present, indicates where to continue the listing. </p>
        MaxItems?:
          type: MaxListItems
          description: <p>Optional integer. Specifies the maximum number of AWS Lambda functions to return in response. This parameter value must be greater than 0.</p>
      responses:
        200:
          body:
            application/json: ListFunctionsResponse
        500:
          description: ServiceException
  /event-source-mappings:
    /{UUID}:
      uriParameters:
        UUID:
          type: String
          description: <p>The AWS Lambda assigned ID of the event source mapping.</p>
      get:
        description: Returns configuration information for the specified event source mapping (see <a>AddEventSource</a>). This operation requires permission for the <code>lambda:GetEventSource</code> action.
        displayName: Get Event Source
        responses:
          200:
            body:
              application/json: EventSourceConfiguration
          500:
            description: ServiceException
          404:
            description: ResourceNotFoundException
          400:
            description: InvalidParameterValueException
      delete:
        description: Removes an event source mapping. This means AWS Lambda will no longer invoke the function for events in the associated source. This operation requires permission for the <code>lambda:RemoveEventSource</code> action.
        displayName: Remove Event Source
        responses:
          204:
            body:
              application/json: null
          500:
            description: ServiceException
          404:
            description: ResourceNotFoundException
          400:
            description: InvalidParameterValueException
    get:
      description: Returns a list of event source mappings you created using the <code>AddEventSource</code> (see <a>AddEventSource</a>), where you identify a stream as event source. This list does not include Amazon S3 event sources.  For each mapping, the API returns configuration information. You can optionally specify filters to retrieve specific event source mappings. This operation requires permission for the <code>lambda:ListEventSources</code> action.
      displayName: List Event Sources
      queryParameters:
        EventSource?:
          type: String
          description: <p>The Amazon Resource Name (ARN) of the Amazon Kinesis stream.</p>
        FunctionName?:
          type: FunctionName
          description: <p>The name of the AWS Lambda function.</p>
        Marker?:
          type: String
          description: <p>Optional string. An opaque pagination token returned from a previous <code>ListEventSources</code> operation. If present, specifies to continue the list from where the returning call left off. </p>
        MaxItems?:
          type: MaxListItems
          description: <p>Optional integer. Specifies the maximum number of event sources to return in response. This value must be greater than 0.</p>
      responses:
        200:
          body:
            application/json: ListEventSourcesResponse
        500:
          description: ServiceException
        404:
          description: ResourceNotFoundException
        400:
          description: InvalidParameterValueException
    post:
      description: 'Identifies a stream as an event source for an AWS Lambda function.
        It can be either an Amazon Kinesis stream or a Amazon DynamoDB stream. AWS
        Lambda invokes the specified function when records are posted to the stream.
        This is the pull model, where AWS Lambda invokes the function. For more information,
        go to <a href="http://docs.aws.amazon.com/lambda/latest/dg/lambda-introduction.html">AWS
        Lambda: How it Works</a> in the AWS Lambda Developer Guide. This association
        between an Amazon Kinesis stream and an AWS Lambda function is called the
        event source mapping. You provide the configuration information (for example,
        which stream to read from and which AWS Lambda function to invoke) for the
        event source mapping in the request body.  Each event source, such as a Kinesis
        stream, can only be associated with one AWS Lambda function. If you call <a>AddEventSource</a>
        for an event source that is already mapped to another AWS Lambda function,
        the existing mapping is updated to call the new function instead of the old
        one.  This operation requires permission for the <code>iam:PassRole</code>
        action for the IAM role. It also requires permission for the <code>lambda:AddEventSource</code>
        action.'
      displayName: Add Event Source
      body:
        application/json: AddEventSourceRequest
      responses:
        200:
          body:
            application/json: EventSourceConfiguration
        500:
          description: ServiceException
        400:
          description: InvalidParameterValueException
