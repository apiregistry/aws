#%RAML 1.0
title: AWS Direct Connect
version: '2012-10-25'
description: ' AWS Direct Connect links your internal network to an AWS Direct Connect
  location over a standard 1 gigabit or 10 gigabit Ethernet fiber-optic cable. One
  end of the cable is connected to your router, the other to an AWS Direct Connect
  router. With this connection in place, you can create virtual interfaces directly
  to the AWS cloud (for example, to Amazon Elastic Compute Cloud (Amazon EC2) and
  Amazon Simple Storage Service (Amazon S3)) and to Amazon Virtual Private Cloud (Amazon
  VPC), bypassing Internet service providers in your network path. An AWS Direct Connect
  location provides access to AWS in the region it is associated with, as well as
  access to other US regions. For example, you can provision a single connection to
  any AWS Direct Connect location in the US and use it to access public AWS services
  in all US Regions and AWS GovCloud (US).'
mediaType:
- application/json
uses:
  commons: https://raw.githubusercontent.com/apiregistry/commons/master/commons.raml
  extras: https://raw.githubusercontent.com/apiregistry/typesExtras/master/typeExtras.raml
types:
  ASN:
    type: integer
    format: int
    description: '<p>Autonomous system (AS) number for Border Gateway Protocol (BGP)
      configuration.</p> <p>Example: 65000</p>'
  AmazonAddress:
    type: string
    description: '<p>IP address assigned to the Amazon interface.</p> <p>Example:
      192.168.1.1/30</p>'
  BGPAuthKey:
    type: string
    description: '<p>Authentication key for BGP configuration.</p> <p>Example: asdf34example</p>'
  Bandwidth:
    type: string
    description: '<p>Bandwidth of the connection.</p> <p>Example: 1Gbps</p> <p>Default:
      None</p>'
  CIDR:
    type: string
  ConnectionId:
    type: string
    description: '<p>ID of the connection.</p> <p>Example: dxcon-fg5678gh</p> <p>Default:
      None</p>'
  ConnectionList:
    type: array
    items:
      type: Connection
    description: <p>A list of connections.</p>
  ConnectionName:
    type: string
    description: '<p>The name of the connection.</p> <p>Example: "<i>My Connection
      to AWS</i>"</p> <p>Default: None</p>'
  ConnectionState:
    type: string
    enum:
    - ordering
    - requested
    - pending
    - available
    - down
    - deleting
    - deleted
    - rejected
    description: '<p>State of the connection.</p> <ul> <li> <p> <b>Ordering</b>: The
      initial state of a hosted connection provisioned on an interconnect. The connection
      stays in the ordering state until the owner of the hosted connection confirms
      or declines the connection order.</p> </li> <li> <p> <b>Requested</b>: The initial
      state of a standard connection. The connection stays in the requested state
      until the Letter of Authorization (LOA) is sent to the customer.</p> </li> <li>
      <p> <b>Pending</b>: The connection has been approved, and is being initialized.</p>
      </li> <li> <p> <b>Available</b>: The network link is up, and the connection
      is ready for use.</p> </li> <li> <p> <b>Down</b>: The network link is down.</p>
      </li> <li> <p> <b>Deleting</b>: The connection is in the process of being deleted.</p>
      </li> <li> <p> <b>Deleted</b>: The connection has been deleted.</p> </li> <li>
      <p> <b>Rejected</b>: A hosted connection in the ''Ordering'' state will enter
      the ''Rejected'' state if it is deleted by the end customer.</p> </li> </ul>'
  CustomerAddress:
    type: string
    description: '<p>IP address assigned to the customer interface.</p> <p>Example:
      192.168.1.2/30</p>'
  InterconnectId:
    type: string
    description: '<p>The ID of the interconnect.</p> <p>Example: dxcon-abc123</p>'
  InterconnectList:
    type: array
    items:
      type: Interconnect
    description: <p>A list of interconnects.</p>
  InterconnectName:
    type: string
    description: '<p>The name of the interconnect.</p> <p>Example: "<i>1G Interconnect
      to AWS</i>"</p>'
  InterconnectState:
    type: string
    enum:
    - requested
    - pending
    - available
    - down
    - deleting
    - deleted
    description: '<p>State of the interconnect.</p> <ul> <li> <p> <b>Requested</b>:
      The initial state of an interconnect. The interconnect stays in the requested
      state until the Letter of Authorization (LOA) is sent to the customer.</p> </li>
      <li> <p> <b>Pending</b>&gt;: The interconnect has been approved, and is being
      initialized.</p> </li> <li> <p> <b>Available</b>: The network link is up, and
      the interconnect is ready for use.</p> </li> <li> <p> <b>Down</b>: The network
      link is down.</p> </li> <li> <p> <b>Deleting</b>: The interconnect is in the
      process of being deleted.</p> </li> <li> <p> <b>Deleted</b>: The interconnect
      has been deleted.</p> </li> </ul>'
  LoaContent:
    type: file
    description: <p>The binary contents of the LOA-CFA document.</p>
  LoaContentType:
    type: string
    enum:
    - application/pdf
    description: '<p>A standard media type indicating the content type of the LOA-CFA
      document. Currently, the only supported value is "application/pdf".</p> <p>Default:
      application/pdf</p>'
  LoaIssueTime:
    type: datetime
  LocationCode:
    type: string
    description: '<p>Where the connection is located.</p> <p>Example: EqSV5</p> <p>Default:
      None</p>'
  LocationList:
    type: array
    items:
      type: Location
  LocationName:
    type: string
  OwnerAccount:
    type: string
  PartnerName:
    type: string
  ProviderName:
    type: string
  Region:
    type: string
    description: '<p>The AWS region where the connection is located.</p> <p>Example:
      us-east-1</p> <p>Default: None</p>'
  RouteFilterPrefixList:
    type: array
    items:
      type: RouteFilterPrefix
    description: <p>A list of routes to be advertised to the AWS network in this region (public virtual interface).</p>
  RouterConfig:
    type: string
  VLAN:
    type: integer
    format: int
    description: '<p>The VLAN ID.</p> <p>Example: 101</p>'
  VirtualGatewayId:
    type: string
    description: '<p>The ID of the virtual private gateway to a VPC. This only applies
      to private virtual interfaces.</p> <p>Example: vgw-123er56</p>'
  VirtualGatewayList:
    type: array
    items:
      type: VirtualGateway
    description: <p>A list of virtual private gateways.</p>
  VirtualGatewayState:
    type: string
    description: '<p>State of the virtual private gateway.</p> <ul> <li> <p> <b>Pending</b>:
      This is the initial state after calling <i>CreateVpnGateway</i>.</p> </li> <li>
      <p> <b>Available</b>: Ready for use by a private virtual interface.</p> </li>
      <li> <p> <b>Deleting</b>: This is the initial state after calling <i>DeleteVpnGateway</i>.</p>
      </li> <li> <p> <b>Deleted</b>: In this state, a private virtual interface is
      unable to send traffic over this gateway.</p> </li> </ul>'
  VirtualInterfaceId:
    type: string
    description: '<p>ID of the virtual interface.</p> <p>Example: dxvif-123dfg56</p>
      <p>Default: None</p>'
  VirtualInterfaceList:
    type: array
    items:
      type: VirtualInterface
    description: <p>A list of virtual interfaces.</p>
  VirtualInterfaceName:
    type: string
    description: '<p>The name of the virtual interface assigned by the customer.</p>
      <p>Example: "My VPC"</p>'
  VirtualInterfaceState:
    type: string
    enum:
    - confirming
    - verifying
    - pending
    - available
    - down
    - deleting
    - deleted
    - rejected
    description: '<p>State of the virtual interface.</p> <ul> <li> <p> <b>Confirming</b>:
      The creation of the virtual interface is pending confirmation from the virtual
      interface owner. If the owner of the virtual interface is different from the
      owner of the connection on which it is provisioned, then the virtual interface
      will remain in this state until it is confirmed by the virtual interface owner.</p>
      </li> <li> <p> <b>Verifying</b>: This state only applies to public virtual interfaces.
      Each public virtual interface needs validation before the virtual interface
      can be created.</p> </li> <li> <p> <b>Pending</b>: A virtual interface is in
      this state from the time that it is created until the virtual interface is ready
      to forward traffic.</p> </li> <li> <p> <b>Available</b>: A virtual interface
      that is able to forward traffic.</p> </li> <li> <p> <b>Down</b>: A virtual interface
      that is BGP down.</p> </li> <li> <p> <b>Deleting</b>: A virtual interface is
      in this state immediately after calling <i>DeleteVirtualInterface</i> until
      it can no longer forward traffic.</p> </li> <li> <p> <b>Deleted</b>: A virtual
      interface that cannot forward traffic.</p> </li> <li> <p> <b>Rejected</b>: The
      virtual interface owner has declined creation of the virtual interface. If a
      virtual interface in the ''Confirming'' state is deleted by the virtual interface
      owner, the virtual interface will enter the ''Rejected'' state.</p> </li> </ul>'
  VirtualInterfaceType:
    type: string
    description: '<p>The type of virtual interface.</p> <p>Example: private (Amazon
      VPC) or public (Amazon S3, Amazon DynamoDB, and so on.)</p>'
  AllocateConnectionOnInterconnectRequest:
    type: object
    properties:
      bandwidth:
        type: Bandwidth
        description: '<p>Bandwidth of the connection.</p> <p>Example: "<i>500Mbps</i>"</p>
          <p>Default: None</p> <p>Values: 50M, 100M, 200M, 300M, 400M, or 500M</p>'
      connectionName:
        type: ConnectionName
        description: '<p>Name of the provisioned connection.</p> <p>Example: "<i>500M
          Connection to AWS</i>"</p> <p>Default: None</p>'
      ownerAccount:
        type: OwnerAccount
        description: '<p>Numeric account Id of the customer for whom the connection
          will be provisioned.</p> <p>Example: 123443215678</p> <p>Default: None</p>'
      interconnectId:
        type: InterconnectId
        description: '<p>ID of the interconnect on which the connection will be provisioned.</p>
          <p>Example: dxcon-456abc78</p> <p>Default: None</p>'
      vlan:
        type: VLAN
        description: '<p>The dedicated VLAN provisioned to the connection.</p> <p>Example:
          101</p> <p>Default: None</p>'
    description: <p>Container for the parameters to the AllocateConnectionOnInterconnect operation.</p>
  AllocatePrivateVirtualInterfaceRequest:
    type: object
    properties:
      connectionId:
        type: ConnectionId
        description: '<p>The connection ID on which the private virtual interface
          is provisioned.</p> <p>Default: None</p>'
      ownerAccount:
        type: OwnerAccount
        description: '<p>The AWS account that will own the new private virtual interface.</p>
          <p>Default: None</p>'
      newPrivateVirtualInterfaceAllocation:
        type: NewPrivateVirtualInterfaceAllocation
        description: '<p>Detailed information for the private virtual interface to
          be provisioned.</p> <p>Default: None</p>'
    description: <p>Container for the parameters to the AllocatePrivateVirtualInterface operation.</p>
  AllocatePublicVirtualInterfaceRequest:
    type: object
    properties:
      connectionId:
        type: ConnectionId
        description: '<p>The connection ID on which the public virtual interface is
          provisioned.</p> <p>Default: None</p>'
      ownerAccount:
        type: OwnerAccount
        description: '<p>The AWS account that will own the new public virtual interface.</p>
          <p>Default: None</p>'
      newPublicVirtualInterfaceAllocation:
        type: NewPublicVirtualInterfaceAllocation
        description: '<p>Detailed information for the public virtual interface to
          be provisioned.</p> <p>Default: None</p>'
    description: <p>Container for the parameters to the AllocatePublicVirtualInterface operation.</p>
  ConfirmConnectionRequest:
    type: object
    properties:
      connectionId:
        type: ConnectionId
    description: <p>Container for the parameters to the ConfirmConnection operation.</p>
  ConfirmConnectionResponse:
    type: object
    properties:
      connectionState?:
        type: ConnectionState
    description: <p>The response received when ConfirmConnection is called.</p>
  ConfirmPrivateVirtualInterfaceRequest:
    type: object
    properties:
      virtualInterfaceId:
        type: VirtualInterfaceId
      virtualGatewayId:
        type: VirtualGatewayId
        description: '<p>ID of the virtual private gateway that will be attached to
          the virtual interface.</p> <p> A virtual private gateway can be managed
          via the Amazon Virtual Private Cloud (VPC) console or the <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/ApiReference-query-CreateVpnGateway.html">EC2
          CreateVpnGateway</a> action.</p> <p>Default: None</p>'
    description: <p>Container for the parameters to the ConfirmPrivateVirtualInterface operation.</p>
  ConfirmPrivateVirtualInterfaceResponse:
    type: object
    properties:
      virtualInterfaceState?:
        type: VirtualInterfaceState
    description: <p>The response received when ConfirmPrivateVirtualInterface is called.</p>
  ConfirmPublicVirtualInterfaceRequest:
    type: object
    properties:
      virtualInterfaceId:
        type: VirtualInterfaceId
    description: <p>Container for the parameters to the ConfirmPublicVirtualInterface operation.</p>
  ConfirmPublicVirtualInterfaceResponse:
    type: object
    properties:
      virtualInterfaceState?:
        type: VirtualInterfaceState
    description: <p>The response received when ConfirmPublicVirtualInterface is called.</p>
  Connection:
    type: object
    properties:
      ownerAccount?:
        type: OwnerAccount
        description: <p>The AWS account that will own the new connection.</p>
      connectionId?:
        type: ConnectionId
      connectionName?:
        type: ConnectionName
      connectionState?:
        type: ConnectionState
      region?:
        type: Region
      location?:
        type: LocationCode
      bandwidth?:
        type: Bandwidth
        description: '<p>Bandwidth of the connection.</p> <p>Example: 1Gbps (for regular
          connections), or 500Mbps (for hosted connections)</p> <p>Default: None</p>'
      vlan?:
        type: VLAN
      partnerName?:
        type: PartnerName
        description: <p>The name of the AWS Direct Connect service provider associated with the connection.</p>
      loaIssueTime?:
        type: LoaIssueTime
        description: <p>The time of the most recent call to DescribeConnectionLoa for this Connection.</p>
    description: <p>A connection represents the physical network connection between the AWS Direct Connect location and the customer.</p>
  Connections:
    type: object
    properties:
      connections?:
        type: ConnectionList
        description: <p>A list of connections.</p>
    description: <p>A structure containing a list of connections.</p>
  CreateConnectionRequest:
    type: object
    properties:
      location:
        type: LocationCode
      bandwidth:
        type: Bandwidth
      connectionName:
        type: ConnectionName
    description: <p>Container for the parameters to the CreateConnection operation.</p>
  CreateInterconnectRequest:
    type: object
    properties:
      interconnectName:
        type: InterconnectName
        description: '<p>The name of the interconnect.</p> <p>Example: "<i>1G Interconnect
          to AWS</i>"</p> <p>Default: None</p>'
      bandwidth:
        type: Bandwidth
        description: '<p>The port bandwidth</p> <p>Example: 1Gbps</p> <p>Default:
          None</p> <p>Available values: 1Gbps,10Gbps</p>'
      location:
        type: LocationCode
        description: '<p>Where the interconnect is located</p> <p>Example: EqSV5</p>
          <p>Default: None</p>'
    description: <p>Container for the parameters to the CreateInterconnect operation.</p>
  CreatePrivateVirtualInterfaceRequest:
    type: object
    properties:
      connectionId:
        type: ConnectionId
      newPrivateVirtualInterface:
        type: NewPrivateVirtualInterface
        description: '<p>Detailed information for the private virtual interface to
          be created.</p> <p>Default: None</p>'
    description: <p>Container for the parameters to the CreatePrivateVirtualInterface operation.</p>
  CreatePublicVirtualInterfaceRequest:
    type: object
    properties:
      connectionId:
        type: ConnectionId
      newPublicVirtualInterface:
        type: NewPublicVirtualInterface
        description: '<p>Detailed information for the public virtual interface to
          be created.</p> <p>Default: None</p>'
    description: <p>Container for the parameters to the CreatePublicVirtualInterface operation.</p>
  DeleteConnectionRequest:
    type: object
    properties:
      connectionId:
        type: ConnectionId
    description: <p>Container for the parameters to the DeleteConnection operation.</p>
  DeleteInterconnectRequest:
    type: object
    properties:
      interconnectId:
        type: InterconnectId
    description: <p>Container for the parameters to the DeleteInterconnect operation.</p>
  DeleteInterconnectResponse:
    type: object
    properties:
      interconnectState?:
        type: InterconnectState
    description: <p>The response received when DeleteInterconnect is called.</p>
  DeleteVirtualInterfaceRequest:
    type: object
    properties:
      virtualInterfaceId:
        type: VirtualInterfaceId
    description: <p>Container for the parameters to the DeleteVirtualInterface operation.</p>
  DeleteVirtualInterfaceResponse:
    type: object
    properties:
      virtualInterfaceState?:
        type: VirtualInterfaceState
    description: <p>The response received when DeleteVirtualInterface is called.</p>
  DescribeConnectionLoaRequest:
    type: object
    properties:
      connectionId:
        type: ConnectionId
      providerName?:
        type: ProviderName
        description: '<p>The name of the APN partner or service provider who establishes
          connectivity on your behalf. If you supply this parameter, the LOA-CFA lists
          the provider name alongside your company name as the requester of the cross
          connect.</p> <p>Default: None</p>'
      loaContentType?:
        type: LoaContentType
    description: <p>Container for the parameters to the DescribeConnectionLoa operation.</p>
  DescribeConnectionLoaResponse:
    type: object
    properties:
      loa?:
        type: Loa
    description: <p>The response received when DescribeConnectionLoa is called.</p>
  DescribeConnectionsOnInterconnectRequest:
    type: object
    properties:
      interconnectId:
        type: InterconnectId
        description: '<p>ID of the interconnect on which a list of connection is provisioned.</p>
          <p>Example: dxcon-abc123</p> <p>Default: None</p>'
    description: <p>Container for the parameters to the DescribeConnectionsOnInterconnect operation.</p>
  DescribeConnectionsRequest:
    type: object
    properties:
      connectionId?:
        type: ConnectionId
    description: <p>Container for the parameters to the DescribeConnections operation.</p>
  DescribeInterconnectLoaRequest:
    type: object
    properties:
      interconnectId:
        type: InterconnectId
      providerName?:
        type: ProviderName
        description: '<p>The name of the service provider who establishes connectivity
          on your behalf. If you supply this parameter, the LOA-CFA lists the provider
          name alongside your company name as the requester of the cross connect.</p>
          <p>Default: None</p>'
      loaContentType?:
        type: LoaContentType
    description: <p>Container for the parameters to the DescribeInterconnectLoa operation.</p>
  DescribeInterconnectLoaResponse:
    type: object
    properties:
      loa?:
        type: Loa
    description: <p>The response received when DescribeInterconnectLoa is called.</p>
  DescribeInterconnectsRequest:
    type: object
    properties:
      interconnectId?:
        type: InterconnectId
    description: <p>Container for the parameters to the DescribeInterconnects operation.</p>
  DescribeVirtualInterfacesRequest:
    type: object
    properties:
      connectionId?:
        type: ConnectionId
      virtualInterfaceId?:
        type: VirtualInterfaceId
    description: <p>Container for the parameters to the DescribeVirtualInterfaces operation.</p>
  Interconnect:
    type: object
    properties:
      interconnectId?:
        type: InterconnectId
      interconnectName?:
        type: InterconnectName
      interconnectState?:
        type: InterconnectState
      region?:
        type: Region
      location?:
        type: LocationCode
      bandwidth?:
        type: Bandwidth
      loaIssueTime?:
        type: LoaIssueTime
        description: <p>The time of the most recent call to DescribeInterconnectLoa for this Interconnect.</p>
    description: <p>An interconnect is a connection that can host other connections.</p> <p>Like a standard AWS Direct Connect connection, an interconnect represents the physical connection between an AWS Direct Connect partner's network and a specific Direct Connect location. An AWS Direct Connect partner who owns an interconnect can provision hosted connections on the interconnect for their end customers, thereby providing the end customers with connectivity to AWS services.</p> <p>The resources of the interconnect, including bandwidth and VLAN numbers, are shared by all of the hosted connections on the interconnect, and the owner of the interconnect determines how these resources are assigned.</p>
  Interconnects:
    type: object
    properties:
      interconnects?:
        type: InterconnectList
        description: <p>A list of interconnects.</p>
    description: <p>A structure containing a list of interconnects.</p>
  Loa:
    type: object
    properties:
      loaContent?:
        type: LoaContent
      loaContentType?:
        type: LoaContentType
    description: <p>A structure containing the Letter of Authorization - Connecting Facility Assignment (LOA-CFA) for a connection.</p>
  Location:
    type: object
    properties:
      locationCode?:
        type: LocationCode
        description: <p>The code used to indicate the AWS Direct Connect location.</p>
      locationName?:
        type: LocationName
        description: <p>The name of the AWS Direct Connect location. The name includes the colocation partner name and the physical site of the lit building.</p>
    description: <p>An AWS Direct Connect location where connections and interconnects can be requested.</p>
  Locations:
    type: object
    properties:
      locations?:
        type: LocationList
        description: <p>A list of colocation hubs where network providers have equipment. Most regions have multiple locations available.</p>
    description: <p>A location is a network facility where AWS Direct Connect routers are available to be connected. Generally, these are colocation hubs where many network providers have equipment, and where cross connects can be delivered. Locations include a name and facility code, and must be provided when creating a connection.</p>
  NewPrivateVirtualInterface:
    type: object
    properties:
      virtualInterfaceName:
        type: VirtualInterfaceName
      vlan:
        type: VLAN
      asn:
        type: ASN
      authKey?:
        type: BGPAuthKey
      amazonAddress?:
        type: AmazonAddress
      customerAddress?:
        type: CustomerAddress
      virtualGatewayId:
        type: VirtualGatewayId
    description: <p>A structure containing information about a new private virtual interface.</p>
  NewPrivateVirtualInterfaceAllocation:
    type: object
    properties:
      virtualInterfaceName:
        type: VirtualInterfaceName
      vlan:
        type: VLAN
      asn:
        type: ASN
      authKey?:
        type: BGPAuthKey
      amazonAddress?:
        type: AmazonAddress
      customerAddress?:
        type: CustomerAddress
    description: <p>A structure containing information about a private virtual interface that will be provisioned on a connection.</p>
  NewPublicVirtualInterface:
    type: object
    properties:
      virtualInterfaceName:
        type: VirtualInterfaceName
      vlan:
        type: VLAN
      asn:
        type: ASN
      authKey?:
        type: BGPAuthKey
      amazonAddress:
        type: AmazonAddress
      customerAddress:
        type: CustomerAddress
      routeFilterPrefixes:
        type: RouteFilterPrefixList
    description: <p>A structure containing information about a new public virtual interface.</p>
  NewPublicVirtualInterfaceAllocation:
    type: object
    properties:
      virtualInterfaceName:
        type: VirtualInterfaceName
      vlan:
        type: VLAN
      asn:
        type: ASN
      authKey?:
        type: BGPAuthKey
      amazonAddress:
        type: AmazonAddress
      customerAddress:
        type: CustomerAddress
      routeFilterPrefixes:
        type: RouteFilterPrefixList
    description: <p>A structure containing information about a public virtual interface that will be provisioned on a connection.</p>
  RouteFilterPrefix:
    type: object
    properties:
      cidr?:
        type: CIDR
        description: '<p>CIDR notation for the advertised route. Multiple routes are
          separated by commas.</p> <p>Example: 10.10.10.0/24,10.10.11.0/24</p>'
    description: <p>A route filter prefix that the customer can advertise through Border Gateway Protocol (BGP) over a public virtual interface.</p>
  VirtualGateway:
    type: object
    properties:
      virtualGatewayId?:
        type: VirtualGatewayId
      virtualGatewayState?:
        type: VirtualGatewayState
    description: <p>You can create one or more AWS Direct Connect private virtual interfaces linking to your virtual private gateway.</p> <p>Virtual private gateways can be managed using the Amazon Virtual Private Cloud (Amazon VPC) console or the <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/ApiReference-query-CreateVpnGateway.html">Amazon EC2 CreateVpnGateway action</a>.</p>
  VirtualGateways:
    type: object
    properties:
      virtualGateways?:
        type: VirtualGatewayList
        description: <p>A list of virtual private gateways.</p>
    description: <p>A structure containing a list of virtual private gateways.</p>
  VirtualInterface:
    type: object
    properties:
      ownerAccount?:
        type: OwnerAccount
        description: <p>The AWS account that will own the new virtual interface.</p>
      virtualInterfaceId?:
        type: VirtualInterfaceId
      location?:
        type: LocationCode
      connectionId?:
        type: ConnectionId
      virtualInterfaceType?:
        type: VirtualInterfaceType
      virtualInterfaceName?:
        type: VirtualInterfaceName
      vlan?:
        type: VLAN
      asn?:
        type: ASN
      authKey?:
        type: BGPAuthKey
      amazonAddress?:
        type: AmazonAddress
      customerAddress?:
        type: CustomerAddress
      virtualInterfaceState?:
        type: VirtualInterfaceState
      customerRouterConfig?:
        type: RouterConfig
        description: <p>Information for generating the customer router configuration.</p>
      virtualGatewayId?:
        type: VirtualGatewayId
      routeFilterPrefixes?:
        type: RouteFilterPrefixList
    description: <p>A virtual interface (VLAN) transmits the traffic between the AWS Direct Connect location and the customer.</p>
  VirtualInterfaces:
    type: object
    properties:
      virtualInterfaces?:
        type: VirtualInterfaceList
        description: <p>A list of virtual interfaces.</p>
    description: <p>A structure containing a list of virtual interfaces.</p>
/{AllocateConnectionOnInterconnect}:
  uriParameters:
    AllocateConnectionOnInterconnect?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  post:
    description: Creates a hosted connection on an interconnect. Allocates a VLAN number and a specified amount of bandwidth for use by a hosted connection on the given interconnect. <note> This is intended for use by AWS Direct Connect partners only. </note>
    displayName: Allocate Connection On Interconnect
    body:
      application/json: AllocateConnectionOnInterconnectRequest
    responses:
      200:
        body:
          application/json: Connection
      400:
        description: DirectConnectServerException
/{AllocatePrivateVirtualInterface}:
  uriParameters:
    AllocatePrivateVirtualInterface?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  post:
    description: Provisions a private virtual interface to be owned by a different customer. The owner of a connection calls this function to provision a private virtual interface which will be owned by another AWS customer. Virtual interfaces created using this function must be confirmed by the virtual interface owner by calling ConfirmPrivateVirtualInterface. Until this step has been completed, the virtual interface will be in 'Confirming' state, and will not be available for handling traffic.
    displayName: Allocate Private Virtual Interface
    body:
      application/json: AllocatePrivateVirtualInterfaceRequest
    responses:
      200:
        body:
          application/json: VirtualInterface
      400:
        description: DirectConnectServerException
/{AllocatePublicVirtualInterface}:
  uriParameters:
    AllocatePublicVirtualInterface?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  post:
    description: Provisions a public virtual interface to be owned by a different customer. The owner of a connection calls this function to provision a public virtual interface which will be owned by another AWS customer. Virtual interfaces created using this function must be confirmed by the virtual interface owner by calling ConfirmPublicVirtualInterface. Until this step has been completed, the virtual interface will be in 'Confirming' state, and will not be available for handling traffic.
    displayName: Allocate Public Virtual Interface
    body:
      application/json: AllocatePublicVirtualInterfaceRequest
    responses:
      200:
        body:
          application/json: VirtualInterface
      400:
        description: DirectConnectServerException
/{ConfirmConnection}:
  uriParameters:
    ConfirmConnection?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  post:
    description: Confirm the creation of a hosted connection on an interconnect. Upon creation, the hosted connection is initially in the 'Ordering' state, and will remain in this state until the owner calls ConfirmConnection to confirm creation of the hosted connection.
    displayName: Confirm Connection
    body:
      application/json: ConfirmConnectionRequest
    responses:
      200:
        body:
          application/json: ConfirmConnectionResponse
      400:
        description: DirectConnectServerException
/{ConfirmPrivateVirtualInterface}:
  uriParameters:
    ConfirmPrivateVirtualInterface?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  post:
    description: Accept ownership of a private virtual interface created by another customer. After the virtual interface owner calls this function, the virtual interface will be created and attached to the given virtual private gateway, and will be available for handling traffic.
    displayName: Confirm Private Virtual Interface
    body:
      application/json: ConfirmPrivateVirtualInterfaceRequest
    responses:
      200:
        body:
          application/json: ConfirmPrivateVirtualInterfaceResponse
      400:
        description: DirectConnectServerException
/{ConfirmPublicVirtualInterface}:
  uriParameters:
    ConfirmPublicVirtualInterface?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  post:
    description: Accept ownership of a public virtual interface created by another customer. After the virtual interface owner calls this function, the specified virtual interface will be created and made available for handling traffic.
    displayName: Confirm Public Virtual Interface
    body:
      application/json: ConfirmPublicVirtualInterfaceRequest
    responses:
      200:
        body:
          application/json: ConfirmPublicVirtualInterfaceResponse
      400:
        description: DirectConnectServerException
/{CreateConnection}:
  uriParameters:
    CreateConnection?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  post:
    description: Creates a new connection between the customer network and a specific AWS Direct Connect location. A connection links your internal network to an AWS Direct Connect location over a standard 1 gigabit or 10 gigabit Ethernet fiber-optic cable. One end of the cable is connected to your router, the other to an AWS Direct Connect router. An AWS Direct Connect location provides access to Amazon Web Services in the region it is associated with. You can establish connections with AWS Direct Connect locations in multiple regions, but a connection in one region does not provide connectivity to other regions.
    displayName: Create Connection
    body:
      application/json: CreateConnectionRequest
    responses:
      200:
        body:
          application/json: Connection
      400:
        description: DirectConnectServerException
/{CreateInterconnect}:
  uriParameters:
    CreateInterconnect?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  post:
    description: Creates a new interconnect between a AWS Direct Connect partner's network and a specific AWS Direct Connect location. An interconnect is a connection which is capable of hosting other connections. The AWS Direct Connect partner can use an interconnect to provide sub-1Gbps AWS Direct Connect service to tier 2 customers who do not have their own connections. Like a standard connection, an interconnect links the AWS Direct Connect partner's network to an AWS Direct Connect location over a standard 1 Gbps or 10 Gbps Ethernet fiber-optic cable. One end is connected to the partner's router, the other to an AWS Direct Connect router. For each end customer, the AWS Direct Connect partner provisions a connection on their interconnect by calling AllocateConnectionOnInterconnect. The end customer can then connect to AWS resources by creating a virtual interface on their connection, using the VLAN assigned to them by the AWS Direct Connect partner. <note> This is intended for use by AWS Direct Connect partners only. </note>
    displayName: Create Interconnect
    body:
      application/json: CreateInterconnectRequest
    responses:
      200:
        body:
          application/json: Interconnect
      400:
        description: DirectConnectServerException
/{CreatePrivateVirtualInterface}:
  uriParameters:
    CreatePrivateVirtualInterface?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  post:
    description: Creates a new private virtual interface. A virtual interface is the VLAN that transports AWS Direct Connect traffic. A private virtual interface supports sending traffic to a single virtual private cloud (VPC).
    displayName: Create Private Virtual Interface
    body:
      application/json: CreatePrivateVirtualInterfaceRequest
    responses:
      200:
        body:
          application/json: VirtualInterface
      400:
        description: DirectConnectServerException
/{CreatePublicVirtualInterface}:
  uriParameters:
    CreatePublicVirtualInterface?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  post:
    description: Creates a new public virtual interface. A virtual interface is the VLAN that transports AWS Direct Connect traffic. A public virtual interface supports sending traffic to public services of AWS such as Amazon Simple Storage Service (Amazon S3).
    displayName: Create Public Virtual Interface
    body:
      application/json: CreatePublicVirtualInterfaceRequest
    responses:
      200:
        body:
          application/json: VirtualInterface
      400:
        description: DirectConnectServerException
/{DeleteConnection}:
  uriParameters:
    DeleteConnection?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  post:
    description: Deletes the connection. Deleting a connection only stops the AWS Direct Connect port hour and data transfer charges. You need to cancel separately with the providers any services or charges for cross-connects or network circuits that connect you to the AWS Direct Connect location.
    displayName: Delete Connection
    body:
      application/json: DeleteConnectionRequest
    responses:
      200:
        body:
          application/json: Connection
      400:
        description: DirectConnectServerException
/{DeleteInterconnect}:
  uriParameters:
    DeleteInterconnect?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  post:
    description: Deletes the specified interconnect. <note> This is intended for use by AWS Direct Connect partners only. </note>
    displayName: Delete Interconnect
    body:
      application/json: DeleteInterconnectRequest
    responses:
      200:
        body:
          application/json: DeleteInterconnectResponse
      400:
        description: DirectConnectServerException
/{DeleteVirtualInterface}:
  uriParameters:
    DeleteVirtualInterface?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  post:
    description: Deletes a virtual interface.
    displayName: Delete Virtual Interface
    body:
      application/json: DeleteVirtualInterfaceRequest
    responses:
      200:
        body:
          application/json: DeleteVirtualInterfaceResponse
      400:
        description: DirectConnectServerException
/{DescribeConnectionLoa}:
  uriParameters:
    DescribeConnectionLoa?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  post:
    description: Returns the LOA-CFA for a Connection. The Letter of Authorization - Connecting Facility Assignment (LOA-CFA) is a document that your APN partner or service provider uses when establishing your cross connect to AWS at the colocation facility. For more information, see <a href="http://docs.aws.amazon.com/directconnect/latest/UserGuide/Colocation.html">Requesting Cross Connects at AWS Direct Connect Locations</a> in the AWS Direct Connect user guide.
    displayName: Describe Connection Loa
    body:
      application/json: DescribeConnectionLoaRequest
    responses:
      200:
        body:
          application/json: DescribeConnectionLoaResponse
      400:
        description: DirectConnectServerException
/{DescribeConnections}:
  uriParameters:
    DescribeConnections?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  post:
    description: Displays all connections in this region. If a connection ID is provided, the call returns only that particular connection.
    displayName: Describe Connections
    body:
      application/json: DescribeConnectionsRequest
    responses:
      200:
        body:
          application/json: Connections
      400:
        description: DirectConnectServerException
/{DescribeConnectionsOnInterconnect}:
  uriParameters:
    DescribeConnectionsOnInterconnect?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  post:
    description: Return a list of connections that have been provisioned on the given interconnect. <note> This is intended for use by AWS Direct Connect partners only. </note>
    displayName: Describe Connections On Interconnect
    body:
      application/json: DescribeConnectionsOnInterconnectRequest
    responses:
      200:
        body:
          application/json: Connections
      400:
        description: DirectConnectServerException
/{DescribeInterconnectLoa}:
  uriParameters:
    DescribeInterconnectLoa?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  post:
    description: Returns the LOA-CFA for an Interconnect. The Letter of Authorization - Connecting Facility Assignment (LOA-CFA) is a document that is used when establishing your cross connect to AWS at the colocation facility. For more information, see <a href="http://docs.aws.amazon.com/directconnect/latest/UserGuide/Colocation.html">Requesting Cross Connects at AWS Direct Connect Locations</a> in the AWS Direct Connect user guide.
    displayName: Describe Interconnect Loa
    body:
      application/json: DescribeInterconnectLoaRequest
    responses:
      200:
        body:
          application/json: DescribeInterconnectLoaResponse
      400:
        description: DirectConnectServerException
/{DescribeInterconnects}:
  uriParameters:
    DescribeInterconnects?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  post:
    description: Returns a list of interconnects owned by the AWS account. If an interconnect ID is provided, it will only return this particular interconnect.
    displayName: Describe Interconnects
    body:
      application/json: DescribeInterconnectsRequest
    responses:
      200:
        body:
          application/json: Interconnects
      400:
        description: DirectConnectServerException
/{DescribeLocations}:
  uriParameters:
    DescribeLocations?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  post:
    description: Returns the list of AWS Direct Connect locations in the current AWS region. These are the locations that may be selected when calling CreateConnection or CreateInterconnect.
    displayName: Describe Locations
    responses:
      200:
        body:
          application/json: Locations
      400:
        description: DirectConnectServerException
/{DescribeVirtualGateways}:
  uriParameters:
    DescribeVirtualGateways?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  post:
    description: Returns a list of virtual private gateways owned by the AWS account. You can create one or more AWS Direct Connect private virtual interfaces linking to a virtual private gateway. A virtual private gateway can be managed via Amazon Virtual Private Cloud (VPC) console or the <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/ApiReference-query-CreateVpnGateway.html">EC2 CreateVpnGateway</a> action.
    displayName: Describe Virtual Gateways
    responses:
      200:
        body:
          application/json: VirtualGateways
      400:
        description: DirectConnectServerException
/{DescribeVirtualInterfaces}:
  uriParameters:
    DescribeVirtualInterfaces?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  post:
    description: Displays all virtual interfaces for an AWS account. Virtual interfaces deleted fewer than 15 minutes before DescribeVirtualInterfaces is called are also returned. If a connection ID is included then only virtual interfaces associated with this connection will be returned. If a virtual interface ID is included then only a single virtual interface will be returned. A virtual interface (VLAN) transmits the traffic between the AWS Direct Connect location and the customer. If a connection ID is provided, only virtual interfaces provisioned on the specified connection will be returned. If a virtual interface ID is provided, only this particular virtual interface will be returned.
    displayName: Describe Virtual Interfaces
    body:
      application/json: DescribeVirtualInterfacesRequest
    responses:
      200:
        body:
          application/json: VirtualInterfaces
      400:
        description: DirectConnectServerException
