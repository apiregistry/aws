#%RAML 1.0
title: AWS Data Pipeline
version: '2012-10-29'
description: ' AWS Data Pipeline configures and manages a data-driven workflow called
  a pipeline. AWS Data Pipeline handles the details of scheduling and ensuring that
  data dependencies are met so that your application can focus on processing the data.  AWS
  Data Pipeline provides a JAR implementation of a task runner called AWS Data Pipeline
  Task Runner. AWS Data Pipeline Task Runner provides logic for common data management
  scenarios, such as performing database queries and running data analysis using Amazon
  Elastic MapReduce (Amazon EMR). You can use AWS Data Pipeline Task Runner as your
  task runner, or you can write your own task runner to provide custom data management.  AWS
  Data Pipeline implements two main sets of functionality. Use the first set to create
  a pipeline and define data sources, schedules, dependencies, and the transforms
  to be performed on the data. Use the second set in your task runner application
  to receive the next task ready for processing. The logic for performing the task,
  such as querying the data, running data analysis, or converting the data from one
  format to another, is contained within the task runner. The task runner performs
  the task assigned to it by the web service, reporting progress to the web service
  as it does so. When the task is done, the task runner reports the final success
  or failure of the task to the web service.'
mediaType:
- application/json
types:
  OperatorType:
    type: string
    enum:
    - EQ
    - REF_EQ
    - LE
    - GE
    - BETWEEN
  ParameterAttributeList:
    type: array
    items:
      type: ParameterAttribute
  ParameterObjectList:
    type: array
    items:
      type: ParameterObject
  ParameterValueList:
    type: array
    items:
      type: ParameterValue
  PipelineDescriptionList:
    type: array
    items:
      type: PipelineDescription
  PipelineObjectList:
    type: array
    items:
      type: PipelineObject
  SelectorList:
    type: array
    items:
      type: Selector
    description: <p>The list of Selectors that define queries on individual fields.</p>
  TaskStatus:
    type: string
    enum:
    - FINISHED
    - FAILED
    - 'FALSE'
  ValidationErrors:
    type: array
    items:
      type: ValidationError
  ValidationWarnings:
    type: array
    items:
      type: ValidationWarning
  attributeNameString:
    type: string
    pattern: '[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*'
    minLength: 1
    maxLength: 256
  attributeValueString:
    type: string
    pattern: '[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*'
    minLength: 0
    maxLength: 10240
  cancelActive:
    type: boolean
  errorMessage:
    type: string
  fieldList:
    type: array
    items:
      type: Field
  fieldNameString:
    type: string
    pattern: '[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*'
    minLength: 1
    maxLength: 256
  fieldStringValue:
    type: string
    pattern: '[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*'
    minLength: 0
    maxLength: 10240
  id:
    type: string
    pattern: '[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*'
    minLength: 1
    maxLength: 1024
  idList:
    type: array
    items:
      type: id
  int:
    type: integer
    format: int
  longString:
    type: string
    pattern: '[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*'
    minLength: 0
    maxLength: 20971520
  pipelineList:
    type: array
    items:
      type: PipelineIdName
  stringList:
    type: array
    items:
      type: string
  tagKey:
    type: string
    minLength: 1
    maxLength: 128
  tagList:
    type: array
    minItems: 0
    maxItems: 10
    items:
      type: Tag
  tagValue:
    type: string
    minLength: 0
    maxLength: 256
  taskId:
    type: string
    pattern: '[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*'
    minLength: 1
    maxLength: 2048
  timestamp:
    type: datetime
  validationMessage:
    type: string
    pattern: '[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*'
    minLength: 0
    maxLength: 10000
  validationMessages:
    type: array
    items:
      type: validationMessage
  ActivatePipelineInput:
    type: object
    properties:
      pipelineId:
        type: id
        description: <p>The ID of the pipeline.</p>
      parameterValues?:
        type: ParameterValueList
        description: <p>A list of parameter values to pass to the pipeline at activation.</p>
      startTimestamp?:
        type: timestamp
        description: <p>The date and time to resume the pipeline. By default, the pipeline resumes from the last completed execution.</p>
    description: <p>Contains the parameters for ActivatePipeline.</p>
  ActivatePipelineOutput:
    type: object
    description: <p>Contains the output of ActivatePipeline.</p>
  AddTagsInput:
    type: object
    properties:
      pipelineId:
        type: id
        description: <p>The ID of the pipeline.</p>
      tags:
        type: tagList
        description: <p>The tags to add, as key/value pairs.</p>
    description: <p>Contains the parameters for AddTags.</p>
  AddTagsOutput:
    type: object
    description: <p>Contains the output of AddTags.</p>
  CreatePipelineInput:
    type: object
    properties:
      name:
        type: id
        description: <p>The name for the pipeline. You can use the same name for multiple pipelines associated with your AWS account, because AWS Data Pipeline assigns each pipeline a unique pipeline identifier.</p>
      uniqueId:
        type: id
        description: <p>A unique identifier. This identifier is not the same as the pipeline identifier assigned by AWS Data Pipeline. You are responsible for defining the format and ensuring the uniqueness of this identifier. You use this parameter to ensure idempotency during repeated calls to <code>CreatePipeline</code>. For example, if the first call to <code>CreatePipeline</code> does not succeed, you can pass in the same unique identifier and pipeline name combination on a subsequent call to <code>CreatePipeline</code>. <code>CreatePipeline</code> ensures that if a pipeline already exists with the same name and unique identifier, a new pipeline is not created. Instead, you'll receive the pipeline identifier from the previous attempt. The uniqueness of the name and unique identifier combination is scoped to the AWS account or IAM user credentials.</p>
      description?:
        type: string
        description: <p>The description for the pipeline.</p>
      tags?:
        type: tagList
        description: <p>A list of tags to associate with the pipeline at creation. Tags let you control access to pipelines. For more information, see <a href="http://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-control-access.html">Controlling User Access to Pipelines</a> in the <i>AWS Data Pipeline Developer Guide</i>.</p>
    description: <p>Contains the parameters for CreatePipeline.</p>
  CreatePipelineOutput:
    type: object
    properties:
      pipelineId:
        type: id
        description: <p>The ID that AWS Data Pipeline assigns the newly created pipeline. For example, <code>df-06372391ZG65EXAMPLE</code>.</p>
    description: <p>Contains the output of CreatePipeline.</p>
  DeactivatePipelineInput:
    type: object
    properties:
      pipelineId:
        type: id
        description: <p>The ID of the pipeline.</p>
      cancelActive?:
        type: cancelActive
        description: <p>Indicates whether to cancel any running objects. The default is true, which sets the state of any running objects to <code>CANCELED</code>. If this value is false, the pipeline is deactivated after all running objects finish.</p>
    description: <p>Contains the parameters for DeactivatePipeline.</p>
  DeactivatePipelineOutput:
    type: object
    description: <p>Contains the output of DeactivatePipeline.</p>
  DeletePipelineInput:
    type: object
    properties:
      pipelineId:
        type: id
        description: <p>The ID of the pipeline.</p>
    description: <p>Contains the parameters for DeletePipeline.</p>
  DescribeObjectsInput:
    type: object
    properties:
      pipelineId:
        type: id
        description: <p>The ID of the pipeline that contains the object definitions.</p>
      objectIds:
        type: idList
        description: <p>The IDs of the pipeline objects that contain the definitions to be described. You can pass as many as 25 identifiers in a single call to <code>DescribeObjects</code>.</p>
      evaluateExpressions?:
        type: boolean
        description: <p>Indicates whether any expressions in the object should be evaluated when the object descriptions are returned.</p>
      marker?:
        type: string
        description: <p>The starting point for the results to be returned. For the first call, this value should be empty. As long as there are more results, continue to call <code>DescribeObjects</code> with the marker value from the previous call to retrieve the next set of results.</p>
    description: <p>Contains the parameters for DescribeObjects.</p>
  DescribeObjectsOutput:
    type: object
    properties:
      pipelineObjects:
        type: PipelineObjectList
        description: <p>An array of object definitions.</p>
      marker?:
        type: string
        description: <p>The starting point for the next page of results. To view the next page of results, call <code>DescribeObjects</code> again with this marker value. If the value is null, there are no more results.</p>
      hasMoreResults?:
        type: boolean
        description: <p>Indicates whether there are more results to return.</p>
    description: <p>Contains the output of DescribeObjects.</p>
  DescribePipelinesInput:
    type: object
    properties:
      pipelineIds:
        type: idList
        description: <p>The IDs of the pipelines to describe. You can pass as many as 25 identifiers in a single call. To obtain pipeline IDs, call <a>ListPipelines</a>.</p>
    description: <p>Contains the parameters for DescribePipelines.</p>
  DescribePipelinesOutput:
    type: object
    properties:
      pipelineDescriptionList:
        type: PipelineDescriptionList
        description: <p>An array of descriptions for the specified pipelines.</p>
    description: <p>Contains the output of DescribePipelines.</p>
  EvaluateExpressionInput:
    type: object
    properties:
      pipelineId:
        type: id
        description: <p>The ID of the pipeline.</p>
      objectId:
        type: id
        description: <p>The ID of the object.</p>
      expression:
        type: longString
        description: <p>The expression to evaluate.</p>
    description: <p>Contains the parameters for EvaluateExpression.</p>
  EvaluateExpressionOutput:
    type: object
    properties:
      evaluatedExpression:
        type: longString
        description: <p>The evaluated expression.</p>
    description: <p>Contains the output of EvaluateExpression.</p>
  Field:
    type: object
    properties:
      key:
        type: fieldNameString
        description: <p>The field identifier.</p>
      stringValue?:
        type: fieldStringValue
        description: <p>The field value, expressed as a String.</p>
      refValue?:
        type: fieldNameString
        description: <p>The field value, expressed as the identifier of another object.</p>
    description: <p>A key-value pair that describes a property of a pipeline object. The value is specified as either a string value (<code>StringValue</code>) or a reference to another object (<code>RefValue</code>) but not as both.</p>
  GetPipelineDefinitionInput:
    type: object
    properties:
      pipelineId:
        type: id
        description: <p>The ID of the pipeline.</p>
      version?:
        type: string
        description: <p>The version of the pipeline definition to retrieve. Set this parameter to <code>latest</code> (default) to use the last definition saved to the pipeline or <code>active</code> to use the last definition that was activated.</p>
    description: <p>Contains the parameters for GetPipelineDefinition.</p>
  GetPipelineDefinitionOutput:
    type: object
    properties:
      pipelineObjects?:
        type: PipelineObjectList
        description: <p>The objects defined in the pipeline.</p>
      parameterObjects?:
        type: ParameterObjectList
        description: <p>The parameter objects used in the pipeline definition.</p>
      parameterValues?:
        type: ParameterValueList
        description: <p>The parameter values used in the pipeline definition.</p>
    description: <p>Contains the output of GetPipelineDefinition.</p>
  InstanceIdentity:
    type: object
    properties:
      document?:
        type: string
        description: <p>A description of an EC2 instance that is generated when the instance is launched and exposed to the instance via the instance metadata service in the form of a JSON representation of an object.</p>
      signature?:
        type: string
        description: <p>A signature which can be used to verify the accuracy and authenticity of the information provided in the instance identity document.</p>
    description: <p><p>Identity information for the EC2 instance that is hosting the task runner. You can get this value by calling a metadata URI from the EC2 instance. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AESDG-chapter-instancedata.html">Instance Metadata</a> in the <i>Amazon Elastic Compute Cloud User Guide.</i> Passing in this value proves that your task runner is running on an EC2 instance, and ensures the proper AWS Data Pipeline service charges are applied to your pipeline.</p></p>
  ListPipelinesInput:
    type: object
    properties:
      marker?:
        type: string
        description: <p>The starting point for the results to be returned. For the first call, this value should be empty. As long as there are more results, continue to call <code>ListPipelines</code> with the marker value from the previous call to retrieve the next set of results.</p>
    description: <p>Contains the parameters for ListPipelines.</p>
  ListPipelinesOutput:
    type: object
    properties:
      pipelineIdList:
        type: pipelineList
        description: <p>The pipeline identifiers. If you require additional information about the pipelines, you can use these identifiers to call <a>DescribePipelines</a> and <a>GetPipelineDefinition</a>.</p>
      marker?:
        type: string
        description: <p>The starting point for the next page of results. To view the next page of results, call <code>ListPipelinesOutput</code> again with this marker value. If the value is null, there are no more results.</p>
      hasMoreResults?:
        type: boolean
        description: <p>Indicates whether there are more results that can be obtained by a subsequent call.</p>
    description: <p>Contains the output of ListPipelines.</p>
  Operator:
    type: object
    properties:
      type?:
        type: OperatorType
        description: '<p> The logical operation to be performed: equal (<code>EQ</code>),
          equal reference (<code>REF_EQ</code>), less than or equal (<code>LE</code>),
          greater than or equal (<code>GE</code>), or between (<code>BETWEEN</code>).
          Equal reference (<code>REF_EQ</code>) can be used only with reference fields.
          The other comparison types can be used only with String fields. The comparison
          types you can use apply only to certain object fields, as detailed below.
          </p> <p> The comparison operators EQ and REF_EQ act on the following fields:
          </p> <ul> <li>name</li> <li>@sphere</li> <li>parent</li> <li>@componentParent</li>
          <li>@instanceParent</li> <li>@status</li> <li>@scheduledStartTime</li> <li>@scheduledEndTime</li>
          <li>@actualStartTime</li> <li>@actualEndTime</li> </ul> <p> The comparison
          operators <code>GE</code>, <code>LE</code>, and <code>BETWEEN</code> act
          on the following fields: </p> <ul> <li>@scheduledStartTime</li> <li>@scheduledEndTime</li>
          <li>@actualStartTime</li> <li>@actualEndTime</li> </ul> <p>Note that fields
          beginning with the at sign (@) are read-only and set by the web service.
          When you name fields, you should choose names containing only alpha-numeric
          values, as symbols may be reserved by AWS Data Pipeline. User-defined fields
          that you add to a pipeline should prefix their name with the string "my".</p>'
      values?:
        type: stringList
        description: <p>The value that the actual field value will be compared with.</p>
    description: <p>Contains a logical operation for comparing the value of a field with a specified value.</p>
  ParameterAttribute:
    type: object
    properties:
      key:
        type: attributeNameString
        description: <p>The field identifier.</p>
      stringValue:
        type: attributeValueString
        description: <p>The field value, expressed as a String.</p>
    description: <p>The attributes allowed or specified with a parameter object.</p>
  ParameterObject:
    type: object
    properties:
      id:
        type: fieldNameString
        description: <p>The ID of the parameter object. </p>
      attributes:
        type: ParameterAttributeList
        description: <p>The attributes of the parameter object.</p>
    description: <p>Contains information about a parameter object.</p>
  ParameterValue:
    type: object
    properties:
      id:
        type: fieldNameString
        description: <p>The ID of the parameter value.</p>
      stringValue:
        type: fieldStringValue
        description: <p>The field value, expressed as a String.</p>
    description: <p>A value or list of parameter values. </p>
  PipelineDescription:
    type: object
    properties:
      pipelineId:
        type: id
        description: <p>The pipeline identifier that was assigned by AWS Data Pipeline. This is a string of the form <code>df-297EG78HU43EEXAMPLE</code>.</p>
      name:
        type: id
        description: <p>The name of the pipeline.</p>
      fields:
        type: fieldList
        description: '<p>A list of read-only fields that contain metadata about the
          pipeline: @userId, @accountId, and @pipelineState.</p>'
      description?:
        type: string
        description: <p>Description of the pipeline.</p>
      tags?:
        type: tagList
        description: <p>A list of tags to associated with a pipeline. Tags let you control access to pipelines. For more information, see <a href="http://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-control-access.html">Controlling User Access to Pipelines</a> in the <i>AWS Data Pipeline Developer Guide</i>.</p>
    description: <p>Contains pipeline metadata.</p>
  PipelineIdName:
    type: object
    properties:
      id?:
        type: id
        description: <p>The ID of the pipeline that was assigned by AWS Data Pipeline. This is a string of the form <code>df-297EG78HU43EEXAMPLE</code>.</p>
      name?:
        type: id
        description: <p>The name of the pipeline.</p>
    description: <p>Contains the name and identifier of a pipeline.</p>
  PipelineObject:
    type: object
    properties:
      id:
        type: id
        description: <p>The ID of the object.</p>
      name:
        type: id
        description: <p>The name of the object.</p>
      fields:
        type: fieldList
        description: <p>Key-value pairs that define the properties of the object.</p>
    description: <p>Contains information about a pipeline object. This can be a logical, physical, or physical attempt pipeline object. The complete set of components of a pipeline defines the pipeline.</p>
  PipelineObjectMap:
    type: object
    properties:
      //:
        type: PipelineObject
  PollForTaskInput:
    type: object
    properties:
      workerGroup:
        type: string
        description: <p>The type of task the task runner is configured to accept and process. The worker group is set as a field on objects in the pipeline when they are created. You can only specify a single value for <code>workerGroup</code> in the call to <code>PollForTask</code>. There are no wildcard values permitted in <code>workerGroup</code>; the string must be an exact, case-sensitive, match.</p>
      hostname?:
        type: id
        description: <p>The public DNS name of the calling task runner.</p>
      instanceIdentity?:
        type: InstanceIdentity
        description: <p>Identity information for the EC2 instance that is hosting the task runner. You can get this value from the instance using <code>http://169.254.169.254/latest/meta-data/instance-id</code>. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AESDG-chapter-instancedata.html">Instance Metadata</a> in the <i>Amazon Elastic Compute Cloud User Guide.</i> Passing in this value proves that your task runner is running on an EC2 instance, and ensures the proper AWS Data Pipeline service charges are applied to your pipeline.</p>
    description: <p>Contains the parameters for PollForTask.</p>
  PollForTaskOutput:
    type: object
    properties:
      taskObject?:
        type: TaskObject
        description: <p>The information needed to complete the task that is being assigned to the task runner. One of the fields returned in this object is <code>taskId</code>, which contains an identifier for the task being assigned. The calling task runner uses <code>taskId</code> in subsequent calls to <a>ReportTaskProgress</a> and <a>SetTaskStatus</a>.</p>
    description: <p>Contains the output of PollForTask.</p>
  PutPipelineDefinitionInput:
    type: object
    properties:
      pipelineId:
        type: id
        description: <p>The ID of the pipeline.</p>
      pipelineObjects:
        type: PipelineObjectList
        description: <p>The objects that define the pipeline. These objects overwrite the existing pipeline definition.</p>
      parameterObjects?:
        type: ParameterObjectList
        description: <p>The parameter objects used with the pipeline.</p>
      parameterValues?:
        type: ParameterValueList
        description: <p>The parameter values used with the pipeline.</p>
    description: <p>Contains the parameters for PutPipelineDefinition.</p>
  PutPipelineDefinitionOutput:
    type: object
    properties:
      validationErrors?:
        type: ValidationErrors
        description: <p>The validation errors that are associated with the objects defined in <code>pipelineObjects</code>.</p>
      validationWarnings?:
        type: ValidationWarnings
        description: <p>The validation warnings that are associated with the objects defined in <code>pipelineObjects</code>.</p>
      errored:
        type: boolean
        description: <p>Indicates whether there were validation errors, and the pipeline definition is stored but cannot be activated until you correct the pipeline and call <code>PutPipelineDefinition</code> to commit the corrected pipeline.</p>
    description: <p>Contains the output of PutPipelineDefinition.</p>
  Query:
    type: object
    properties:
      selectors?:
        type: SelectorList
        description: <p>List of selectors that define the query. An object must satisfy all of the selectors to match the query.</p>
    description: <p>Defines the query to run against an object.</p>
  QueryObjectsInput:
    type: object
    properties:
      pipelineId:
        type: id
        description: <p>The ID of the pipeline.</p>
      query?:
        type: Query
        description: <p>The query that defines the objects to be returned. The <code>Query</code> object can contain a maximum of ten selectors. The conditions in the query are limited to top-level String fields in the object. These filters can be applied to components, instances, and attempts.</p>
      sphere:
        type: string
        description: '<p>Indicates whether the query applies to components or instances.
          The possible values are: <code>COMPONENT</code>, <code>INSTANCE</code>,
          and <code>ATTEMPT</code>.</p>'
      marker?:
        type: string
        description: <p>The starting point for the results to be returned. For the first call, this value should be empty. As long as there are more results, continue to call <code>QueryObjects</code> with the marker value from the previous call to retrieve the next set of results.</p>
      limit?:
        type: int
        description: <p>The maximum number of object names that <code>QueryObjects</code> will return in a single call. The default value is 100. </p>
    description: <p>Contains the parameters for QueryObjects.</p>
  QueryObjectsOutput:
    type: object
    properties:
      ids?:
        type: idList
        description: <p>The identifiers that match the query selectors.</p>
      marker?:
        type: string
        description: <p>The starting point for the next page of results. To view the next page of results, call <code>QueryObjects</code> again with this marker value. If the value is null, there are no more results.</p>
      hasMoreResults?:
        type: boolean
        description: <p>Indicates whether there are more results that can be obtained by a subsequent call.</p>
    description: <p>Contains the output of QueryObjects.</p>
  RemoveTagsInput:
    type: object
    properties:
      pipelineId:
        type: id
        description: <p>The ID of the pipeline.</p>
      tagKeys:
        type: stringList
        description: <p>The keys of the tags to remove.</p>
    description: <p>Contains the parameters for RemoveTags.</p>
  RemoveTagsOutput:
    type: object
    description: <p>Contains the output of RemoveTags.</p>
  ReportTaskProgressInput:
    type: object
    properties:
      taskId:
        type: taskId
        description: <p>The ID of the task assigned to the task runner. This value is provided in the response for <a>PollForTask</a>.</p>
      fields?:
        type: fieldList
        description: <p>Key-value pairs that define the properties of the ReportTaskProgressInput object.</p>
    description: <p>Contains the parameters for ReportTaskProgress.</p>
  ReportTaskProgressOutput:
    type: object
    properties:
      canceled:
        type: boolean
        description: <p>If true, the calling task runner should cancel processing of the task. The task runner does not need to call <a>SetTaskStatus</a> for canceled tasks.</p>
    description: <p>Contains the output of ReportTaskProgress.</p>
  ReportTaskRunnerHeartbeatInput:
    type: object
    properties:
      taskrunnerId:
        type: id
        description: <p>The ID of the task runner. This value should be unique across your AWS account. In the case of AWS Data Pipeline Task Runner launched on a resource managed by AWS Data Pipeline, the web service provides a unique identifier when it launches the application. If you have written a custom task runner, you should assign a unique identifier for the task runner.</p>
      workerGroup?:
        type: string
        description: <p>The type of task the task runner is configured to accept and process. The worker group is set as a field on objects in the pipeline when they are created. You can only specify a single value for <code>workerGroup</code>. There are no wildcard values permitted in <code>workerGroup</code>; the string must be an exact, case-sensitive, match.</p>
      hostname?:
        type: id
        description: <p>The public DNS name of the task runner.</p>
    description: <p>Contains the parameters for ReportTaskRunnerHeartbeat.</p>
  ReportTaskRunnerHeartbeatOutput:
    type: object
    properties:
      terminate:
        type: boolean
        description: <p>Indicates whether the calling task runner should terminate.</p>
    description: <p>Contains the output of ReportTaskRunnerHeartbeat.</p>
  Selector:
    type: object
    properties:
      fieldName?:
        type: string
        description: <p>The name of the field that the operator will be applied to. The field name is the "key" portion of the field definition in the pipeline definition syntax that is used by the AWS Data Pipeline API. If the field is not set on the object, the condition fails.</p>
      operator?:
        type: Operator
    description: <p>A comparision that is used to determine whether a query should return this object.</p>
  SetStatusInput:
    type: object
    properties:
      pipelineId:
        type: id
        description: <p>The ID of the pipeline that contains the objects.</p>
      objectIds:
        type: idList
        description: <p>The IDs of the objects. The corresponding objects can be either physical or components, but not a mix of both types.</p>
      status:
        type: string
        description: <p>The status to be set on all the objects specified in <code>objectIds</code>. For components, use <code>PAUSE</code> or <code>RESUME</code>. For instances, use <code>TRY_CANCEL</code>, <code>RERUN</code>, or <code>MARK_FINISHED</code>.</p>
    description: <p>Contains the parameters for SetStatus.</p>
  SetTaskStatusInput:
    type: object
    properties:
      taskId:
        type: taskId
        description: <p>The ID of the task assigned to the task runner. This value is provided in the response for <a>PollForTask</a>.</p>
      taskStatus:
        type: TaskStatus
        description: <p>If <code>FINISHED</code>, the task successfully completed. If <code>FAILED</code>, the task ended unsuccessfully. Preconditions use false.</p>
      errorId?:
        type: string
        description: <p>If an error occurred during the task, this value specifies the error code. This value is set on the physical attempt object. It is used to display error information to the user. It should not start with string "Service_" which is reserved by the system.</p>
      errorMessage?:
        type: errorMessage
        description: <p>If an error occurred during the task, this value specifies a text description of the error. This value is set on the physical attempt object. It is used to display error information to the user. The web service does not parse this value.</p>
      errorStackTrace?:
        type: string
        description: <p>If an error occurred during the task, this value specifies the stack trace associated with the error. This value is set on the physical attempt object. It is used to display error information to the user. The web service does not parse this value.</p>
    description: <p>Contains the parameters for SetTaskStatus.</p>
  SetTaskStatusOutput:
    type: object
    description: <p>Contains the output of SetTaskStatus.</p>
  Tag:
    type: object
    properties:
      key:
        type: tagKey
        description: <p>The key name of a tag defined by a user. For more information, see <a href="http://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-control-access.html">Controlling User Access to Pipelines</a> in the <i>AWS Data Pipeline Developer Guide</i>.</p>
      value:
        type: tagValue
        description: <p>The optional value portion of a tag defined by a user. For more information, see <a href="http://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-control-access.html">Controlling User Access to Pipelines</a> in the <i>AWS Data Pipeline Developer Guide</i>.</p>
    description: <p>Tags are key/value pairs defined by a user and associated with a pipeline to control access. AWS Data Pipeline allows you to associate ten tags per pipeline. For more information, see <a href="http://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-control-access.html">Controlling User Access to Pipelines</a> in the <i>AWS Data Pipeline Developer Guide</i>.</p>
  TaskObject:
    type: object
    properties:
      taskId?:
        type: taskId
        description: <p>An internal identifier for the task. This ID is passed to the <a>SetTaskStatus</a> and <a>ReportTaskProgress</a> actions.</p>
      pipelineId?:
        type: id
        description: <p>The ID of the pipeline that provided the task.</p>
      attemptId?:
        type: id
        description: <p>The ID of the pipeline task attempt object. AWS Data Pipeline uses this value to track how many times a task is attempted.</p>
      objects?:
        type: PipelineObjectMap
        description: <p>Connection information for the location where the task runner will publish the output of the task.</p>
    description: <p>Contains information about a pipeline task that is assigned to a task runner.</p>
  ValidatePipelineDefinitionInput:
    type: object
    properties:
      pipelineId:
        type: id
        description: <p>The ID of the pipeline.</p>
      pipelineObjects:
        type: PipelineObjectList
        description: <p>The objects that define the pipeline changes to validate against the pipeline.</p>
      parameterObjects?:
        type: ParameterObjectList
        description: <p>The parameter objects used with the pipeline.</p>
      parameterValues?:
        type: ParameterValueList
        description: <p>The parameter values used with the pipeline.</p>
    description: <p>Contains the parameters for ValidatePipelineDefinition.</p>
  ValidatePipelineDefinitionOutput:
    type: object
    properties:
      validationErrors?:
        type: ValidationErrors
        description: <p>Any validation errors that were found.</p>
      validationWarnings?:
        type: ValidationWarnings
        description: <p>Any validation warnings that were found.</p>
      errored:
        type: boolean
        description: <p>Indicates whether there were validation errors.</p>
    description: <p>Contains the output of ValidatePipelineDefinition.</p>
  ValidationError:
    type: object
    properties:
      id?:
        type: id
        description: <p>The identifier of the object that contains the validation error.</p>
      errors?:
        type: validationMessages
        description: <p>A description of the validation error.</p>
    description: <p>Defines a validation error. Validation errors prevent pipeline activation. The set of validation errors that can be returned are defined by AWS Data Pipeline.</p>
  ValidationWarning:
    type: object
    properties:
      id?:
        type: id
        description: <p>The identifier of the object that contains the validation warning.</p>
      warnings?:
        type: validationMessages
        description: <p>A description of the validation warning.</p>
    description: <p>Defines a validation warning. Validation warnings do not prevent pipeline activation. The set of validation warnings that can be returned are defined by AWS Data Pipeline.</p>
/{ActivatePipeline}:
  uriParameters:
    ActivatePipeline?:
      type: string
      enum:
      - ''
      description: This url parameter exists only to differentiate different operations on the same url
  description: Validates the specified pipeline and starts processing pipeline tasks. If the pipeline does not pass validation, activation fails. If you need to pause the pipeline to investigate an issue with a component, such as a data source or script, call <a>DeactivatePipeline</a>. To activate a finished pipeline, modify the end date for the pipeline and then activate it.
  post:
    body:
      application/json: ActivatePipelineInput
    responses:
      200:
        body:
          application/json: ActivatePipelineOutput
      400:
        description: PipelineNotFoundException
/{AddTags}:
  uriParameters:
    AddTags?:
      type: string
      enum:
      - ''
      description: This url parameter exists only to differentiate different operations on the same url
  description: Adds or modifies tags for the specified pipeline.
  post:
    body:
      application/json: AddTagsInput
    responses:
      200:
        body:
          application/json: AddTagsOutput
      400:
        description: InternalServiceError
/{CreatePipeline}:
  uriParameters:
    CreatePipeline?:
      type: string
      enum:
      - ''
      description: This url parameter exists only to differentiate different operations on the same url
  description: Creates a new, empty pipeline. Use <a>PutPipelineDefinition</a> to populate the pipeline.
  post:
    body:
      application/json: CreatePipelineInput
    responses:
      200:
        body:
          application/json: CreatePipelineOutput
      400:
        description: InternalServiceError
/{DeactivatePipeline}:
  uriParameters:
    DeactivatePipeline?:
      type: string
      enum:
      - ''
      description: This url parameter exists only to differentiate different operations on the same url
  description: Deactivates the specified running pipeline. The pipeline is set to the <code>DEACTIVATING</code> state until the deactivation process completes. To resume a deactivated pipeline, use <a>ActivatePipeline</a>. By default, the pipeline resumes from the last completed execution. Optionally, you can specify the date and time to resume the pipeline.
  post:
    body:
      application/json: DeactivatePipelineInput
    responses:
      200:
        body:
          application/json: DeactivatePipelineOutput
      400:
        description: PipelineNotFoundException
/{DeletePipeline}:
  uriParameters:
    DeletePipeline?:
      type: string
      enum:
      - ''
      description: This url parameter exists only to differentiate different operations on the same url
  description: Deletes a pipeline, its pipeline definition, and its run history. AWS Data Pipeline attempts to cancel instances associated with the pipeline that are currently being processed by task runners. Deleting a pipeline cannot be undone. You cannot query or restore a deleted pipeline. To temporarily pause a pipeline instead of deleting it, call <a>SetStatus</a> with the status set to <code>PAUSE</code> on individual components. Components that are paused by <a>SetStatus</a> can be resumed.
  post:
    body:
      application/json: DeletePipelineInput
    responses:
      200:
        body:
          application/json: null
      400:
        description: PipelineNotFoundException
/{DescribeObjects}:
  uriParameters:
    DescribeObjects?:
      type: string
      enum:
      - ''
      description: This url parameter exists only to differentiate different operations on the same url
  description: Gets the object definitions for a set of objects associated with the pipeline. Object definitions are composed of a set of fields that define the properties of the object.
  post:
    body:
      application/json: DescribeObjectsInput
    responses:
      200:
        body:
          application/json: DescribeObjectsOutput
      400:
        description: InternalServiceError
/{DescribePipelines}:
  uriParameters:
    DescribePipelines?:
      type: string
      enum:
      - ''
      description: This url parameter exists only to differentiate different operations on the same url
  description: Retrieves metadata about one or more pipelines. The information retrieved includes the name of the pipeline, the pipeline identifier, its current state, and the user account that owns the pipeline. Using account credentials, you can retrieve metadata about pipelines that you or your IAM users have created. If you are using an IAM user account, you can retrieve metadata about only those pipelines for which you have read permissions. To retrieve the full pipeline definition instead of metadata about the pipeline, call <a>GetPipelineDefinition</a>.
  post:
    body:
      application/json: DescribePipelinesInput
    responses:
      200:
        body:
          application/json: DescribePipelinesOutput
      400:
        description: PipelineNotFoundException
/{EvaluateExpression}:
  uriParameters:
    EvaluateExpression?:
      type: string
      enum:
      - ''
      description: This url parameter exists only to differentiate different operations on the same url
  description: Task runners call <code>EvaluateExpression</code> to evaluate a string in the context of the specified object. For example, a task runner can evaluate SQL queries stored in Amazon S3.
  post:
    body:
      application/json: EvaluateExpressionInput
    responses:
      200:
        body:
          application/json: EvaluateExpressionOutput
      400:
        description: InternalServiceError
/{GetPipelineDefinition}:
  uriParameters:
    GetPipelineDefinition?:
      type: string
      enum:
      - ''
      description: This url parameter exists only to differentiate different operations on the same url
  description: Gets the definition of the specified pipeline. You can call <code>GetPipelineDefinition</code> to retrieve the pipeline definition that you provided using <a>PutPipelineDefinition</a>.
  post:
    body:
      application/json: GetPipelineDefinitionInput
    responses:
      200:
        body:
          application/json: GetPipelineDefinitionOutput
      400:
        description: InternalServiceError
/{ListPipelines}:
  uriParameters:
    ListPipelines?:
      type: string
      enum:
      - ''
      description: This url parameter exists only to differentiate different operations on the same url
  description: Lists the pipeline identifiers for all active pipelines that you have permission to access.
  post:
    body:
      application/json: ListPipelinesInput
    responses:
      200:
        body:
          application/json: ListPipelinesOutput
      400:
        description: InternalServiceError
/{PollForTask}:
  uriParameters:
    PollForTask?:
      type: string
      enum:
      - ''
      description: This url parameter exists only to differentiate different operations on the same url
  description: 'Task runners call <code>PollForTask</code> to receive a task to perform
    from AWS Data Pipeline. The task runner specifies which tasks it can perform by
    setting a value for the <code>workerGroup</code> parameter. The task returned
    can come from any of the pipelines that match the <code>workerGroup</code> value
    passed in by the task runner and that was launched using the IAM user credentials
    specified by the task runner. If tasks are ready in the work queue, <code>PollForTask</code>
    returns a response immediately. If no tasks are available in the queue, <code>PollForTask</code>
    uses long-polling and holds on to a poll connection for up to a 90 seconds, during
    which time the first newly scheduled task is handed to the task runner. To accomodate
    this, set the socket timeout in your task runner to 90 seconds. The task runner
    should not call <code>PollForTask</code> again on the same <code>workerGroup</code>
    until it receives a response, and this can take up to 90 seconds. '
  post:
    body:
      application/json: PollForTaskInput
    responses:
      200:
        body:
          application/json: PollForTaskOutput
      400:
        description: InternalServiceError
/{PutPipelineDefinition}:
  uriParameters:
    PutPipelineDefinition?:
      type: string
      enum:
      - ''
      description: This url parameter exists only to differentiate different operations on the same url
  description: 'Adds tasks, schedules, and preconditions to the specified pipeline.
    You can use <code>PutPipelineDefinition</code> to populate a new pipeline.  <code>PutPipelineDefinition</code>
    also validates the configuration as it adds it to the pipeline. Changes to the
    pipeline are saved unless one of the following three validation errors exists
    in the pipeline.  <ol> <li>An object is missing a name or identifier field.</li>
    <li>A string or reference field is empty.</li> <li>The number of objects in the
    pipeline exceeds the maximum allowed objects.</li> <li>The pipeline is in a FINISHED
    state.</li> </ol>  Pipeline object definitions are passed to the <code>PutPipelineDefinition</code>
    action and returned by the <a>GetPipelineDefinition</a> action. '
  post:
    body:
      application/json: PutPipelineDefinitionInput
    responses:
      200:
        body:
          application/json: PutPipelineDefinitionOutput
      400:
        description: InternalServiceError
/{QueryObjects}:
  uriParameters:
    QueryObjects?:
      type: string
      enum:
      - ''
      description: This url parameter exists only to differentiate different operations on the same url
  description: Queries the specified pipeline for the names of objects that match the specified set of conditions.
  post:
    body:
      application/json: QueryObjectsInput
    responses:
      200:
        body:
          application/json: QueryObjectsOutput
      400:
        description: PipelineNotFoundException
/{RemoveTags}:
  uriParameters:
    RemoveTags?:
      type: string
      enum:
      - ''
      description: This url parameter exists only to differentiate different operations on the same url
  description: Removes existing tags from the specified pipeline.
  post:
    body:
      application/json: RemoveTagsInput
    responses:
      200:
        body:
          application/json: RemoveTagsOutput
      400:
        description: InternalServiceError
/{ReportTaskProgress}:
  uriParameters:
    ReportTaskProgress?:
      type: string
      enum:
      - ''
      description: This url parameter exists only to differentiate different operations on the same url
  description: Task runners call <code>ReportTaskProgress</code> when assigned a task to acknowledge that it has the task. If the web service does not receive this acknowledgement within 2 minutes, it assigns the task in a subsequent <a>PollForTask</a> call. After this initial acknowledgement, the task runner only needs to report progress every 15 minutes to maintain its ownership of the task. You can change this reporting time from 15 minutes by specifying a <code>reportProgressTimeout</code> field in your pipeline. If a task runner does not report its status after 5 minutes, AWS Data Pipeline assumes that the task runner is unable to process the task and reassigns the task in a subsequent response to <a>PollForTask</a>. Task runners should call <code>ReportTaskProgress</code> every 60 seconds.
  post:
    body:
      application/json: ReportTaskProgressInput
    responses:
      200:
        body:
          application/json: ReportTaskProgressOutput
      400:
        description: InternalServiceError
/{ReportTaskRunnerHeartbeat}:
  uriParameters:
    ReportTaskRunnerHeartbeat?:
      type: string
      enum:
      - ''
      description: This url parameter exists only to differentiate different operations on the same url
  description: Task runners call <code>ReportTaskRunnerHeartbeat</code> every 15 minutes to indicate that they are operational. If the AWS Data Pipeline Task Runner is launched on a resource managed by AWS Data Pipeline, the web service can use this call to detect when the task runner application has failed and restart a new instance.
  post:
    body:
      application/json: ReportTaskRunnerHeartbeatInput
    responses:
      200:
        body:
          application/json: ReportTaskRunnerHeartbeatOutput
      400:
        description: InternalServiceError
/{SetStatus}:
  uriParameters:
    SetStatus?:
      type: string
      enum:
      - ''
      description: This url parameter exists only to differentiate different operations on the same url
  description: Requests that the status of the specified physical or logical pipeline objects be updated in the specified pipeline. This update might not occur immediately, but is eventually consistent. The status that can be set depends on the type of object (for example, DataNode or Activity). You cannot perform this operation on <code>FINISHED</code> pipelines and attempting to do so returns <code>InvalidRequestException</code>.
  post:
    body:
      application/json: SetStatusInput
    responses:
      200:
        body:
          application/json: null
      400:
        description: PipelineNotFoundException
/{SetTaskStatus}:
  uriParameters:
    SetTaskStatus?:
      type: string
      enum:
      - ''
      description: This url parameter exists only to differentiate different operations on the same url
  description: Task runners call <code>SetTaskStatus</code> to notify AWS Data Pipeline that a task is completed and provide information about the final status. A task runner makes this call regardless of whether the task was sucessful. A task runner does not need to call <code>SetTaskStatus</code> for tasks that are canceled by the web service during a call to <a>ReportTaskProgress</a>.
  post:
    body:
      application/json: SetTaskStatusInput
    responses:
      200:
        body:
          application/json: SetTaskStatusOutput
      400:
        description: InternalServiceError
/{ValidatePipelineDefinition}:
  uriParameters:
    ValidatePipelineDefinition?:
      type: string
      enum:
      - ''
      description: This url parameter exists only to differentiate different operations on the same url
  description: Validates the specified pipeline definition to ensure that it is well formed and can be run without error.
  post:
    body:
      application/json: ValidatePipelineDefinitionInput
    responses:
      200:
        body:
          application/json: ValidatePipelineDefinitionOutput
      400:
        description: InternalServiceError
