#%RAML 1.0
title: Amazon Simple Storage Service
version: '2006-03-01'
mediaType:
- application/xml
uses:
  commons: https://raw.githubusercontent.com/apiregistry/commons/master/commons.raml
  extras: https://raw.githubusercontent.com/apiregistry/typesExtras/master/typeExtras.raml
types:
  AbortDate:
    type: datetime
  AbortRuleId:
    type: string
  AcceptRanges:
    type: string
  AllowedHeader:
    type: string
  AllowedHeaders:
    type: array
    items:
      type: AllowedHeader
  AllowedMethod:
    type: string
  AllowedMethods:
    type: array
    items:
      type: AllowedMethod
  AllowedOrigin:
    type: string
  AllowedOrigins:
    type: array
    items:
      type: AllowedOrigin
  Body:
    type: file
  BucketAccelerateStatus:
    type: string
    enum:
    - Enabled
    - Suspended
  BucketCannedACL:
    type: string
    enum:
    - private
    - public-read
    - public-read-write
    - authenticated-read
  BucketLocationConstraint:
    type: string
    enum:
    - EU
    - eu-west-1
    - us-west-1
    - us-west-2
    - ap-south-1
    - ap-southeast-1
    - ap-southeast-2
    - ap-northeast-1
    - sa-east-1
    - cn-north-1
    - eu-central-1
  BucketLogsPermission:
    type: string
    enum:
    - FULL_CONTROL
    - READ
    - WRITE
  BucketName:
    type: string
  BucketVersioningStatus:
    type: string
    enum:
    - Enabled
    - Suspended
  Buckets:
    type: array
    items:
      type: Bucket
  CORSRules:
    type: array
    items:
      type: CORSRule
  CacheControl:
    type: string
  CloudFunction:
    type: string
  CloudFunctionInvocationRole:
    type: string
  Code:
    type: string
  CommonPrefixList:
    type: array
    items:
      type: CommonPrefix
  CompletedPartList:
    type: array
    items:
      type: CompletedPart
  ContentDisposition:
    type: string
  ContentEncoding:
    type: string
  ContentLanguage:
    type: string
  ContentLength:
    type: integer
    format: long
  ContentMD5:
    type: string
  ContentRange:
    type: string
  ContentType:
    type: string
  CopySource:
    type: string
    pattern: \/.+\/.+
  CopySourceIfMatch:
    type: string
  CopySourceIfModifiedSince:
    type: datetime
  CopySourceIfNoneMatch:
    type: string
  CopySourceIfUnmodifiedSince:
    type: datetime
  CopySourceRange:
    type: string
  CopySourceSSECustomerAlgorithm:
    type: string
  CopySourceSSECustomerKey:
    type: string
  CopySourceSSECustomerKeyMD5:
    type: string
  CopySourceVersionId:
    type: string
  CreationDate:
    type: datetime
  Date:
    type: datetime
  Days:
    type: integer
    format: int
  DaysAfterInitiation:
    type: integer
    format: int
  DeleteMarker:
    type: boolean
  DeleteMarkerVersionId:
    type: string
  DeleteMarkers:
    type: array
    items:
      type: DeleteMarkerEntry
  DeletedObjects:
    type: array
    items:
      type: DeletedObject
  Delimiter:
    type: string
  DisplayName:
    type: string
  ETag:
    type: string
  EmailAddress:
    type: string
  EncodingType:
    type: string
    enum:
    - url
    description: Requests Amazon S3 to encode the object keys in the response and specifies the encoding method to use. An object key may contain any Unicode character; however, XML 1.0 parser cannot parse some characters, such as characters with an ASCII value from 0 to 10. For characters that are not supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response.
  Errors:
    type: array
    items:
      type: Error
  Event:
    type: string
    enum:
    - s3:ReducedRedundancyLostObject
    - s3:ObjectCreated:*
    - s3:ObjectCreated:Put
    - s3:ObjectCreated:Post
    - s3:ObjectCreated:Copy
    - s3:ObjectCreated:CompleteMultipartUpload
    - s3:ObjectRemoved:*
    - s3:ObjectRemoved:Delete
    - s3:ObjectRemoved:DeleteMarkerCreated
    description: Bucket event for which to send notifications.
  EventList:
    type: array
    items:
      type: Event
  Expiration:
    type: string
  ExpirationStatus:
    type: string
    enum:
    - Enabled
    - Disabled
  ExpiredObjectDeleteMarker:
    type: boolean
  Expires:
    type: datetime
  ExposeHeader:
    type: string
  ExposeHeaders:
    type: array
    items:
      type: ExposeHeader
  FetchOwner:
    type: boolean
  FilterRuleList:
    type: array
    items:
      type: FilterRule
    description: A list of containers for key value pair that defines the criteria for the filter rule.
  FilterRuleName:
    type: string
    enum:
    - prefix
    - suffix
  FilterRuleValue:
    type: string
  GrantFullControl:
    type: string
  GrantRead:
    type: string
  GrantReadACP:
    type: string
  GrantWrite:
    type: string
  GrantWriteACP:
    type: string
  Grants:
    type: array
    items:
      type: Grant
  HostName:
    type: string
  HttpErrorCodeReturnedEquals:
    type: string
  HttpRedirectCode:
    type: string
  ID:
    type: string
  IfMatch:
    type: string
  IfModifiedSince:
    type: datetime
  IfNoneMatch:
    type: string
  IfUnmodifiedSince:
    type: datetime
  Initiated:
    type: datetime
  IsLatest:
    type: boolean
  IsTruncated:
    type: boolean
  KeyCount:
    type: integer
    format: int
  KeyMarker:
    type: string
  KeyPrefixEquals:
    type: string
  LambdaFunctionArn:
    type: string
  LambdaFunctionConfigurationList:
    type: array
    items:
      type: LambdaFunctionConfiguration
  LastModified:
    type: datetime
  LifecycleRules:
    type: array
    items:
      type: LifecycleRule
  Location:
    type: string
  MFA:
    type: string
  MFADelete:
    type: string
    enum:
    - Enabled
    - Disabled
  MFADeleteStatus:
    type: string
    enum:
    - Enabled
    - Disabled
  Marker:
    type: string
  MaxAgeSeconds:
    type: integer
    format: int
  MaxKeys:
    type: integer
    format: int
  MaxParts:
    type: integer
    format: int
  MaxUploads:
    type: integer
    format: int
  Message:
    type: string
  MetadataDirective:
    type: string
    enum:
    - COPY
    - REPLACE
  MetadataKey:
    type: string
  MetadataValue:
    type: string
  MissingMeta:
    type: integer
    format: int
  MultipartUploadId:
    type: string
  MultipartUploadList:
    type: array
    items:
      type: MultipartUpload
  NextKeyMarker:
    type: string
  NextMarker:
    type: string
  NextPartNumberMarker:
    type: integer
    format: int
  NextToken:
    type: string
  NextUploadIdMarker:
    type: string
  NextVersionIdMarker:
    type: string
  NoncurrentVersionTransitionList:
    type: array
    items:
      type: NoncurrentVersionTransition
  NotificationId:
    type: string
    description: Optional unique identifier for configurations in a notification configuration. If you don't provide one, Amazon S3 will assign an ID.
  ObjectCannedACL:
    type: string
    enum:
    - private
    - public-read
    - public-read-write
    - authenticated-read
    - aws-exec-read
    - bucket-owner-read
    - bucket-owner-full-control
  ObjectIdentifierList:
    type: array
    items:
      type: ObjectIdentifier
  ObjectKey:
    type: string
    minLength: 1
  ObjectList:
    type: array
    items:
      type: Object
  ObjectStorageClass:
    type: string
    enum:
    - STANDARD
    - REDUCED_REDUNDANCY
    - GLACIER
  ObjectVersionId:
    type: string
  ObjectVersionList:
    type: array
    items:
      type: ObjectVersion
  ObjectVersionStorageClass:
    type: string
    enum:
    - STANDARD
  PartNumber:
    type: integer
    format: int
  PartNumberMarker:
    type: integer
    format: int
  Parts:
    type: array
    items:
      type: Part
  PartsCount:
    type: integer
    format: int
  Payer:
    type: string
    enum:
    - Requester
    - BucketOwner
  Permission:
    type: string
    enum:
    - FULL_CONTROL
    - WRITE
    - WRITE_ACP
    - READ
    - READ_ACP
  Policy:
    type: string
  Prefix:
    type: string
  Protocol:
    type: string
    enum:
    - http
    - https
  QueueArn:
    type: string
  QueueConfigurationList:
    type: array
    items:
      type: QueueConfiguration
  Quiet:
    type: boolean
  Range:
    type: string
  ReplaceKeyPrefixWith:
    type: string
  ReplaceKeyWith:
    type: string
  ReplicationRuleStatus:
    type: string
    enum:
    - Enabled
    - Disabled
  ReplicationRules:
    type: array
    items:
      type: ReplicationRule
  ReplicationStatus:
    type: string
    enum:
    - COMPLETE
    - PENDING
    - FAILED
    - REPLICA
  RequestCharged:
    type: string
    enum:
    - requester
    description: If present, indicates that the requester was successfully charged for the request.
  RequestPayer:
    type: string
    enum:
    - requester
    description: Confirms that the requester knows that she or he will be charged for the request. Bucket owners need not specify this parameter in their requests. Documentation on downloading objects from requester pays buckets can be found at http://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html
  ResponseCacheControl:
    type: string
  ResponseContentDisposition:
    type: string
  ResponseContentEncoding:
    type: string
  ResponseContentLanguage:
    type: string
  ResponseContentType:
    type: string
  ResponseExpires:
    type: datetime
  Restore:
    type: string
  Role:
    type: string
  RoutingRules:
    type: array
    items:
      type: RoutingRule
  Rules:
    type: array
    items:
      type: Rule
  SSECustomerAlgorithm:
    type: string
  SSECustomerKey:
    type: string
  SSECustomerKeyMD5:
    type: string
  SSEKMSKeyId:
    type: string
  ServerSideEncryption:
    type: string
    enum:
    - AES256
    - aws:kms
  Size:
    type: integer
    format: int
  StartAfter:
    type: string
  StorageClass:
    type: string
    enum:
    - STANDARD
    - REDUCED_REDUNDANCY
    - STANDARD_IA
  Suffix:
    type: string
  TagSet:
    type: array
    items:
      type: Tag
  TargetBucket:
    type: string
  TargetGrants:
    type: array
    items:
      type: TargetGrant
  TargetPrefix:
    type: string
  Token:
    type: string
  TopicArn:
    type: string
  TopicConfigurationList:
    type: array
    items:
      type: TopicConfiguration
  TransitionList:
    type: array
    items:
      type: Transition
  TransitionStorageClass:
    type: string
    enum:
    - GLACIER
    - STANDARD_IA
  Type:
    type: string
    enum:
    - CanonicalUser
    - AmazonCustomerByEmail
    - Group
  URI:
    type: string
  UploadIdMarker:
    type: string
  Value:
    type: string
  VersionIdMarker:
    type: string
  WebsiteRedirectLocation:
    type: string
  AbortIncompleteMultipartUpload:
    type: object
    properties:
      DaysAfterInitiation?:
        type: DaysAfterInitiation
        description: Indicates the number of days that must pass since initiation for Lifecycle to abort an Incomplete Multipart Upload.
    description: Specifies the days since the initiation of an Incomplete Multipart Upload that Lifecycle will wait before permanently removing all parts of the upload.
  AccelerateConfiguration:
    type: object
    properties:
      Status?:
        type: BucketAccelerateStatus
        description: The accelerate configuration of the bucket.
  AccessControlPolicy:
    type: object
    properties:
      AccessControlList?:
        type: Grants
        description: A list of grants.
      Owner?:
        type: Owner
  Bucket:
    type: object
    properties:
      Name?:
        type: BucketName
        description: The name of the bucket.
      CreationDate?:
        type: CreationDate
        description: Date the bucket was created.
  BucketLifecycleConfiguration:
    type: object
    properties:
      Rule:
        type: LifecycleRules
  BucketLoggingStatus:
    type: object
    properties:
      LoggingEnabled?:
        type: LoggingEnabled
  CORSConfiguration:
    type: object
    properties:
      CORSRule:
        type: CORSRules
  CORSRule:
    type: object
    properties:
      AllowedHeader?:
        type: AllowedHeaders
        description: Specifies which headers are allowed in a pre-flight OPTIONS request.
      AllowedMethod:
        type: AllowedMethods
        description: Identifies HTTP methods that the domain/origin specified in the rule is allowed to execute.
      AllowedOrigin:
        type: AllowedOrigins
        description: One or more origins you want customers to be able to access the bucket from.
      ExposeHeader?:
        type: ExposeHeaders
        description: One or more headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript XMLHttpRequest object).
      MaxAgeSeconds?:
        type: MaxAgeSeconds
        description: The time in seconds that your browser is to cache the preflight response for the specified resource.
  CloudFunctionConfiguration:
    type: object
    properties:
      Id?:
        type: NotificationId
      Event?:
        type: EventList
      CloudFunction?:
        type: CloudFunction
      InvocationRole?:
        type: CloudFunctionInvocationRole
  CommonPrefix:
    type: object
    properties:
      Prefix?:
        type: Prefix
  CompletedMultipartUpload:
    type: object
    properties:
      Part?:
        type: CompletedPartList
  CompletedPart:
    type: object
    properties:
      ETag?:
        type: ETag
        description: Entity tag returned when the part was uploaded.
      PartNumber?:
        type: PartNumber
        description: Part number that identifies the part. This is a positive integer between 1 and 10,000.
  Condition:
    type: object
    properties:
      HttpErrorCodeReturnedEquals?:
        type: HttpErrorCodeReturnedEquals
        description: The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied. Required when parent element Condition is specified and sibling KeyPrefixEquals is not specified. If both are specified, then both must be true for the redirect to be applied.
      KeyPrefixEquals?:
        type: KeyPrefixEquals
        description: The object key name prefix when the redirect is applied. For example, to redirect requests for ExamplePage.html, the key prefix will be ExamplePage.html. To redirect request for all pages with the prefix docs/, the key prefix will be /docs, which identifies all objects in the docs/ folder. Required when the parent element Condition is specified and sibling HttpErrorCodeReturnedEquals is not specified. If both conditions are specified, both must be true for the redirect to be applied.
  CopyObjectResult:
    type: object
    properties:
      ETag?:
        type: ETag
      LastModified?:
        type: LastModified
  CopyPartResult:
    type: object
    properties:
      ETag?:
        type: ETag
        description: Entity tag of the object.
      LastModified?:
        type: LastModified
        description: Date and time at which the object was uploaded.
  CreateBucketConfiguration:
    type: object
    properties:
      LocationConstraint?:
        type: BucketLocationConstraint
        description: Specifies the region where the bucket will be created. If you don't specify a region, the bucket will be created in US Standard.
  Delete:
    type: object
    properties:
      Object:
        type: ObjectIdentifierList
      Quiet?:
        type: Quiet
        description: Element to enable quiet mode for the request. When you add this element, you must set its value to true.
  DeleteMarkerEntry:
    type: object
    properties:
      Owner?:
        type: Owner
      Key?:
        type: ObjectKey
        description: The object key.
      VersionId?:
        type: ObjectVersionId
        description: Version ID of an object.
      IsLatest?:
        type: IsLatest
        description: Specifies whether the object is (true) or is not (false) the latest version of an object.
      LastModified?:
        type: LastModified
        description: Date and time the object was last modified.
  DeletedObject:
    type: object
    properties:
      Key?:
        type: ObjectKey
      VersionId?:
        type: ObjectVersionId
      DeleteMarker?:
        type: DeleteMarker
      DeleteMarkerVersionId?:
        type: DeleteMarkerVersionId
  Destination:
    type: object
    properties:
      Bucket:
        type: BucketName
        description: Amazon resource name (ARN) of the bucket where you want Amazon S3 to store replicas of the object identified by the rule.
      StorageClass?:
        type: StorageClass
        description: The class of storage used to store the object.
  Error:
    type: object
    properties:
      Key?:
        type: ObjectKey
      VersionId?:
        type: ObjectVersionId
      Code?:
        type: Code
      Message?:
        type: Message
  ErrorDocument:
    type: object
    properties:
      Key:
        type: ObjectKey
        description: The object key name to use when a 4XX class error occurs.
  FilterRule:
    type: object
    properties:
      Name?:
        type: FilterRuleName
        description: Object key name prefix or suffix identifying one or more objects to which the filtering rule applies. Maximum prefix length can be up to 1,024 characters. Overlapping prefixes and suffixes are not supported. For more information, go to <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html">Configuring Event Notifications</a> in the Amazon Simple Storage Service Developer Guide.
      Value?:
        type: FilterRuleValue
    description: Container for key value pair that defines the criteria for the filter rule.
  GetBucketAccelerateConfigurationOutput:
    type: object
    properties:
      Status?:
        type: BucketAccelerateStatus
        description: The accelerate configuration of the bucket.
  GetBucketAclOutput:
    type: object
    properties:
      Owner?:
        type: Owner
      AccessControlList?:
        type: Grants
        description: A list of grants.
  GetBucketCorsOutput:
    type: object
    properties:
      CORSRule?:
        type: CORSRules
  GetBucketLifecycleConfigurationOutput:
    type: object
    properties:
      Rule?:
        type: LifecycleRules
  GetBucketLifecycleOutput:
    type: object
    properties:
      Rule?:
        type: Rules
  GetBucketLocationOutput:
    type: object
    properties:
      LocationConstraint?:
        type: BucketLocationConstraint
  GetBucketLoggingOutput:
    type: object
    properties:
      LoggingEnabled?:
        type: LoggingEnabled
  GetBucketRequestPaymentOutput:
    type: object
    properties:
      Payer?:
        type: Payer
        description: Specifies who pays for the download and request fees.
  GetBucketTaggingOutput:
    type: object
    properties:
      TagSet:
        type: TagSet
  GetBucketVersioningOutput:
    type: object
    properties:
      Status?:
        type: BucketVersioningStatus
        description: The versioning state of the bucket.
      MfaDelete?:
        type: MFADeleteStatus
        description: Specifies whether MFA delete is enabled in the bucket versioning configuration. This element is only returned if the bucket has been configured with MFA delete. If the bucket has never been so configured, this element is not returned.
  GetBucketWebsiteOutput:
    type: object
    properties:
      RedirectAllRequestsTo?:
        type: RedirectAllRequestsTo
      IndexDocument?:
        type: IndexDocument
      ErrorDocument?:
        type: ErrorDocument
      RoutingRules?:
        type: RoutingRules
  Grant:
    type: object
    properties:
      Grantee?:
        type: Grantee
      Permission?:
        type: Permission
        description: Specifies the permission given to the grantee.
  Grantee:
    type: object
    properties:
      DisplayName?:
        type: DisplayName
        description: Screen name of the grantee.
      EmailAddress?:
        type: EmailAddress
        description: Email address of the grantee.
      ID?:
        type: ID
        description: The canonical user ID of the grantee.
      xsi:type:
        type: Type
        xml:
          attribute: true
        description: Type of grantee
      URI?:
        type: URI
        description: URI of the grantee group.
    xml:
      namespace: http://www.w3.org/2001/XMLSchema-instance
      prefix: xsi
  IndexDocument:
    type: object
    properties:
      Suffix:
        type: Suffix
        description: A suffix that is appended to a request that is for a directory on the website endpoint (e.g. if the suffix is index.html and you make a request to samplebucket/images/ the data that is returned will be for the object with the key name images/index.html) The suffix must not be empty and must not include a slash character.
  Initiator:
    type: object
    properties:
      ID?:
        type: ID
        description: If the principal is an AWS account, it provides the Canonical User ID. If the principal is an IAM User, it provides a user ARN value.
      DisplayName?:
        type: DisplayName
        description: Name of the Principal.
  LambdaFunctionConfiguration:
    type: object
    properties:
      Id?:
        type: NotificationId
      CloudFunction:
        type: LambdaFunctionArn
        description: Lambda cloud function ARN that Amazon S3 can invoke when it detects events of the specified type.
      Event:
        type: EventList
      Filter?:
        type: NotificationConfigurationFilter
    description: Container for specifying the AWS Lambda notification configuration.
  LifecycleConfiguration:
    type: object
    properties:
      Rule:
        type: Rules
  LifecycleExpiration:
    type: object
    properties:
      Date?:
        type: Date
        description: Indicates at what date the object is to be moved or deleted. Should be in GMT ISO 8601 Format.
      Days?:
        type: Days
        description: Indicates the lifetime, in days, of the objects that are subject to the rule. The value must be a non-zero positive integer.
      ExpiredObjectDeleteMarker?:
        type: ExpiredObjectDeleteMarker
        description: Indicates whether Amazon S3 will remove a delete marker with no noncurrent versions. If set to true, the delete marker will be expired; if set to false the policy takes no action. This cannot be specified with Days or Date in a Lifecycle Expiration Policy.
  LifecycleRule:
    type: object
    properties:
      Expiration?:
        type: LifecycleExpiration
      ID?:
        type: ID
        description: Unique identifier for the rule. The value cannot be longer than 255 characters.
      Prefix:
        type: Prefix
        description: Prefix identifying one or more objects to which the rule applies.
      Status:
        type: ExpirationStatus
        description: If 'Enabled', the rule is currently being applied. If 'Disabled', the rule is not currently being applied.
      Transition?:
        type: TransitionList
      NoncurrentVersionTransition?:
        type: NoncurrentVersionTransitionList
      NoncurrentVersionExpiration?:
        type: NoncurrentVersionExpiration
      AbortIncompleteMultipartUpload?:
        type: AbortIncompleteMultipartUpload
  ListBucketsOutput:
    type: object
    properties:
      Buckets?:
        type: Buckets
      Owner?:
        type: Owner
  ListMultipartUploadsOutput:
    type: object
    properties:
      Bucket?:
        type: BucketName
        description: Name of the bucket to which the multipart upload was initiated.
      KeyMarker?:
        type: KeyMarker
        description: The key at or after which the listing began.
      UploadIdMarker?:
        type: UploadIdMarker
        description: Upload ID after which listing began.
      NextKeyMarker?:
        type: NextKeyMarker
        description: When a list is truncated, this element specifies the value that should be used for the key-marker request parameter in a subsequent request.
      Prefix?:
        type: Prefix
        description: When a prefix is provided in the request, this field contains the specified prefix. The result contains only keys starting with the specified prefix.
      Delimiter?:
        type: Delimiter
      NextUploadIdMarker?:
        type: NextUploadIdMarker
        description: When a list is truncated, this element specifies the value that should be used for the upload-id-marker request parameter in a subsequent request.
      MaxUploads?:
        type: MaxUploads
        description: Maximum number of multipart uploads that could have been included in the response.
      IsTruncated?:
        type: IsTruncated
        description: Indicates whether the returned list of multipart uploads is truncated. A value of true indicates that the list was truncated. The list can be truncated if the number of multipart uploads exceeds the limit allowed or specified by max uploads.
      Upload?:
        type: MultipartUploadList
      CommonPrefixes?:
        type: CommonPrefixList
      EncodingType?:
        type: EncodingType
        description: Encoding type used by Amazon S3 to encode object keys in the response.
  ListObjectVersionsOutput:
    type: object
    properties:
      IsTruncated?:
        type: IsTruncated
        description: A flag that indicates whether or not Amazon S3 returned all of the results that satisfied the search criteria. If your results were truncated, you can make a follow-up paginated request using the NextKeyMarker and NextVersionIdMarker response parameters as a starting place in another request to return the rest of the results.
      KeyMarker?:
        type: KeyMarker
        description: Marks the last Key returned in a truncated response.
      VersionIdMarker?:
        type: VersionIdMarker
      NextKeyMarker?:
        type: NextKeyMarker
        description: Use this value for the key marker request parameter in a subsequent request.
      NextVersionIdMarker?:
        type: NextVersionIdMarker
        description: Use this value for the next version id marker parameter in a subsequent request.
      Version?:
        type: ObjectVersionList
      DeleteMarker?:
        type: DeleteMarkers
      Name?:
        type: BucketName
      Prefix?:
        type: Prefix
      Delimiter?:
        type: Delimiter
      MaxKeys?:
        type: MaxKeys
      CommonPrefixes?:
        type: CommonPrefixList
      EncodingType?:
        type: EncodingType
        description: Encoding type used by Amazon S3 to encode object keys in the response.
  ListObjectsOutput:
    type: object
    properties:
      IsTruncated?:
        type: IsTruncated
        description: A flag that indicates whether or not Amazon S3 returned all of the results that satisfied the search criteria.
      Marker?:
        type: Marker
      NextMarker?:
        type: NextMarker
        description: 'When response is truncated (the IsTruncated element value in
          the response is true), you can use the key name in this field as marker
          in the subsequent request to get next set of objects. Amazon S3 lists objects
          in alphabetical order Note: This element is returned only if you have delimiter
          request parameter specified. If response does not include the NextMaker
          and it is truncated, you can use the value of the last Key in the response
          as the marker in the subsequent request to get the next set of object keys.'
      Contents?:
        type: ObjectList
      Name?:
        type: BucketName
      Prefix?:
        type: Prefix
      Delimiter?:
        type: Delimiter
      MaxKeys?:
        type: MaxKeys
      CommonPrefixes?:
        type: CommonPrefixList
      EncodingType?:
        type: EncodingType
        description: Encoding type used by Amazon S3 to encode object keys in the response.
  ListObjectsV2Output:
    type: object
    properties:
      IsTruncated?:
        type: IsTruncated
        description: A flag that indicates whether or not Amazon S3 returned all of the results that satisfied the search criteria.
      Contents?:
        type: ObjectList
        description: Metadata about each object returned.
      Name?:
        type: BucketName
        description: Name of the bucket to list.
      Prefix?:
        type: Prefix
        description: Limits the response to keys that begin with the specified prefix.
      Delimiter?:
        type: Delimiter
        description: A delimiter is a character you use to group keys.
      MaxKeys?:
        type: MaxKeys
        description: Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more.
      CommonPrefixes?:
        type: CommonPrefixList
        description: CommonPrefixes contains all (if there are any) keys between Prefix and the next occurrence of the string specified by delimiter
      EncodingType?:
        type: EncodingType
        description: Encoding type used by Amazon S3 to encode object keys in the response.
      KeyCount?:
        type: KeyCount
        description: KeyCount is the number of keys returned with this request. KeyCount will always be less than equals to MaxKeys field. Say you ask for 50 keys, your result will include less than equals 50 keys
      ContinuationToken?:
        type: Token
        description: ContinuationToken indicates Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key
      NextContinuationToken?:
        type: NextToken
        description: NextContinuationToken is sent when isTruncated is true which means there are more keys in the bucket that can be listed. The next list requests to Amazon S3 can be continued with this NextContinuationToken. NextContinuationToken is obfuscated and is not a real key
      StartAfter?:
        type: StartAfter
        description: StartAfter is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this specified key. StartAfter can be any key in the bucket
  LoggingEnabled:
    type: object
    properties:
      TargetBucket?:
        type: TargetBucket
        description: Specifies the bucket where you want Amazon S3 to store server access logs. You can have your logs delivered to any bucket that you own, including the same bucket that is being logged. You can also configure multiple buckets to deliver their logs to the same target bucket. In this case you should choose a different TargetPrefix for each source bucket so that the delivered log files can be distinguished by key.
      TargetGrants?:
        type: TargetGrants
      TargetPrefix?:
        type: TargetPrefix
        description: This element lets you specify a prefix for the keys that the log files will be stored under.
  Metadata:
    type: object
    properties:
      //:
        type: MetadataValue
  MultipartUpload:
    type: object
    properties:
      UploadId?:
        type: MultipartUploadId
        description: Upload ID that identifies the multipart upload.
      Key?:
        type: ObjectKey
        description: Key of the object for which the multipart upload was initiated.
      Initiated?:
        type: Initiated
        description: Date and time at which the multipart upload was initiated.
      StorageClass?:
        type: StorageClass
        description: The class of storage used to store the object.
      Owner?:
        type: Owner
      Initiator?:
        type: Initiator
        description: Identifies who initiated the multipart upload.
  NoncurrentVersionExpiration:
    type: object
    properties:
      NoncurrentDays?:
        type: Days
        description: Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For information about the noncurrent days calculations, see <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html">How Amazon S3 Calculates When an Object Became Noncurrent</a> in the Amazon Simple Storage Service Developer Guide.
    description: Specifies when noncurrent object versions expire. Upon expiration, Amazon S3 permanently deletes the noncurrent object versions. You set this lifecycle configuration action on a bucket that has versioning enabled (or suspended) to request that Amazon S3 delete noncurrent object versions at a specific period in the object's lifetime.
  NoncurrentVersionTransition:
    type: object
    properties:
      NoncurrentDays?:
        type: Days
        description: Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For information about the noncurrent days calculations, see <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html">How Amazon S3 Calculates When an Object Became Noncurrent</a> in the Amazon Simple Storage Service Developer Guide.
      StorageClass?:
        type: TransitionStorageClass
        description: The class of storage used to store the object.
    description: Container for the transition rule that describes when noncurrent objects transition to the STANDARD_IA or GLACIER storage class. If your bucket is versioning-enabled (or versioning is suspended), you can set this action to request that Amazon S3 transition noncurrent object versions to the STANDARD_IA or GLACIER storage class at a specific period in the object's lifetime.
  NotificationConfiguration:
    type: object
    properties:
      TopicConfiguration?:
        type: TopicConfigurationList
      QueueConfiguration?:
        type: QueueConfigurationList
      CloudFunctionConfiguration?:
        type: LambdaFunctionConfigurationList
    description: Container for specifying the notification configuration of the bucket. If this element is empty, notifications are turned off on the bucket.
  NotificationConfigurationDeprecated:
    type: object
    properties:
      TopicConfiguration?:
        type: TopicConfigurationDeprecated
      QueueConfiguration?:
        type: QueueConfigurationDeprecated
      CloudFunctionConfiguration?:
        type: CloudFunctionConfiguration
  NotificationConfigurationFilter:
    type: object
    properties:
      S3Key?:
        type: S3KeyFilter
    description: Container for object key name filtering rules. For information about key name filtering, go to <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html">Configuring Event Notifications</a> in the Amazon Simple Storage Service Developer Guide.
  Object:
    type: object
    properties:
      Key?:
        type: ObjectKey
      LastModified?:
        type: LastModified
      ETag?:
        type: ETag
      Size?:
        type: Size
      StorageClass?:
        type: ObjectStorageClass
        description: The class of storage used to store the object.
      Owner?:
        type: Owner
  ObjectIdentifier:
    type: object
    properties:
      Key:
        type: ObjectKey
        description: Key name of the object to delete.
      VersionId?:
        type: ObjectVersionId
        description: VersionId for the specific version of the object to delete.
  ObjectVersion:
    type: object
    properties:
      ETag?:
        type: ETag
      Size?:
        type: Size
        description: Size in bytes of the object.
      StorageClass?:
        type: ObjectVersionStorageClass
        description: The class of storage used to store the object.
      Key?:
        type: ObjectKey
        description: The object key.
      VersionId?:
        type: ObjectVersionId
        description: Version ID of an object.
      IsLatest?:
        type: IsLatest
        description: Specifies whether the object is (true) or is not (false) the latest version of an object.
      LastModified?:
        type: LastModified
        description: Date and time the object was last modified.
      Owner?:
        type: Owner
  Owner:
    type: object
    properties:
      DisplayName?:
        type: DisplayName
      ID?:
        type: ID
  Part:
    type: object
    properties:
      PartNumber?:
        type: PartNumber
        description: Part number identifying the part. This is a positive integer between 1 and 10,000.
      LastModified?:
        type: LastModified
        description: Date and time at which the part was uploaded.
      ETag?:
        type: ETag
        description: Entity tag returned when the part was uploaded.
      Size?:
        type: Size
        description: Size of the uploaded part data.
  QueueConfiguration:
    type: object
    properties:
      Id?:
        type: NotificationId
      Queue:
        type: QueueArn
        description: Amazon SQS queue ARN to which Amazon S3 will publish a message when it detects events of specified type.
      Event:
        type: EventList
      Filter?:
        type: NotificationConfigurationFilter
    description: Container for specifying an configuration when you want Amazon S3 to publish events to an Amazon Simple Queue Service (Amazon SQS) queue.
  QueueConfigurationDeprecated:
    type: object
    properties:
      Id?:
        type: NotificationId
      Event?:
        type: EventList
      Queue?:
        type: QueueArn
  Redirect:
    type: object
    properties:
      HostName?:
        type: HostName
        description: The host name to use in the redirect request.
      HttpRedirectCode?:
        type: HttpRedirectCode
        description: The HTTP redirect code to use on the response. Not required if one of the siblings is present.
      Protocol?:
        type: Protocol
        description: Protocol to use (http, https) when redirecting requests. The default is the protocol that is used in the original request.
      ReplaceKeyPrefixWith?:
        type: ReplaceKeyPrefixWith
        description: The object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix docs/ (objects in the docs/ folder) to documents/, you can set a condition block with KeyPrefixEquals set to docs/ and in the Redirect set ReplaceKeyPrefixWith to /documents. Not required if one of the siblings is present. Can be present only if ReplaceKeyWith is not provided.
      ReplaceKeyWith?:
        type: ReplaceKeyWith
        description: The specific object key to use in the redirect request. For example, redirect request to error.html. Not required if one of the sibling is present. Can be present only if ReplaceKeyPrefixWith is not provided.
  RedirectAllRequestsTo:
    type: object
    properties:
      HostName:
        type: HostName
        description: Name of the host where requests will be redirected.
      Protocol?:
        type: Protocol
        description: Protocol to use (http, https) when redirecting requests. The default is the protocol that is used in the original request.
  ReplicationConfiguration:
    type: object
    properties:
      Role:
        type: Role
        description: Amazon Resource Name (ARN) of an IAM role for Amazon S3 to assume when replicating the objects.
      Rule:
        type: ReplicationRules
        description: Container for information about a particular replication rule. Replication configuration must have at least one rule and can contain up to 1,000 rules.
    description: Container for replication rules. You can add as many as 1,000 rules. Total replication configuration size can be up to 2 MB.
  ReplicationRule:
    type: object
    properties:
      ID?:
        type: ID
        description: Unique identifier for the rule. The value cannot be longer than 255 characters.
      Prefix:
        type: Prefix
        description: Object keyname prefix identifying one or more objects to which the rule applies. Maximum prefix length can be up to 1,024 characters. Overlapping prefixes are not supported.
      Status:
        type: ReplicationRuleStatus
        description: The rule is ignored if status is not Enabled.
      Destination:
        type: Destination
  RequestPaymentConfiguration:
    type: object
    properties:
      Payer:
        type: Payer
        description: Specifies who pays for the download and request fees.
  RestoreRequest:
    type: object
    properties:
      Days:
        type: Days
        description: Lifetime of the active copy in days
  RoutingRule:
    type: object
    properties:
      Condition?:
        type: Condition
        description: A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the /docs folder, redirect to the /documents folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.
      Redirect:
        type: Redirect
        description: Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can can specify a different error code to return.
  Rule:
    type: object
    properties:
      Expiration?:
        type: LifecycleExpiration
      ID?:
        type: ID
        description: Unique identifier for the rule. The value cannot be longer than 255 characters.
      Prefix:
        type: Prefix
        description: Prefix identifying one or more objects to which the rule applies.
      Status:
        type: ExpirationStatus
        description: If 'Enabled', the rule is currently being applied. If 'Disabled', the rule is not currently being applied.
      Transition?:
        type: Transition
      NoncurrentVersionTransition?:
        type: NoncurrentVersionTransition
      NoncurrentVersionExpiration?:
        type: NoncurrentVersionExpiration
      AbortIncompleteMultipartUpload?:
        type: AbortIncompleteMultipartUpload
  S3KeyFilter:
    type: object
    properties:
      FilterRule?:
        type: FilterRuleList
    description: Container for object key name prefix and suffix filtering rules.
  Tag:
    type: object
    properties:
      Key:
        type: ObjectKey
        description: Name of the tag.
      Value:
        type: Value
        description: Value of the tag.
  Tagging:
    type: object
    properties:
      TagSet:
        type: TagSet
  TargetGrant:
    type: object
    properties:
      Grantee?:
        type: Grantee
      Permission?:
        type: BucketLogsPermission
        description: Logging permissions assigned to the Grantee for the bucket.
  TopicConfiguration:
    type: object
    properties:
      Id?:
        type: NotificationId
      Topic:
        type: TopicArn
        description: Amazon SNS topic ARN to which Amazon S3 will publish a message when it detects events of specified type.
      Event:
        type: EventList
      Filter?:
        type: NotificationConfigurationFilter
    description: Container for specifying the configuration when you want Amazon S3 to publish events to an Amazon Simple Notification Service (Amazon SNS) topic.
  TopicConfigurationDeprecated:
    type: object
    properties:
      Id?:
        type: NotificationId
      Event?:
        type: Event
        description: Bucket event for which to send notifications.
      Topic?:
        type: TopicArn
        description: Amazon SNS topic to which Amazon S3 will publish a message to report the specified events for the bucket.
  Transition:
    type: object
    properties:
      Date?:
        type: Date
        description: Indicates at what date the object is to be moved or deleted. Should be in GMT ISO 8601 Format.
      Days?:
        type: Days
        description: Indicates the lifetime, in days, of the objects that are subject to the rule. The value must be a non-zero positive integer.
      StorageClass?:
        type: TransitionStorageClass
        description: The class of storage used to store the object.
  VersioningConfiguration:
    type: object
    properties:
      MfaDelete?:
        type: MFADelete
        description: Specifies whether MFA delete is enabled in the bucket versioning configuration. This element is only returned if the bucket has been configured with MFA delete. If the bucket has never been so configured, this element is not returned.
      Status?:
        type: BucketVersioningStatus
        description: The versioning state of the bucket.
  WebsiteConfiguration:
    type: object
    properties:
      ErrorDocument?:
        type: ErrorDocument
      IndexDocument?:
        type: IndexDocument
      RedirectAllRequestsTo?:
        type: RedirectAllRequestsTo
      RoutingRules?:
        type: RoutingRules
/{Bucket}:
  uriParameters:
    Bucket:
      type: BucketName
  displayName: Head Bucket
  /{Key}{CopyObject}:
    uriParameters:
      CopyObject?:
        type: string
        enum:
        - ''
        (extras.syntetic): true
        description: This url parameter exists only to differentiate different operations on the same url
      Key:
        type: ObjectKey
    displayName: Copy Object
    put:
      description: Creates a copy of an object that is already stored in Amazon S3.
      displayName: Copy Object
      queryParameters:
        Action:
          type: string
          enum:
          - CopyObject
      headers:
        x-amz-acl?:
          type: ObjectCannedACL
          description: The canned ACL to apply to the object.
        Cache-Control?:
          type: CacheControl
          description: Specifies caching behavior along the request/reply chain.
        Content-Disposition?:
          type: ContentDisposition
          description: Specifies presentational information for the object.
        Content-Encoding?:
          type: ContentEncoding
          description: Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
        Content-Language?:
          type: ContentLanguage
          description: The language the content is in.
        Content-Type?:
          type: ContentType
          description: A standard MIME type describing the format of the object data.
        x-amz-copy-source:
          type: CopySource
          description: The name of the source bucket and key name of the source object, separated by a slash (/). Must be URL-encoded.
        x-amz-copy-source-if-match?:
          type: CopySourceIfMatch
          description: Copies the object if its entity tag (ETag) matches the specified tag.
        x-amz-copy-source-if-modified-since?:
          type: CopySourceIfModifiedSince
          description: Copies the object if it has been modified since the specified time.
        x-amz-copy-source-if-none-match?:
          type: CopySourceIfNoneMatch
          description: Copies the object if its entity tag (ETag) is different than the specified ETag.
        x-amz-copy-source-if-unmodified-since?:
          type: CopySourceIfUnmodifiedSince
          description: Copies the object if it hasn't been modified since the specified time.
        Expires?:
          type: Expires
          description: The date and time at which the object is no longer cacheable.
        x-amz-grant-full-control?:
          type: GrantFullControl
          description: Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.
        x-amz-grant-read?:
          type: GrantRead
          description: Allows grantee to read the object data and its metadata.
        x-amz-grant-read-acp?:
          type: GrantReadACP
          description: Allows grantee to read the object ACL.
        x-amz-grant-write-acp?:
          type: GrantWriteACP
          description: Allows grantee to write the ACL for the applicable object.
        x-amz-meta-?:
          type: Metadata
          description: A map of metadata to store with the object in S3.
        x-amz-metadata-directive?:
          type: MetadataDirective
          description: Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request.
        x-amz-server-side-encryption?:
          type: ServerSideEncryption
          description: The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        x-amz-storage-class?:
          type: StorageClass
          description: The type of storage to use for the object. Defaults to 'STANDARD'.
        x-amz-website-redirect-location?:
          type: WebsiteRedirectLocation
          description: If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.
        x-amz-server-side-encryption-customer-algorithm?:
          type: SSECustomerAlgorithm
          description: Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        x-amz-server-side-encryption-customer-key?:
          type: SSECustomerKey
          description: Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header.
        x-amz-server-side-encryption-customer-key-MD5?:
          type: SSECustomerKeyMD5
          description: Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        x-amz-server-side-encryption-aws-kms-key-id?:
          type: SSEKMSKeyId
          description: Specifies the AWS KMS key ID to use for object encryption. All GET and PUT requests for an object protected by AWS KMS will fail if not made via SSL or using SigV4. Documentation on configuring any of the officially supported AWS SDKs and CLI can be found at http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version
        x-amz-copy-source-server-side-encryption-customer-algorithm?:
          type: CopySourceSSECustomerAlgorithm
          description: Specifies the algorithm to use when decrypting the source object (e.g., AES256).
        x-amz-copy-source-server-side-encryption-customer-key?:
          type: CopySourceSSECustomerKey
          description: Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source object. The encryption key provided in this header must be one that was used when the source object was created.
        x-amz-copy-source-server-side-encryption-customer-key-MD5?:
          type: CopySourceSSECustomerKeyMD5
          description: Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        x-amz-request-payer?:
          type: RequestPayer
      responses:
        200:
          headers:
            x-amz-expiration?:
              type: Expiration
              description: If the object expiration is configured, the response includes this header.
            x-amz-copy-source-version-id?:
              type: CopySourceVersionId
            x-amz-version-id?:
              type: ObjectVersionId
              description: Version ID of the newly created copy.
            x-amz-server-side-encryption?:
              type: ServerSideEncryption
              description: The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
            x-amz-server-side-encryption-customer-algorithm?:
              type: SSECustomerAlgorithm
              description: If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
            x-amz-server-side-encryption-customer-key-MD5?:
              type: SSECustomerKeyMD5
              description: If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
            x-amz-server-side-encryption-aws-kms-key-id?:
              type: SSEKMSKeyId
              description: If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
            x-amz-request-charged?:
              type: RequestCharged
          body:
            application/xml: null
        400:
          description: ObjectNotInActiveTierError
  /{Key}{PutObject}:
    uriParameters:
      PutObject?:
        type: string
        enum:
        - ''
        (extras.syntetic): true
        description: This url parameter exists only to differentiate different operations on the same url
      Key:
        type: ObjectKey
        description: Object key for which the PUT operation was initiated.
    displayName: Put Object
    put:
      description: Adds an object to a bucket.
      displayName: Put Object
      queryParameters:
        Action:
          type: string
          enum:
          - PutObject
      headers:
        x-amz-acl?:
          type: ObjectCannedACL
          description: The canned ACL to apply to the object.
        Cache-Control?:
          type: CacheControl
          description: Specifies caching behavior along the request/reply chain.
        Content-Disposition?:
          type: ContentDisposition
          description: Specifies presentational information for the object.
        Content-Encoding?:
          type: ContentEncoding
          description: Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
        Content-Language?:
          type: ContentLanguage
          description: The language the content is in.
        Content-Length?:
          type: ContentLength
          description: Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically.
        Content-MD5?:
          type: ContentMD5
          description: The base64-encoded 128-bit MD5 digest of the part data.
        Content-Type?:
          type: ContentType
          description: A standard MIME type describing the format of the object data.
        Expires?:
          type: Expires
          description: The date and time at which the object is no longer cacheable.
        x-amz-grant-full-control?:
          type: GrantFullControl
          description: Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.
        x-amz-grant-read?:
          type: GrantRead
          description: Allows grantee to read the object data and its metadata.
        x-amz-grant-read-acp?:
          type: GrantReadACP
          description: Allows grantee to read the object ACL.
        x-amz-grant-write-acp?:
          type: GrantWriteACP
          description: Allows grantee to write the ACL for the applicable object.
        x-amz-meta-?:
          type: Metadata
          description: A map of metadata to store with the object in S3.
        x-amz-server-side-encryption?:
          type: ServerSideEncryption
          description: The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        x-amz-storage-class?:
          type: StorageClass
          description: The type of storage to use for the object. Defaults to 'STANDARD'.
        x-amz-website-redirect-location?:
          type: WebsiteRedirectLocation
          description: If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.
        x-amz-server-side-encryption-customer-algorithm?:
          type: SSECustomerAlgorithm
          description: Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        x-amz-server-side-encryption-customer-key?:
          type: SSECustomerKey
          description: Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header.
        x-amz-server-side-encryption-customer-key-MD5?:
          type: SSECustomerKeyMD5
          description: Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        x-amz-server-side-encryption-aws-kms-key-id?:
          type: SSEKMSKeyId
          description: Specifies the AWS KMS key ID to use for object encryption. All GET and PUT requests for an object protected by AWS KMS will fail if not made via SSL or using SigV4. Documentation on configuring any of the officially supported AWS SDKs and CLI can be found at http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version
        x-amz-request-payer?:
          type: RequestPayer
      body:
        application/xml:
          type: Body
          description: Object data.
      responses:
        200:
          headers:
            x-amz-expiration?:
              type: Expiration
              description: If the object expiration is configured, this will contain the expiration date (expiry-date) and rule ID (rule-id). The value of rule-id is URL encoded.
            ETag?:
              type: ETag
              description: Entity tag for the uploaded object.
            x-amz-server-side-encryption?:
              type: ServerSideEncryption
              description: The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
            x-amz-version-id?:
              type: ObjectVersionId
              description: Version of the object.
            x-amz-server-side-encryption-customer-algorithm?:
              type: SSECustomerAlgorithm
              description: If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
            x-amz-server-side-encryption-customer-key-MD5?:
              type: SSECustomerKeyMD5
              description: If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
            x-amz-server-side-encryption-aws-kms-key-id?:
              type: SSEKMSKeyId
              description: If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
            x-amz-request-charged?:
              type: RequestCharged
          body:
            application/xml: null
  /{Key}{UploadPart}:
    uriParameters:
      UploadPart?:
        type: string
        enum:
        - ''
        (extras.syntetic): true
        description: This url parameter exists only to differentiate different operations on the same url
      Key:
        type: ObjectKey
        description: Object key for which the multipart upload was initiated.
    displayName: Upload Part
    put:
      description: Uploads a part in a multipart upload.<b>Note:</b> After you initiate multipart upload and upload one or more parts, you must either complete or abort multipart upload in order to stop getting charged for storage of the uploaded parts. Only after you either complete or abort multipart upload, Amazon S3 frees up the parts storage and stops charging you for the parts storage.
      displayName: Upload Part
      queryParameters:
        Action:
          type: string
          enum:
          - UploadPart
        partNumber:
          type: PartNumber
          description: Part number of part being uploaded. This is a positive integer between 1 and 10,000.
        uploadId:
          type: MultipartUploadId
          description: Upload ID identifying the multipart upload whose part is being uploaded.
      headers:
        Content-Length?:
          type: ContentLength
          description: Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically.
        Content-MD5?:
          type: ContentMD5
          description: The base64-encoded 128-bit MD5 digest of the part data.
        x-amz-server-side-encryption-customer-algorithm?:
          type: SSECustomerAlgorithm
          description: Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        x-amz-server-side-encryption-customer-key?:
          type: SSECustomerKey
          description: Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header. This must be the same encryption key specified in the initiate multipart upload request.
        x-amz-server-side-encryption-customer-key-MD5?:
          type: SSECustomerKeyMD5
          description: Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        x-amz-request-payer?:
          type: RequestPayer
      body:
        application/xml:
          type: Body
          description: Object data.
      responses:
        200:
          headers:
            x-amz-server-side-encryption?:
              type: ServerSideEncryption
              description: The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
            ETag?:
              type: ETag
              description: Entity tag for the uploaded object.
            x-amz-server-side-encryption-customer-algorithm?:
              type: SSECustomerAlgorithm
              description: If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
            x-amz-server-side-encryption-customer-key-MD5?:
              type: SSECustomerKeyMD5
              description: If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
            x-amz-server-side-encryption-aws-kms-key-id?:
              type: SSEKMSKeyId
              description: If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
            x-amz-request-charged?:
              type: RequestCharged
          body:
            application/xml: null
  /{Key}{UploadPartCopy}:
    uriParameters:
      UploadPartCopy?:
        type: string
        enum:
        - ''
        (extras.syntetic): true
        description: This url parameter exists only to differentiate different operations on the same url
      Key:
        type: ObjectKey
    displayName: Upload Part Copy
    put:
      description: Uploads a part by copying data from an existing object as data source.
      displayName: Upload Part Copy
      queryParameters:
        Action:
          type: string
          enum:
          - UploadPartCopy
        partNumber:
          type: PartNumber
          description: Part number of part being copied. This is a positive integer between 1 and 10,000.
        uploadId:
          type: MultipartUploadId
          description: Upload ID identifying the multipart upload whose part is being copied.
      headers:
        x-amz-copy-source:
          type: CopySource
          description: The name of the source bucket and key name of the source object, separated by a slash (/). Must be URL-encoded.
        x-amz-copy-source-if-match?:
          type: CopySourceIfMatch
          description: Copies the object if its entity tag (ETag) matches the specified tag.
        x-amz-copy-source-if-modified-since?:
          type: CopySourceIfModifiedSince
          description: Copies the object if it has been modified since the specified time.
        x-amz-copy-source-if-none-match?:
          type: CopySourceIfNoneMatch
          description: Copies the object if its entity tag (ETag) is different than the specified ETag.
        x-amz-copy-source-if-unmodified-since?:
          type: CopySourceIfUnmodifiedSince
          description: Copies the object if it hasn't been modified since the specified time.
        x-amz-copy-source-range?:
          type: CopySourceRange
          description: The range of bytes to copy from the source object. The range value must use the form bytes=first-last, where the first and last are the zero-based byte offsets to copy. For example, bytes=0-9 indicates that you want to copy the first ten bytes of the source. You can copy a range only if the source object is greater than 5 GB.
        x-amz-server-side-encryption-customer-algorithm?:
          type: SSECustomerAlgorithm
          description: Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        x-amz-server-side-encryption-customer-key?:
          type: SSECustomerKey
          description: Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header. This must be the same encryption key specified in the initiate multipart upload request.
        x-amz-server-side-encryption-customer-key-MD5?:
          type: SSECustomerKeyMD5
          description: Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        x-amz-copy-source-server-side-encryption-customer-algorithm?:
          type: CopySourceSSECustomerAlgorithm
          description: Specifies the algorithm to use when decrypting the source object (e.g., AES256).
        x-amz-copy-source-server-side-encryption-customer-key?:
          type: CopySourceSSECustomerKey
          description: Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source object. The encryption key provided in this header must be one that was used when the source object was created.
        x-amz-copy-source-server-side-encryption-customer-key-MD5?:
          type: CopySourceSSECustomerKeyMD5
          description: Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        x-amz-request-payer?:
          type: RequestPayer
      responses:
        200:
          headers:
            x-amz-copy-source-version-id?:
              type: CopySourceVersionId
              description: The version of the source object that was copied, if you have enabled versioning on the source bucket.
            x-amz-server-side-encryption?:
              type: ServerSideEncryption
              description: The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
            x-amz-server-side-encryption-customer-algorithm?:
              type: SSECustomerAlgorithm
              description: If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
            x-amz-server-side-encryption-customer-key-MD5?:
              type: SSECustomerKeyMD5
              description: If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
            x-amz-server-side-encryption-aws-kms-key-id?:
              type: SSEKMSKeyId
              description: If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
            x-amz-request-charged?:
              type: RequestCharged
          body:
            application/xml: null
  /{Key}?acl:
    uriParameters:
      Key:
        type: ObjectKey
    displayName: Get Object Acl
    put:
      description: uses the acl subresource to set the access control list (ACL) permissions for an object that already exists in a bucket
      displayName: Put Object Acl
      queryParameters:
        Action:
          type: string
          enum:
          - PutObjectAcl
        versionId?:
          type: ObjectVersionId
          description: VersionId used to reference a specific version of the object.
      headers:
        x-amz-acl?:
          type: ObjectCannedACL
          description: The canned ACL to apply to the object.
        Content-MD5?:
          type: ContentMD5
        x-amz-grant-full-control?:
          type: GrantFullControl
          description: Allows grantee the read, write, read ACP, and write ACP permissions on the bucket.
        x-amz-grant-read?:
          type: GrantRead
          description: Allows grantee to list the objects in the bucket.
        x-amz-grant-read-acp?:
          type: GrantReadACP
          description: Allows grantee to read the bucket ACL.
        x-amz-grant-write?:
          type: GrantWrite
          description: Allows grantee to create, overwrite, and delete any object in the bucket.
        x-amz-grant-write-acp?:
          type: GrantWriteACP
          description: Allows grantee to write the ACL for the applicable bucket.
        x-amz-request-payer?:
          type: RequestPayer
      body:
        application/xml:
          type: AccessControlPolicy
          xml:
            namespace: http://s3.amazonaws.com/doc/2006-03-01/
      responses:
        200:
          headers:
            x-amz-request-charged?:
              type: RequestCharged
          body:
            application/xml: null
        400:
          description: NoSuchKey
    get:
      description: Returns the access control list (ACL) of an object.
      displayName: Get Object Acl
      queryParameters:
        Action:
          type: string
          enum:
          - GetObjectAcl
        versionId?:
          type: ObjectVersionId
          description: VersionId used to reference a specific version of the object.
      headers:
        x-amz-request-payer?:
          type: RequestPayer
      responses:
        200:
          headers:
            x-amz-request-charged?:
              type: RequestCharged
          body:
            application/xml:
              type: object
              properties:
                Owner:
                  type: Owner
                AccessControlList:
                  type: Grants
                  description: A list of grants.
        400:
          description: NoSuchKey
  /{Key}:
    uriParameters:
      Key:
        type: ObjectKey
    displayName: Complete Multipart Upload
    head:
      description: The HEAD operation retrieves metadata from an object without returning the object itself. This operation is useful if you're only interested in an object's metadata. To use HEAD, you must have READ access to the object.
      displayName: Head Object
      queryParameters:
        Action:
          type: string
          enum:
          - HeadObject
        versionId?:
          type: ObjectVersionId
          description: VersionId used to reference a specific version of the object.
        partNumber?:
          type: PartNumber
          description: Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' HEAD request for the part specified. Useful querying about the size of the part and the number of parts in this object.
      headers:
        If-Match?:
          type: IfMatch
          description: Return the object only if its entity tag (ETag) is the same as the one specified, otherwise return a 412 (precondition failed).
        If-Modified-Since?:
          type: IfModifiedSince
          description: Return the object only if it has been modified since the specified time, otherwise return a 304 (not modified).
        If-None-Match?:
          type: IfNoneMatch
          description: Return the object only if its entity tag (ETag) is different from the one specified, otherwise return a 304 (not modified).
        If-Unmodified-Since?:
          type: IfUnmodifiedSince
          description: Return the object only if it has not been modified since the specified time, otherwise return a 412 (precondition failed).
        Range?:
          type: Range
          description: Downloads the specified range bytes of an object. For more information about the HTTP Range header, go to http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.
        x-amz-server-side-encryption-customer-algorithm?:
          type: SSECustomerAlgorithm
          description: Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        x-amz-server-side-encryption-customer-key?:
          type: SSECustomerKey
          description: Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header.
        x-amz-server-side-encryption-customer-key-MD5?:
          type: SSECustomerKeyMD5
          description: Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        x-amz-request-payer?:
          type: RequestPayer
      responses:
        200:
          headers:
            x-amz-delete-marker?:
              type: DeleteMarker
              description: Specifies whether the object retrieved was (true) or was not (false) a Delete Marker. If false, this response header does not appear in the response.
            accept-ranges?:
              type: AcceptRanges
            x-amz-expiration?:
              type: Expiration
              description: If the object expiration is configured (see PUT Bucket lifecycle), the response includes this header. It includes the expiry-date and rule-id key value pairs providing object expiration information. The value of the rule-id is URL encoded.
            x-amz-restore?:
              type: Restore
              description: Provides information about object restoration operation and expiration time of the restored object copy.
            Last-Modified?:
              type: LastModified
              description: Last modified date of the object
            Content-Length?:
              type: ContentLength
              description: Size of the body in bytes.
            ETag?:
              type: ETag
              description: An ETag is an opaque identifier assigned by a web server to a specific version of a resource found at a URL
            x-amz-missing-meta?:
              type: MissingMeta
              description: This is set to the number of metadata entries not returned in x-amz-meta headers. This can happen if you create metadata using an API like SOAP that supports more flexible metadata than the REST API. For example, using SOAP, you can create metadata whose values are not legal HTTP headers.
            x-amz-version-id?:
              type: ObjectVersionId
              description: Version of the object.
            Cache-Control?:
              type: CacheControl
              description: Specifies caching behavior along the request/reply chain.
            Content-Disposition?:
              type: ContentDisposition
              description: Specifies presentational information for the object.
            Content-Encoding?:
              type: ContentEncoding
              description: Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
            Content-Language?:
              type: ContentLanguage
              description: The language the content is in.
            Content-Type?:
              type: ContentType
              description: A standard MIME type describing the format of the object data.
            Expires?:
              type: Expires
              description: The date and time at which the object is no longer cacheable.
            x-amz-website-redirect-location?:
              type: WebsiteRedirectLocation
              description: If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.
            x-amz-server-side-encryption?:
              type: ServerSideEncryption
              description: The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
            x-amz-meta-?:
              type: Metadata
              description: A map of metadata to store with the object in S3.
            x-amz-server-side-encryption-customer-algorithm?:
              type: SSECustomerAlgorithm
              description: If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
            x-amz-server-side-encryption-customer-key-MD5?:
              type: SSECustomerKeyMD5
              description: If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
            x-amz-server-side-encryption-aws-kms-key-id?:
              type: SSEKMSKeyId
              description: If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
            x-amz-storage-class?:
              type: StorageClass
            x-amz-request-charged?:
              type: RequestCharged
            x-amz-replication-status?:
              type: ReplicationStatus
            x-amz-mp-parts-count?:
              type: PartsCount
              description: The count of parts this object has.
          body:
            application/xml: null
        400:
          description: NoSuchKey
    post:
      description: Completes a multipart upload by assembling previously uploaded parts.
      displayName: Complete Multipart Upload
      queryParameters:
        Action:
          type: string
          enum:
          - CompleteMultipartUpload
        uploadId:
          type: MultipartUploadId
      headers:
        x-amz-request-payer?:
          type: RequestPayer
      body:
        application/xml:
          type: CompletedMultipartUpload
          xml:
            namespace: http://s3.amazonaws.com/doc/2006-03-01/
      responses:
        200:
          headers:
            x-amz-expiration?:
              type: Expiration
              description: If the object expiration is configured, this will contain the expiration date (expiry-date) and rule ID (rule-id). The value of rule-id is URL encoded.
            x-amz-server-side-encryption?:
              type: ServerSideEncryption
              description: The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
            x-amz-version-id?:
              type: ObjectVersionId
              description: Version of the object.
            x-amz-server-side-encryption-aws-kms-key-id?:
              type: SSEKMSKeyId
              description: If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
            x-amz-request-charged?:
              type: RequestCharged
          body:
            application/xml:
              type: object
              properties:
                Location:
                  type: Location
                Bucket:
                  type: BucketName
                Key:
                  type: ObjectKey
                ETag:
                  type: ETag
                  description: Entity tag of the object.
  /{Key}{AbortMultipartUpload}:
    uriParameters:
      AbortMultipartUpload?:
        type: string
        enum:
        - ''
        (extras.syntetic): true
        description: This url parameter exists only to differentiate different operations on the same url
      Key:
        type: ObjectKey
    displayName: Abort Multipart Upload
    delete:
      description: Aborts a multipart upload.To verify that all parts have been removed, so you don't get charged for the part storage, you should call the List Parts operation and ensure the parts list is empty.
      displayName: Abort Multipart Upload
      queryParameters:
        Action:
          type: string
          enum:
          - AbortMultipartUpload
        uploadId:
          type: MultipartUploadId
      headers:
        x-amz-request-payer?:
          type: RequestPayer
      responses:
        200:
          headers:
            x-amz-request-charged?:
              type: RequestCharged
          body:
            application/xml: null
        400:
          description: NoSuchUpload
  /{Key}{DeleteObject}:
    uriParameters:
      DeleteObject?:
        type: string
        enum:
        - ''
        (extras.syntetic): true
        description: This url parameter exists only to differentiate different operations on the same url
      Key:
        type: ObjectKey
    displayName: Delete Object
    delete:
      description: Removes the null version (if there is one) of an object and inserts a delete marker, which becomes the latest version of the object. If there isn't a null version, Amazon S3 does not remove any objects.
      displayName: Delete Object
      queryParameters:
        Action:
          type: string
          enum:
          - DeleteObject
        versionId?:
          type: ObjectVersionId
          description: VersionId used to reference a specific version of the object.
      headers:
        x-amz-mfa?:
          type: MFA
          description: The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device.
        x-amz-request-payer?:
          type: RequestPayer
      responses:
        200:
          headers:
            x-amz-delete-marker?:
              type: DeleteMarker
              description: Specifies whether the versioned object that was permanently deleted was (true) or was not (false) a delete marker.
            x-amz-version-id?:
              type: ObjectVersionId
              description: Returns the version ID of the delete marker created as a result of the DELETE operation.
            x-amz-request-charged?:
              type: RequestCharged
          body:
            application/xml: null
  /{Key}?torrent:
    uriParameters:
      Key:
        type: ObjectKey
    displayName: Get Object Torrent
    get:
      description: Return torrent files from a bucket.
      displayName: Get Object Torrent
      queryParameters:
        Action:
          type: string
          enum:
          - GetObjectTorrent
      headers:
        x-amz-request-payer?:
          type: RequestPayer
      responses:
        200:
          headers:
            x-amz-request-charged?:
              type: RequestCharged
          body:
            application/xml: null
  /{Key}?restore:
    uriParameters:
      Key:
        type: ObjectKey
    displayName: Restore Object
    post:
      description: Restores an archived copy of an object back into Amazon S3
      displayName: Restore Object
      queryParameters:
        Action:
          type: string
          enum:
          - RestoreObject
        versionId?:
          type: ObjectVersionId
      headers:
        x-amz-request-payer?:
          type: RequestPayer
      body:
        application/xml:
          type: RestoreRequest
          xml:
            namespace: http://s3.amazonaws.com/doc/2006-03-01/
      responses:
        200:
          headers:
            x-amz-request-charged?:
              type: RequestCharged
          body:
            application/xml: null
        400:
          description: ObjectAlreadyInActiveTierError
  /{Key}{GetObject}:
    uriParameters:
      GetObject?:
        type: string
        enum:
        - ''
        (extras.syntetic): true
        description: This url parameter exists only to differentiate different operations on the same url
      Key:
        type: ObjectKey
    displayName: Get Object
    get:
      description: Retrieves objects from Amazon S3.
      displayName: Get Object
      queryParameters:
        Action:
          type: string
          enum:
          - GetObject
        response-cache-control?:
          type: ResponseCacheControl
          description: Sets the Cache-Control header of the response.
        response-content-disposition?:
          type: ResponseContentDisposition
          description: Sets the Content-Disposition header of the response
        response-content-encoding?:
          type: ResponseContentEncoding
          description: Sets the Content-Encoding header of the response.
        response-content-language?:
          type: ResponseContentLanguage
          description: Sets the Content-Language header of the response.
        response-content-type?:
          type: ResponseContentType
          description: Sets the Content-Type header of the response.
        response-expires?:
          type: ResponseExpires
          description: Sets the Expires header of the response.
        versionId?:
          type: ObjectVersionId
          description: VersionId used to reference a specific version of the object.
        partNumber?:
          type: PartNumber
          description: Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' GET request for the part specified. Useful for downloading just a part of an object.
      headers:
        If-Match?:
          type: IfMatch
          description: Return the object only if its entity tag (ETag) is the same as the one specified, otherwise return a 412 (precondition failed).
        If-Modified-Since?:
          type: IfModifiedSince
          description: Return the object only if it has been modified since the specified time, otherwise return a 304 (not modified).
        If-None-Match?:
          type: IfNoneMatch
          description: Return the object only if its entity tag (ETag) is different from the one specified, otherwise return a 304 (not modified).
        If-Unmodified-Since?:
          type: IfUnmodifiedSince
          description: Return the object only if it has not been modified since the specified time, otherwise return a 412 (precondition failed).
        Range?:
          type: Range
          description: Downloads the specified range bytes of an object. For more information about the HTTP Range header, go to http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.
        x-amz-server-side-encryption-customer-algorithm?:
          type: SSECustomerAlgorithm
          description: Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        x-amz-server-side-encryption-customer-key?:
          type: SSECustomerKey
          description: Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header.
        x-amz-server-side-encryption-customer-key-MD5?:
          type: SSECustomerKeyMD5
          description: Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        x-amz-request-payer?:
          type: RequestPayer
      responses:
        200:
          headers:
            x-amz-delete-marker?:
              type: DeleteMarker
              description: Specifies whether the object retrieved was (true) or was not (false) a Delete Marker. If false, this response header does not appear in the response.
            accept-ranges?:
              type: AcceptRanges
            x-amz-expiration?:
              type: Expiration
              description: If the object expiration is configured (see PUT Bucket lifecycle), the response includes this header. It includes the expiry-date and rule-id key value pairs providing object expiration information. The value of the rule-id is URL encoded.
            x-amz-restore?:
              type: Restore
              description: Provides information about object restoration operation and expiration time of the restored object copy.
            Last-Modified?:
              type: LastModified
              description: Last modified date of the object
            Content-Length?:
              type: ContentLength
              description: Size of the body in bytes.
            ETag?:
              type: ETag
              description: An ETag is an opaque identifier assigned by a web server to a specific version of a resource found at a URL
            x-amz-missing-meta?:
              type: MissingMeta
              description: This is set to the number of metadata entries not returned in x-amz-meta headers. This can happen if you create metadata using an API like SOAP that supports more flexible metadata than the REST API. For example, using SOAP, you can create metadata whose values are not legal HTTP headers.
            x-amz-version-id?:
              type: ObjectVersionId
              description: Version of the object.
            Cache-Control?:
              type: CacheControl
              description: Specifies caching behavior along the request/reply chain.
            Content-Disposition?:
              type: ContentDisposition
              description: Specifies presentational information for the object.
            Content-Encoding?:
              type: ContentEncoding
              description: Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
            Content-Language?:
              type: ContentLanguage
              description: The language the content is in.
            Content-Range?:
              type: ContentRange
              description: The portion of the object returned in the response.
            Content-Type?:
              type: ContentType
              description: A standard MIME type describing the format of the object data.
            Expires?:
              type: Expires
              description: The date and time at which the object is no longer cacheable.
            x-amz-website-redirect-location?:
              type: WebsiteRedirectLocation
              description: If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.
            x-amz-server-side-encryption?:
              type: ServerSideEncryption
              description: The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
            x-amz-meta-?:
              type: Metadata
              description: A map of metadata to store with the object in S3.
            x-amz-server-side-encryption-customer-algorithm?:
              type: SSECustomerAlgorithm
              description: If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
            x-amz-server-side-encryption-customer-key-MD5?:
              type: SSECustomerKeyMD5
              description: If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
            x-amz-server-side-encryption-aws-kms-key-id?:
              type: SSEKMSKeyId
              description: If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
            x-amz-storage-class?:
              type: StorageClass
            x-amz-request-charged?:
              type: RequestCharged
            x-amz-replication-status?:
              type: ReplicationStatus
            x-amz-mp-parts-count?:
              type: PartsCount
              description: The count of parts this object has.
          body:
            application/xml:
              type: Body
              description: Object data.
        400:
          description: NoSuchKey
  /{Key}{ListParts}:
    uriParameters:
      ListParts?:
        type: string
        enum:
        - ''
        (extras.syntetic): true
        description: This url parameter exists only to differentiate different operations on the same url
      Key:
        type: ObjectKey
    displayName: List Parts
    get:
      description: Lists the parts that have been uploaded for a specific multipart upload.
      displayName: List Parts
      queryParameters:
        Action:
          type: string
          enum:
          - ListParts
        max-parts?:
          type: MaxParts
          description: Sets the maximum number of parts to return.
        part-number-marker?:
          type: PartNumberMarker
          description: Specifies the part after which listing should begin. Only parts with higher part numbers will be listed.
        uploadId:
          type: MultipartUploadId
          description: Upload ID identifying the multipart upload whose parts are being listed.
      headers:
        x-amz-request-payer?:
          type: RequestPayer
      responses:
        200:
          headers:
            x-amz-abort-date?:
              type: AbortDate
              description: Date when multipart upload will become eligible for abort operation by lifecycle.
            x-amz-abort-rule-id?:
              type: AbortRuleId
              description: Id of the lifecycle rule that makes a multipart upload eligible for abort operation.
            x-amz-request-charged?:
              type: RequestCharged
          body:
            application/xml:
              type: object
              properties:
                Bucket:
                  type: BucketName
                  description: Name of the bucket to which the multipart upload was initiated.
                Key:
                  type: ObjectKey
                  description: Object key for which the multipart upload was initiated.
                UploadId:
                  type: MultipartUploadId
                  description: Upload ID identifying the multipart upload whose parts are being listed.
                PartNumberMarker:
                  type: PartNumberMarker
                  description: Part number after which listing begins.
                NextPartNumberMarker:
                  type: NextPartNumberMarker
                  description: When a list is truncated, this element specifies the last part in the list, as well as the value to use for the part-number-marker request parameter in a subsequent request.
                MaxParts:
                  type: MaxParts
                  description: Maximum number of parts that were allowed in the response.
                IsTruncated:
                  type: IsTruncated
                  description: Indicates whether the returned list of parts is truncated.
                Part:
                  type: Parts
                Initiator:
                  type: Initiator
                  description: Identifies who initiated the multipart upload.
                Owner:
                  type: Owner
                StorageClass:
                  type: StorageClass
                  description: The class of storage used to store the object.
      (extras.Pagination):
        moreResults: IsTruncated
        limitKey: MaxParts
        outputToken: NextPartNumberMarker
        inputToken: PartNumberMarker
        resultKey: Parts
  /{Key}?uploads:
    uriParameters:
      Key:
        type: ObjectKey
    displayName: Create Multipart Upload
    post:
      description: Initiates a multipart upload and returns an upload ID.<b>Note:</b> After you initiate multipart upload and upload one or more parts, you must either complete or abort multipart upload in order to stop getting charged for storage of the uploaded parts. Only after you either complete or abort multipart upload, Amazon S3 frees up the parts storage and stops charging you for the parts storage.
      displayName: Create Multipart Upload
      queryParameters:
        Action:
          type: string
          enum:
          - CreateMultipartUpload
      headers:
        x-amz-acl?:
          type: ObjectCannedACL
          description: The canned ACL to apply to the object.
        Cache-Control?:
          type: CacheControl
          description: Specifies caching behavior along the request/reply chain.
        Content-Disposition?:
          type: ContentDisposition
          description: Specifies presentational information for the object.
        Content-Encoding?:
          type: ContentEncoding
          description: Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
        Content-Language?:
          type: ContentLanguage
          description: The language the content is in.
        Content-Type?:
          type: ContentType
          description: A standard MIME type describing the format of the object data.
        Expires?:
          type: Expires
          description: The date and time at which the object is no longer cacheable.
        x-amz-grant-full-control?:
          type: GrantFullControl
          description: Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.
        x-amz-grant-read?:
          type: GrantRead
          description: Allows grantee to read the object data and its metadata.
        x-amz-grant-read-acp?:
          type: GrantReadACP
          description: Allows grantee to read the object ACL.
        x-amz-grant-write-acp?:
          type: GrantWriteACP
          description: Allows grantee to write the ACL for the applicable object.
        x-amz-meta-?:
          type: Metadata
          description: A map of metadata to store with the object in S3.
        x-amz-server-side-encryption?:
          type: ServerSideEncryption
          description: The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        x-amz-storage-class?:
          type: StorageClass
          description: The type of storage to use for the object. Defaults to 'STANDARD'.
        x-amz-website-redirect-location?:
          type: WebsiteRedirectLocation
          description: If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.
        x-amz-server-side-encryption-customer-algorithm?:
          type: SSECustomerAlgorithm
          description: Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        x-amz-server-side-encryption-customer-key?:
          type: SSECustomerKey
          description: Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header.
        x-amz-server-side-encryption-customer-key-MD5?:
          type: SSECustomerKeyMD5
          description: Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        x-amz-server-side-encryption-aws-kms-key-id?:
          type: SSEKMSKeyId
          description: Specifies the AWS KMS key ID to use for object encryption. All GET and PUT requests for an object protected by AWS KMS will fail if not made via SSL or using SigV4. Documentation on configuring any of the officially supported AWS SDKs and CLI can be found at http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version
        x-amz-request-payer?:
          type: RequestPayer
      responses:
        200:
          headers:
            x-amz-abort-date?:
              type: AbortDate
              description: Date when multipart upload will become eligible for abort operation by lifecycle.
            x-amz-abort-rule-id?:
              type: AbortRuleId
              description: Id of the lifecycle rule that makes a multipart upload eligible for abort operation.
            x-amz-server-side-encryption?:
              type: ServerSideEncryption
              description: The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
            x-amz-server-side-encryption-customer-algorithm?:
              type: SSECustomerAlgorithm
              description: If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
            x-amz-server-side-encryption-customer-key-MD5?:
              type: SSECustomerKeyMD5
              description: If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
            x-amz-server-side-encryption-aws-kms-key-id?:
              type: SSEKMSKeyId
              description: If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
            x-amz-request-charged?:
              type: RequestCharged
          body:
            application/xml:
              type: object
              properties:
                Bucket:
                  type: BucketName
                  description: Name of the bucket to which the multipart upload was initiated.
                Key:
                  type: ObjectKey
                  description: Object key for which the multipart upload was initiated.
                UploadId:
                  type: MultipartUploadId
                  description: ID for the initiated multipart upload.
  get:
    description: Returns some or all (up to 1000) of the objects in a bucket. You can use the request parameters as selection criteria to return a subset of the objects in a bucket.
    displayName: List Objects
    queryParameters:
      Action:
        type: string
        enum:
        - ListObjects
      delimiter?:
        type: Delimiter
        description: A delimiter is a character you use to group keys.
      encoding-type?:
        type: EncodingType
      marker?:
        type: Marker
        description: Specifies the key to start with when listing objects in a bucket.
      max-keys?:
        type: MaxKeys
        description: Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more.
      prefix?:
        type: Prefix
        description: Limits the response to keys that begin with the specified prefix.
    headers:
      x-amz-request-payer?:
        type: RequestPayer
        description: Confirms that the requester knows that she or he will be charged for the list objects request. Bucket owners need not specify this parameter in their requests.
    responses:
      200:
        body:
          application/xml: ListObjectsOutput
      400:
        description: NoSuchBucket
    (extras.Pagination):
      moreResults: IsTruncated
      limitKey: MaxKeys
      outputToken: NextMarker || Contents[-1].Key
      inputToken: Marker
      resultKey:
      - Contents
      - CommonPrefixes
  delete:
    description: Deletes the bucket. All objects (including all object versions and Delete Markers) in the bucket must be deleted before the bucket itself can be deleted.
    displayName: Delete Bucket
    queryParameters:
      Action:
        type: string
        enum:
        - DeleteBucket
    responses:
      200:
        body:
          application/xml: null
  put:
    description: Creates a new bucket.
    displayName: Create Bucket
    queryParameters:
      Action:
        type: string
        enum:
        - CreateBucket
    headers:
      x-amz-acl?:
        type: BucketCannedACL
        description: The canned ACL to apply to the bucket.
      x-amz-grant-full-control?:
        type: GrantFullControl
        description: Allows grantee the read, write, read ACP, and write ACP permissions on the bucket.
      x-amz-grant-read?:
        type: GrantRead
        description: Allows grantee to list the objects in the bucket.
      x-amz-grant-read-acp?:
        type: GrantReadACP
        description: Allows grantee to read the bucket ACL.
      x-amz-grant-write?:
        type: GrantWrite
        description: Allows grantee to create, overwrite, and delete any object in the bucket.
      x-amz-grant-write-acp?:
        type: GrantWriteACP
        description: Allows grantee to write the ACL for the applicable bucket.
    body:
      application/xml:
        type: CreateBucketConfiguration
        xml:
          namespace: http://s3.amazonaws.com/doc/2006-03-01/
    responses:
      200:
        headers:
          Location?:
            type: Location
        body:
          application/xml: null
      400:
        description: BucketAlreadyExists | BucketAlreadyOwnedByYou
  head:
    description: This operation is useful to determine if a bucket exists and you have permission to access it.
    displayName: Head Bucket
    queryParameters:
      Action:
        type: string
        enum:
        - HeadBucket
    responses:
      200:
        body:
          application/xml: null
      400:
        description: NoSuchBucket
/{Bucket}?accelerate:
  uriParameters:
    Bucket:
      type: BucketName
      description: Name of the bucket for which the accelerate configuration is set.
  displayName: Get Bucket Accelerate Configuration
  put:
    description: Sets the accelerate configuration of an existing bucket.
    displayName: Put Bucket Accelerate Configuration
    queryParameters:
      Action:
        type: string
        enum:
        - PutBucketAccelerateConfiguration
    body:
      application/xml:
        type: AccelerateConfiguration
        xml:
          namespace: http://s3.amazonaws.com/doc/2006-03-01/
        description: Specifies the Accelerate Configuration you want to set for the bucket.
    responses:
      200:
        body:
          application/xml: null
  get:
    description: Returns the accelerate configuration of a bucket.
    displayName: Get Bucket Accelerate Configuration
    queryParameters:
      Action:
        type: string
        enum:
        - GetBucketAccelerateConfiguration
    responses:
      200:
        body:
          application/xml: GetBucketAccelerateConfigurationOutput
/{Bucket}?notification{GetBucketNotification}:
  uriParameters:
    GetBucketNotification?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
    Bucket:
      type: BucketName
      description: Name of the bucket to get the notification configuration for.
  displayName: Get Bucket Notification
  get:
    description: Deprecated, see the GetBucketNotificationConfiguration operation.
    displayName: Get Bucket Notification
    queryParameters:
      Action:
        type: string
        enum:
        - GetBucketNotification
    responses:
      200:
        body:
          application/xml: NotificationConfigurationDeprecated
/{Bucket}?notification{GetBucketNotificationConfiguration}:
  uriParameters:
    GetBucketNotificationConfiguration?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
    Bucket:
      type: BucketName
      description: Name of the bucket to get the notification configuration for.
  displayName: Get Bucket Notification Configuration
  get:
    description: Returns the notification configuration of a bucket.
    displayName: Get Bucket Notification Configuration
    queryParameters:
      Action:
        type: string
        enum:
        - GetBucketNotificationConfiguration
    responses:
      200:
        body:
          application/xml: NotificationConfiguration
/{Bucket}?lifecycle{GetBucketLifecycle}:
  uriParameters:
    GetBucketLifecycle?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
    Bucket:
      type: BucketName
  displayName: Get Bucket Lifecycle
  get:
    description: Deprecated, see the GetBucketLifecycleConfiguration operation.
    displayName: Get Bucket Lifecycle
    queryParameters:
      Action:
        type: string
        enum:
        - GetBucketLifecycle
    responses:
      200:
        body:
          application/xml: GetBucketLifecycleOutput
/{Bucket}?lifecycle{GetBucketLifecycleConfiguration}:
  uriParameters:
    GetBucketLifecycleConfiguration?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
    Bucket:
      type: BucketName
  displayName: Get Bucket Lifecycle Configuration
  get:
    description: Returns the lifecycle configuration information set on the bucket.
    displayName: Get Bucket Lifecycle Configuration
    queryParameters:
      Action:
        type: string
        enum:
        - GetBucketLifecycleConfiguration
    responses:
      200:
        body:
          application/xml: GetBucketLifecycleConfigurationOutput
/{Bucket}?lifecycle:
  uriParameters:
    Bucket:
      type: BucketName
  displayName: Delete Bucket Lifecycle
  delete:
    description: Deletes the lifecycle configuration from the bucket.
    displayName: Delete Bucket Lifecycle
    queryParameters:
      Action:
        type: string
        enum:
        - DeleteBucketLifecycle
    responses:
      200:
        body:
          application/xml: null
/{Bucket}?versions:
  uriParameters:
    Bucket:
      type: BucketName
  displayName: List Object Versions
  get:
    description: Returns metadata about all of the versions of objects in a bucket.
    displayName: List Object Versions
    queryParameters:
      Action:
        type: string
        enum:
        - ListObjectVersions
      delimiter?:
        type: Delimiter
        description: A delimiter is a character you use to group keys.
      encoding-type?:
        type: EncodingType
      key-marker?:
        type: KeyMarker
        description: Specifies the key to start with when listing objects in a bucket.
      max-keys?:
        type: MaxKeys
        description: Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more.
      prefix?:
        type: Prefix
        description: Limits the response to keys that begin with the specified prefix.
      version-id-marker?:
        type: VersionIdMarker
        description: Specifies the object version you want to start listing from.
    responses:
      200:
        body:
          application/xml: ListObjectVersionsOutput
    (extras.Pagination):
      moreResults: IsTruncated
      limitKey: MaxKeys
      outputToken:
      - NextKeyMarker
      - NextVersionIdMarker
      inputToken:
      - KeyMarker
      - VersionIdMarker
      resultKey:
      - Versions
      - DeleteMarkers
      - CommonPrefixes
/{Bucket}?policy:
  uriParameters:
    Bucket:
      type: BucketName
  displayName: Put Bucket Policy
  delete:
    description: Deletes the policy from the bucket.
    displayName: Delete Bucket Policy
    queryParameters:
      Action:
        type: string
        enum:
        - DeleteBucketPolicy
    responses:
      200:
        body:
          application/xml: null
  get:
    description: Returns the policy of a specified bucket.
    displayName: Get Bucket Policy
    queryParameters:
      Action:
        type: string
        enum:
        - GetBucketPolicy
    responses:
      200:
        body:
          application/xml:
            type: Policy
            description: The bucket policy as a JSON document.
  put:
    description: Replaces a policy on a bucket. If the bucket already has a policy, the one in this request completely replaces it.
    displayName: Put Bucket Policy
    queryParameters:
      Action:
        type: string
        enum:
        - PutBucketPolicy
    headers:
      Content-MD5?:
        type: ContentMD5
    body:
      application/xml:
        type: Policy
        description: The bucket policy as a JSON document.
    responses:
      200:
        body:
          application/xml: null
/{Bucket}?cors:
  uriParameters:
    Bucket:
      type: BucketName
  displayName: Put Bucket Cors
  get:
    description: Returns the cors configuration for the bucket.
    displayName: Get Bucket Cors
    queryParameters:
      Action:
        type: string
        enum:
        - GetBucketCors
    responses:
      200:
        body:
          application/xml: GetBucketCorsOutput
  delete:
    description: Deletes the cors configuration information set for the bucket.
    displayName: Delete Bucket Cors
    queryParameters:
      Action:
        type: string
        enum:
        - DeleteBucketCors
    responses:
      200:
        body:
          application/xml: null
  put:
    description: Sets the cors configuration for a bucket.
    displayName: Put Bucket Cors
    queryParameters:
      Action:
        type: string
        enum:
        - PutBucketCors
    headers:
      Content-MD5?:
        type: ContentMD5
    body:
      application/xml:
        type: CORSConfiguration
        xml:
          namespace: http://s3.amazonaws.com/doc/2006-03-01/
    responses:
      200:
        body:
          application/xml: null
/{Bucket}?acl:
  uriParameters:
    Bucket:
      type: BucketName
  displayName: Put Bucket Acl
  get:
    description: Gets the access control policy for the bucket.
    displayName: Get Bucket Acl
    queryParameters:
      Action:
        type: string
        enum:
        - GetBucketAcl
    responses:
      200:
        body:
          application/xml: GetBucketAclOutput
  put:
    description: Sets the permissions on a bucket using access control lists (ACL).
    displayName: Put Bucket Acl
    queryParameters:
      Action:
        type: string
        enum:
        - PutBucketAcl
    headers:
      x-amz-acl?:
        type: BucketCannedACL
        description: The canned ACL to apply to the bucket.
      Content-MD5?:
        type: ContentMD5
      x-amz-grant-full-control?:
        type: GrantFullControl
        description: Allows grantee the read, write, read ACP, and write ACP permissions on the bucket.
      x-amz-grant-read?:
        type: GrantRead
        description: Allows grantee to list the objects in the bucket.
      x-amz-grant-read-acp?:
        type: GrantReadACP
        description: Allows grantee to read the bucket ACL.
      x-amz-grant-write?:
        type: GrantWrite
        description: Allows grantee to create, overwrite, and delete any object in the bucket.
      x-amz-grant-write-acp?:
        type: GrantWriteACP
        description: Allows grantee to write the ACL for the applicable bucket.
    body:
      application/xml:
        type: AccessControlPolicy
        xml:
          namespace: http://s3.amazonaws.com/doc/2006-03-01/
    responses:
      200:
        body:
          application/xml: null
/{Bucket}?tagging:
  uriParameters:
    Bucket:
      type: BucketName
  displayName: Get Bucket Tagging
  delete:
    description: Deletes the tags from the bucket.
    displayName: Delete Bucket Tagging
    queryParameters:
      Action:
        type: string
        enum:
        - DeleteBucketTagging
    responses:
      200:
        body:
          application/xml: null
  put:
    description: Sets the tags for a bucket.
    displayName: Put Bucket Tagging
    queryParameters:
      Action:
        type: string
        enum:
        - PutBucketTagging
    headers:
      Content-MD5?:
        type: ContentMD5
    body:
      application/xml:
        type: Tagging
        xml:
          namespace: http://s3.amazonaws.com/doc/2006-03-01/
    responses:
      200:
        body:
          application/xml: null
  get:
    description: Returns the tag set associated with the bucket.
    displayName: Get Bucket Tagging
    queryParameters:
      Action:
        type: string
        enum:
        - GetBucketTagging
    responses:
      200:
        body:
          application/xml: GetBucketTaggingOutput
/{Bucket}?uploads:
  uriParameters:
    Bucket:
      type: BucketName
  displayName: List Multipart Uploads
  get:
    description: This operation lists in-progress multipart uploads.
    displayName: List Multipart Uploads
    queryParameters:
      Action:
        type: string
        enum:
        - ListMultipartUploads
      delimiter?:
        type: Delimiter
        description: Character you use to group keys.
      encoding-type?:
        type: EncodingType
      key-marker?:
        type: KeyMarker
        description: Together with upload-id-marker, this parameter specifies the multipart upload after which listing should begin.
      max-uploads?:
        type: MaxUploads
        description: Sets the maximum number of multipart uploads, from 1 to 1,000, to return in the response body. 1,000 is the maximum number of uploads that can be returned in a response.
      prefix?:
        type: Prefix
        description: Lists in-progress uploads only for those keys that begin with the specified prefix.
      upload-id-marker?:
        type: UploadIdMarker
        description: Together with key-marker, specifies the multipart upload after which listing should begin. If key-marker is not specified, the upload-id-marker parameter is ignored.
    responses:
      200:
        body:
          application/xml: ListMultipartUploadsOutput
    (extras.Pagination):
      limitKey: MaxUploads
      moreResults: IsTruncated
      outputToken:
      - NextKeyMarker
      - NextUploadIdMarker
      inputToken:
      - KeyMarker
      - UploadIdMarker
      resultKey:
      - Uploads
      - CommonPrefixes
/{Bucket}?location:
  uriParameters:
    Bucket:
      type: BucketName
  displayName: Get Bucket Location
  get:
    description: Returns the region the bucket resides in.
    displayName: Get Bucket Location
    queryParameters:
      Action:
        type: string
        enum:
        - GetBucketLocation
    responses:
      200:
        body:
          application/xml: GetBucketLocationOutput
/{Bucket}?versioning:
  uriParameters:
    Bucket:
      type: BucketName
  displayName: Get Bucket Versioning
  put:
    description: Sets the versioning state of an existing bucket. To set the versioning state, you must be the bucket owner.
    displayName: Put Bucket Versioning
    queryParameters:
      Action:
        type: string
        enum:
        - PutBucketVersioning
    headers:
      Content-MD5?:
        type: ContentMD5
      x-amz-mfa?:
        type: MFA
        description: The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device.
    body:
      application/xml:
        type: VersioningConfiguration
        xml:
          namespace: http://s3.amazonaws.com/doc/2006-03-01/
    responses:
      200:
        body:
          application/xml: null
  get:
    description: Returns the versioning state of a bucket.
    displayName: Get Bucket Versioning
    queryParameters:
      Action:
        type: string
        enum:
        - GetBucketVersioning
    responses:
      200:
        body:
          application/xml: GetBucketVersioningOutput
/{Bucket}?replication:
  uriParameters:
    Bucket:
      type: BucketName
  displayName: Put Bucket Replication
  get:
    description: Returns the replication configuration of a bucket.
    displayName: Get Bucket Replication
    queryParameters:
      Action:
        type: string
        enum:
        - GetBucketReplication
    responses:
      200:
        body:
          application/xml: null
  delete:
    description: Deletes the replication configuration from the bucket.
    displayName: Delete Bucket Replication
    queryParameters:
      Action:
        type: string
        enum:
        - DeleteBucketReplication
    responses:
      200:
        body:
          application/xml: null
  put:
    description: Creates a new replication configuration (or replaces an existing one, if present).
    displayName: Put Bucket Replication
    queryParameters:
      Action:
        type: string
        enum:
        - PutBucketReplication
    headers:
      Content-MD5?:
        type: ContentMD5
    body:
      application/xml:
        type: ReplicationConfiguration
        xml:
          namespace: http://s3.amazonaws.com/doc/2006-03-01/
    responses:
      200:
        body:
          application/xml: null
/{Bucket}?requestPayment:
  uriParameters:
    Bucket:
      type: BucketName
  displayName: Put Bucket Request Payment
  get:
    description: Returns the request payment configuration of a bucket.
    displayName: Get Bucket Request Payment
    queryParameters:
      Action:
        type: string
        enum:
        - GetBucketRequestPayment
    responses:
      200:
        body:
          application/xml: GetBucketRequestPaymentOutput
  put:
    description: Sets the request payment configuration for a bucket. By default, the bucket owner pays for downloads from the bucket. This configuration parameter enables the bucket owner (only) to specify that the person requesting the download will be charged for the download. Documentation on requester pays buckets can be found at http://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html
    displayName: Put Bucket Request Payment
    queryParameters:
      Action:
        type: string
        enum:
        - PutBucketRequestPayment
    headers:
      Content-MD5?:
        type: ContentMD5
    body:
      application/xml:
        type: RequestPaymentConfiguration
        xml:
          namespace: http://s3.amazonaws.com/doc/2006-03-01/
    responses:
      200:
        body:
          application/xml: null
/{Bucket}?website:
  uriParameters:
    Bucket:
      type: BucketName
  displayName: Get Bucket Website
  delete:
    description: This operation removes the website configuration from the bucket.
    displayName: Delete Bucket Website
    queryParameters:
      Action:
        type: string
        enum:
        - DeleteBucketWebsite
    responses:
      200:
        body:
          application/xml: null
  put:
    description: Set the website configuration for a bucket.
    displayName: Put Bucket Website
    queryParameters:
      Action:
        type: string
        enum:
        - PutBucketWebsite
    headers:
      Content-MD5?:
        type: ContentMD5
    body:
      application/xml:
        type: WebsiteConfiguration
        xml:
          namespace: http://s3.amazonaws.com/doc/2006-03-01/
    responses:
      200:
        body:
          application/xml: null
  get:
    description: Returns the website configuration for a bucket.
    displayName: Get Bucket Website
    queryParameters:
      Action:
        type: string
        enum:
        - GetBucketWebsite
    responses:
      200:
        body:
          application/xml: GetBucketWebsiteOutput
/:
  displayName: List Buckets
  get:
    description: Returns a list of all buckets owned by the authenticated sender of the request.
    displayName: List Buckets
    queryParameters:
      Action:
        type: string
        enum:
        - ListBuckets
    responses:
      200:
        body:
          application/xml: ListBucketsOutput
    (extras.Pagination):
      resultKey: Buckets
/{Bucket}?delete:
  uriParameters:
    Bucket:
      type: BucketName
  displayName: Delete Objects
  post:
    description: This operation enables you to delete multiple objects from a bucket using a single HTTP request. You may specify up to 1000 keys.
    displayName: Delete Objects
    queryParameters:
      Action:
        type: string
        enum:
        - DeleteObjects
    headers:
      x-amz-mfa?:
        type: MFA
        description: The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device.
      x-amz-request-payer?:
        type: RequestPayer
    body:
      application/xml:
        type: Delete
        xml:
          namespace: http://s3.amazonaws.com/doc/2006-03-01/
    responses:
      200:
        headers:
          x-amz-request-charged?:
            type: RequestCharged
        body:
          application/xml:
            type: object
            properties:
              Deleted:
                type: DeletedObjects
              Error:
                type: Errors
/{Bucket}?logging:
  uriParameters:
    Bucket:
      type: BucketName
  displayName: Get Bucket Logging
  put:
    description: Set the logging parameters for a bucket and to specify permissions for who can view and modify the logging parameters. To set the logging status of a bucket, you must be the bucket owner.
    displayName: Put Bucket Logging
    queryParameters:
      Action:
        type: string
        enum:
        - PutBucketLogging
    headers:
      Content-MD5?:
        type: ContentMD5
    body:
      application/xml:
        type: BucketLoggingStatus
        xml:
          namespace: http://s3.amazonaws.com/doc/2006-03-01/
    responses:
      200:
        body:
          application/xml: null
  get:
    description: Returns the logging status of a bucket and the permissions users have to view and modify that status. To use GET, you must be the bucket owner.
    displayName: Get Bucket Logging
    queryParameters:
      Action:
        type: string
        enum:
        - GetBucketLogging
    responses:
      200:
        body:
          application/xml: GetBucketLoggingOutput
/{Bucket}?lifecycle{PutBucketLifecycle}:
  uriParameters:
    PutBucketLifecycle?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
    Bucket:
      type: BucketName
  displayName: Put Bucket Lifecycle
  put:
    description: Deprecated, see the PutBucketLifecycleConfiguration operation.
    displayName: Put Bucket Lifecycle
    queryParameters:
      Action:
        type: string
        enum:
        - PutBucketLifecycle
    headers:
      Content-MD5?:
        type: ContentMD5
    body:
      application/xml:
        type: LifecycleConfiguration
        xml:
          namespace: http://s3.amazonaws.com/doc/2006-03-01/
    responses:
      200:
        body:
          application/xml: null
/{Bucket}?lifecycle{PutBucketLifecycleConfiguration}:
  uriParameters:
    PutBucketLifecycleConfiguration?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
    Bucket:
      type: BucketName
  displayName: Put Bucket Lifecycle Configuration
  put:
    description: Sets lifecycle configuration for your bucket. If a lifecycle configuration exists, it replaces it.
    displayName: Put Bucket Lifecycle Configuration
    queryParameters:
      Action:
        type: string
        enum:
        - PutBucketLifecycleConfiguration
    body:
      application/xml:
        type: BucketLifecycleConfiguration
        xml:
          namespace: http://s3.amazonaws.com/doc/2006-03-01/
    responses:
      200:
        body:
          application/xml: null
/{Bucket}?list-type=2:
  uriParameters:
    Bucket:
      type: BucketName
      description: Name of the bucket to list.
  displayName: List Objects V2
  get:
    description: 'Returns some or all (up to 1000) of the objects in a bucket. You
      can use the request parameters as selection criteria to return a subset of the
      objects in a bucket. Note: ListObjectsV2 is the revised List Objects API and
      we recommend you use this revised API for new application development.'
    displayName: List Objects V2
    queryParameters:
      Action:
        type: string
        enum:
        - ListObjectsV2
      delimiter?:
        type: Delimiter
        description: A delimiter is a character you use to group keys.
      encoding-type?:
        type: EncodingType
        description: Encoding type used by Amazon S3 to encode object keys in the response.
      max-keys?:
        type: MaxKeys
        description: Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more.
      prefix?:
        type: Prefix
        description: Limits the response to keys that begin with the specified prefix.
      continuation-token?:
        type: Token
        description: ContinuationToken indicates Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key
      fetch-owner?:
        type: FetchOwner
        description: The owner field is not present in listV2 by default, if you want to return owner field with each key in the result then set the fetch owner field to true
      start-after?:
        type: StartAfter
        description: StartAfter is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this specified key. StartAfter can be any key in the bucket
    headers:
      x-amz-request-payer?:
        type: RequestPayer
        description: Confirms that the requester knows that she or he will be charged for the list objects request in V2 style. Bucket owners need not specify this parameter in their requests.
    responses:
      200:
        body:
          application/xml: ListObjectsV2Output
      400:
        description: NoSuchBucket
    (extras.Pagination):
      limitKey: MaxKeys
      outputToken: NextContinuationToken
      inputToken: ContinuationToken
      resultKey:
      - Contents
      - CommonPrefixes
/{Bucket}?notification{PutBucketNotification}:
  uriParameters:
    PutBucketNotification?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
    Bucket:
      type: BucketName
  displayName: Put Bucket Notification
  put:
    description: Deprecated, see the PutBucketNotificationConfiguraiton operation.
    displayName: Put Bucket Notification
    queryParameters:
      Action:
        type: string
        enum:
        - PutBucketNotification
    headers:
      Content-MD5?:
        type: ContentMD5
    body:
      application/xml:
        type: NotificationConfigurationDeprecated
        xml:
          namespace: http://s3.amazonaws.com/doc/2006-03-01/
    responses:
      200:
        body:
          application/xml: null
/{Bucket}?notification{PutBucketNotificationConfiguration}:
  uriParameters:
    PutBucketNotificationConfiguration?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
    Bucket:
      type: BucketName
  displayName: Put Bucket Notification Configuration
  put:
    description: Enables notifications of specified events for a bucket.
    displayName: Put Bucket Notification Configuration
    queryParameters:
      Action:
        type: string
        enum:
        - PutBucketNotificationConfiguration
    body:
      application/xml:
        type: NotificationConfiguration
        xml:
          namespace: http://s3.amazonaws.com/doc/2006-03-01/
    responses:
      200:
        body:
          application/xml: null
