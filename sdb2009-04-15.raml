#%RAML 1.0
title: Amazon SimpleDB
version: '2009-04-15'
description: 'Amazon SimpleDB is a web service providing the core database functions
  of data indexing and querying in the cloud. By offloading the time and effort associated
  with building and operating a web-scale database, SimpleDB provides developers the
  freedom to focus on application development.   A traditional, clustered relational
  database requires a sizable upfront capital outlay, is complex to design, and often
  requires extensive and repetitive database administration. Amazon SimpleDB is dramatically
  simpler, requiring no schema, automatically indexing your data and providing a simple
  API for storage and access. This approach eliminates the administrative burden of
  data modeling, index maintenance, and performance tuning. Developers gain access
  to this functionality within Amazon''s proven computing environment, are able to
  scale instantly, and pay only for what they use.    Visit <a href="http://aws.amazon.com/simpledb/">http://aws.amazon.com/simpledb/</a>
  for more information. '
mediaType:
- application/xml
uses:
  commons: https://raw.githubusercontent.com/apiregistry/commons/master/commons.raml
  extras: https://raw.githubusercontent.com/apiregistry/typesExtras/master/typeExtras.raml
types:
  AttributeList:
    type: array
    items:
      type: Attribute
    xml:
      namespace: http://sdb.amazonaws.com/doc/2009-04-15/
  AttributeNameList:
    type: array
    items:
      type: String
    xml:
      namespace: http://sdb.amazonaws.com/doc/2009-04-15/
  Boolean:
    type: boolean
    xml:
      namespace: http://sdb.amazonaws.com/doc/2009-04-15/
  DeletableItemList:
    type: array
    items:
      type: DeletableItem
    xml:
      namespace: http://sdb.amazonaws.com/doc/2009-04-15/
  DomainNameList:
    type: array
    items:
      type: String
    xml:
      namespace: http://sdb.amazonaws.com/doc/2009-04-15/
  Integer:
    type: integer
    format: int
    xml:
      namespace: http://sdb.amazonaws.com/doc/2009-04-15/
  ItemList:
    type: array
    items:
      type: Item
    xml:
      namespace: http://sdb.amazonaws.com/doc/2009-04-15/
  Long:
    type: integer
    format: long
    xml:
      namespace: http://sdb.amazonaws.com/doc/2009-04-15/
  ReplaceableAttributeList:
    type: array
    items:
      type: ReplaceableAttribute
    xml:
      namespace: http://sdb.amazonaws.com/doc/2009-04-15/
  ReplaceableItemList:
    type: array
    items:
      type: ReplaceableItem
    xml:
      namespace: http://sdb.amazonaws.com/doc/2009-04-15/
  String:
    type: string
    xml:
      namespace: http://sdb.amazonaws.com/doc/2009-04-15/
  Attribute:
    type: object
    properties:
      Name:
        type: String
        description: The name of the attribute.
      AlternateNameEncoding?:
        type: String
        description: <p></p>
      Value:
        type: String
        description: The value of the attribute.
      AlternateValueEncoding?:
        type: String
        description: <p></p>
    xml:
      namespace: http://sdb.amazonaws.com/doc/2009-04-15/
    description: <p></p>
  BatchDeleteAttributesRequest:
    type: object
    properties:
      DomainName:
        type: String
        description: The name of the domain in which the attributes are being deleted.
      Items:
        type: DeletableItemList
        description: A list of items on which to perform the operation.
    xml:
      namespace: http://sdb.amazonaws.com/doc/2009-04-15/
  BatchPutAttributesRequest:
    type: object
    properties:
      DomainName:
        type: String
        description: The name of the domain in which the attributes are being stored.
      Items:
        type: ReplaceableItemList
        description: A list of items on which to perform the operation.
    xml:
      namespace: http://sdb.amazonaws.com/doc/2009-04-15/
  CreateDomainRequest:
    type: object
    properties:
      DomainName:
        type: String
        description: 'The name of the domain to create. The name can range between
          3 and 255 characters and can contain the following characters: a-z, A-Z,
          0-9, ''_'', ''-'', and ''.''.'
    xml:
      namespace: http://sdb.amazonaws.com/doc/2009-04-15/
  DeletableItem:
    type: object
    properties:
      ItemName:
        type: String
      Attributes?:
        type: AttributeList
    xml:
      namespace: http://sdb.amazonaws.com/doc/2009-04-15/
  DeleteAttributesRequest:
    type: object
    properties:
      DomainName:
        type: String
        description: The name of the domain in which to perform the operation.
      ItemName:
        type: String
        description: The name of the item. Similar to rows on a spreadsheet, items represent individual objects that contain one or more value-attribute pairs.
      Attributes?:
        type: AttributeList
        description: A list of Attributes. Similar to columns on a spreadsheet, attributes represent categories of data that can be assigned to items.
      Expected?:
        type: UpdateCondition
        description: The update condition which, if specified, determines whether the specified attributes will be deleted or not. The update condition must be satisfied in order for this request to be processed and the attributes to be deleted.
    xml:
      namespace: http://sdb.amazonaws.com/doc/2009-04-15/
  DeleteDomainRequest:
    type: object
    properties:
      DomainName:
        type: String
        description: The name of the domain to delete.
    xml:
      namespace: http://sdb.amazonaws.com/doc/2009-04-15/
  DomainMetadataRequest:
    type: object
    properties:
      DomainName:
        type: String
        description: The name of the domain for which to display the metadata of.
    xml:
      namespace: http://sdb.amazonaws.com/doc/2009-04-15/
  DomainMetadataResult:
    type: object
    properties:
      ItemCount?:
        type: Integer
        description: The number of all items in the domain.
      ItemNamesSizeBytes?:
        type: Long
        description: The total size of all item names in the domain, in bytes.
      AttributeNameCount?:
        type: Integer
        description: The number of unique attribute names in the domain.
      AttributeNamesSizeBytes?:
        type: Long
        description: The total size of all unique attribute names in the domain, in bytes.
      AttributeValueCount?:
        type: Integer
        description: The number of all attribute name/value pairs in the domain.
      AttributeValuesSizeBytes?:
        type: Long
        description: The total size of all attribute values in the domain, in bytes.
      Timestamp?:
        type: Integer
        description: The data and time when metadata was calculated, in Epoch (UNIX) seconds.
    xml:
      namespace: http://sdb.amazonaws.com/doc/2009-04-15/
  GetAttributesRequest:
    type: object
    properties:
      DomainName:
        type: String
        description: The name of the domain in which to perform the operation.
      ItemName:
        type: String
        description: The name of the item.
      AttributeNames?:
        type: AttributeNameList
        description: The names of the attributes.
      ConsistentRead?:
        type: Boolean
        description: Determines whether or not strong consistency should be enforced when data is read from SimpleDB. If <code>true</code>, any data previously written to SimpleDB will be returned. Otherwise, results will be consistent eventually, and the client may not see data that was written immediately before your read.
    xml:
      namespace: http://sdb.amazonaws.com/doc/2009-04-15/
  GetAttributesResult:
    type: object
    properties:
      Attributes?:
        type: AttributeList
        description: The list of attributes returned by the operation.
    xml:
      namespace: http://sdb.amazonaws.com/doc/2009-04-15/
  Item:
    type: object
    properties:
      Name:
        type: String
        description: The name of the item.
      AlternateNameEncoding?:
        type: String
        description: <p></p>
      Attributes:
        type: AttributeList
        description: A list of attributes.
    xml:
      namespace: http://sdb.amazonaws.com/doc/2009-04-15/
    description: <p></p>
  ListDomainsRequest:
    type: object
    properties:
      MaxNumberOfDomains?:
        type: Integer
        description: The maximum number of domain names you want returned. The range is 1 to 100. The default setting is 100.
      NextToken?:
        type: String
        description: A string informing Amazon SimpleDB where to start the next list of domain names.
    xml:
      namespace: http://sdb.amazonaws.com/doc/2009-04-15/
  ListDomainsResult:
    type: object
    properties:
      DomainNames?:
        type: DomainNameList
        description: A list of domain names that match the expression.
      NextToken?:
        type: String
        description: An opaque token indicating that there are more domains than the specified <code>MaxNumberOfDomains</code> still available.
    xml:
      namespace: http://sdb.amazonaws.com/doc/2009-04-15/
  PutAttributesRequest:
    type: object
    properties:
      DomainName:
        type: String
        description: The name of the domain in which to perform the operation.
      ItemName:
        type: String
        description: The name of the item.
      Attributes:
        type: ReplaceableAttributeList
        description: The list of attributes.
      Expected?:
        type: UpdateCondition
        description: The update condition which, if specified, determines whether the specified attributes will be updated or not. The update condition must be satisfied in order for this request to be processed and the attributes to be updated.
    xml:
      namespace: http://sdb.amazonaws.com/doc/2009-04-15/
  ReplaceableAttribute:
    type: object
    properties:
      Name:
        type: String
        description: The name of the replaceable attribute.
      Value:
        type: String
        description: The value of the replaceable attribute.
      Replace?:
        type: Boolean
        description: A flag specifying whether or not to replace the attribute/value pair or to add a new attribute/value pair. The default setting is <code>false</code>.
    xml:
      namespace: http://sdb.amazonaws.com/doc/2009-04-15/
    description: <p></p>
  ReplaceableItem:
    type: object
    properties:
      ItemName:
        type: String
        description: The name of the replaceable item.
      Attributes:
        type: ReplaceableAttributeList
        description: The list of attributes for a replaceable item.
    xml:
      namespace: http://sdb.amazonaws.com/doc/2009-04-15/
    description: <p></p>
  SelectRequest:
    type: object
    properties:
      SelectExpression:
        type: String
        description: The expression used to query the domain.
      NextToken?:
        type: String
        description: A string informing Amazon SimpleDB where to start the next list of <code>ItemNames</code>.
      ConsistentRead?:
        type: Boolean
        description: Determines whether or not strong consistency should be enforced when data is read from SimpleDB. If <code>true</code>, any data previously written to SimpleDB will be returned. Otherwise, results will be consistent eventually, and the client may not see data that was written immediately before your read.
    xml:
      namespace: http://sdb.amazonaws.com/doc/2009-04-15/
  SelectResult:
    type: object
    properties:
      Items?:
        type: ItemList
        description: A list of items that match the select expression.
      NextToken?:
        type: String
        description: An opaque token indicating that more items than <code>MaxNumberOfItems</code> were matched, the response size exceeded 1 megabyte, or the execution time exceeded 5 seconds.
    xml:
      namespace: http://sdb.amazonaws.com/doc/2009-04-15/
  UpdateCondition:
    type: object
    properties:
      Name?:
        type: String
        description: <p>The name of the attribute involved in the condition.</p>
      Value?:
        type: String
        description: <p>The value of an attribute. This value can only be specified when the <code>Exists</code> parameter is equal to <code>true</code>.</p>
      Exists?:
        type: Boolean
        description: <p>A value specifying whether or not the specified attribute must exist with the specified value in order for the update condition to be satisfied. Specify <code>true</code> if the attribute must exist for the update condition to be satisfied. Specify <code>false</code> if the attribute should not exist in order for the update condition to be satisfied.</p>
    xml:
      namespace: http://sdb.amazonaws.com/doc/2009-04-15/
    description: <p> Specifies the conditions under which data should be updated. If an update condition is specified for a request, the data will only be updated if the condition is satisfied. For example, if an attribute with a specific name and value exists, or if a specific attribute doesn't exist. </p>
/{BatchDeleteAttributes}:
  uriParameters:
    BatchDeleteAttributes?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  displayName: Batch Delete Attributes
  post:
    description: ' Performs multiple DeleteAttributes operations in a single call,
      which reduces round trips and latencies. This enables Amazon SimpleDB to optimize
      requests, which generally yields better throughput.   The following limitations
      are enforced for this operation: <ul> <li>1 MB request size</li> <li>25 item
      limit per BatchDeleteAttributes operation</li> </ul> '
    displayName: Batch Delete Attributes
    queryParameters:
      Action:
        type: string
        enum:
        - BatchDeleteAttributes
    body:
      application/xml: BatchDeleteAttributesRequest
    responses:
      200:
        body:
          application/xml: null
/{BatchPutAttributes}:
  uriParameters:
    BatchPutAttributes?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  displayName: Batch Put Attributes
  post:
    description: ' The <code>BatchPutAttributes</code> operation creates or replaces
      attributes within one or more items. By using this operation, the client can
      perform multiple <a>PutAttribute</a> operation with a single call. This helps
      yield savings in round trips and latencies, enabling Amazon SimpleDB to optimize
      requests and generally produce better throughput.   The client may specify the
      item name with the <code>Item.X.ItemName</code> parameter. The client may specify
      new attributes using a combination of the <code>Item.X.Attribute.Y.Name</code>
      and <code>Item.X.Attribute.Y.Value</code> parameters. The client may specify
      the first attribute for the first item using the parameters <code>Item.0.Attribute.0.Name</code>
      and <code>Item.0.Attribute.0.Value</code>, and for the second attribute for
      the first item by the parameters <code>Item.0.Attribute.1.Name</code> and <code>Item.0.Attribute.1.Value</code>,
      and so on.   Attributes are uniquely identified within an item by their name/value
      combination. For example, a single item can have the attributes <code>{ "first_name",
      "first_value" }</code> and <code>{ "first_name", "second_value" }</code>. However,
      it cannot have two attribute instances where both the <code>Item.X.Attribute.Y.Name</code>
      and <code>Item.X.Attribute.Y.Value</code> are the same.   Optionally, the requester
      can supply the <code>Replace</code> parameter for each individual value. Setting
      this value to <code>true</code> will cause the new attribute values to replace
      the existing attribute values. For example, if an item <code>I</code> has the
      attributes <code>{ ''a'', ''1'' }, { ''b'', ''2''}</code> and <code>{ ''b'',
      ''3'' }</code> and the requester does a BatchPutAttributes of <code>{''I'',
      ''b'', ''4'' }</code> with the Replace parameter set to true, the final attributes
      of the item will be <code>{ ''a'', ''1'' }</code> and <code>{ ''b'', ''4'' }</code>,
      replacing the previous values of the ''b'' attribute with the new value.  <important>
      This operation is vulnerable to exceeding the maximum URL size when making a
      REST request using the HTTP GET method. This operation does not support conditions
      using <code>Expected.X.Name</code>, <code>Expected.X.Value</code>, or <code>Expected.X.Exists</code>.
      </important>  You can execute multiple <code>BatchPutAttributes</code> operations
      and other operations in parallel. However, large numbers of concurrent <code>BatchPutAttributes</code>
      calls can result in Service Unavailable (503) responses.   The following limitations
      are enforced for this operation: <ul> <li>256 attribute name-value pairs per
      item</li> <li>1 MB request size</li> <li>1 billion attributes per domain</li>
      <li>10 GB of total user data storage per domain</li> <li>25 item limit per <code>BatchPutAttributes</code>
      operation</li> </ul> '
    displayName: Batch Put Attributes
    queryParameters:
      Action:
        type: string
        enum:
        - BatchPutAttributes
    body:
      application/xml: BatchPutAttributesRequest
    responses:
      200:
        body:
          application/xml: null
      400:
        description: DuplicateItemName
      409:
        description: NumberItemAttributesExceeded
/{CreateDomain}:
  uriParameters:
    CreateDomain?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  displayName: Create Domain
  post:
    description: ' The <code>CreateDomain</code> operation creates a new domain. The
      domain name should be unique among the domains associated with the Access Key
      ID provided in the request. The <code>CreateDomain</code> operation may take
      10 or more seconds to complete.   The client can create up to 100 domains per
      account.   If the client requires additional domains, go to <a href="http://aws.amazon.com/contact-us/simpledb-limit-request/">
      http://aws.amazon.com/contact-us/simpledb-limit-request/</a>. '
    displayName: Create Domain
    queryParameters:
      Action:
        type: string
        enum:
        - CreateDomain
    body:
      application/xml: CreateDomainRequest
    responses:
      200:
        body:
          application/xml: null
      400:
        description: InvalidParameterValue
      409:
        description: NumberDomainsExceeded
/{DeleteAttributes}:
  uriParameters:
    DeleteAttributes?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  displayName: Delete Attributes
  post:
    description: ' Deletes one or more attributes associated with an item. If all
      attributes of the item are deleted, the item is deleted.   <code>DeleteAttributes</code>
      is an idempotent operation; running it multiple times on the same item or attribute
      does not result in an error response.   Because Amazon SimpleDB makes multiple
      copies of item data and uses an eventual consistency update model, performing
      a <a>GetAttributes</a> or <a>Select</a> operation (read) immediately after a
      <code>DeleteAttributes</code> or <a>PutAttributes</a> operation (write) might
      not return updated item data. '
    displayName: Delete Attributes
    queryParameters:
      Action:
        type: string
        enum:
        - DeleteAttributes
    body:
      application/xml: DeleteAttributesRequest
    responses:
      200:
        body:
          application/xml: null
      400:
        description: InvalidParameterValue
      404:
        description: AttributeDoesNotExist
/{DeleteDomain}:
  uriParameters:
    DeleteDomain?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  displayName: Delete Domain
  post:
    description: ' The <code>DeleteDomain</code> operation deletes a domain. Any items
      (and their attributes) in the domain are deleted as well. The <code>DeleteDomain</code>
      operation might take 10 or more seconds to complete. '
    displayName: Delete Domain
    queryParameters:
      Action:
        type: string
        enum:
        - DeleteDomain
    body:
      application/xml: DeleteDomainRequest
    responses:
      200:
        body:
          application/xml: null
      400:
        description: MissingParameter
/{DomainMetadata}:
  uriParameters:
    DomainMetadata?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  displayName: Domain Metadata
  post:
    description: ' Returns information about the domain, including when the domain
      was created, the number of items and attributes in the domain, and the size
      of the attribute names and values. '
    displayName: Domain Metadata
    queryParameters:
      Action:
        type: string
        enum:
        - DomainMetadata
    body:
      application/xml: DomainMetadataRequest
    responses:
      200:
        body:
          application/xml: DomainMetadataResult
      400:
        description: MissingParameter
/{GetAttributes}:
  uriParameters:
    GetAttributes?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  displayName: Get Attributes
  post:
    description: ' Returns all of the attributes associated with the specified item.
      Optionally, the attributes returned can be limited to one or more attributes
      by specifying an attribute name parameter.   If the item does not exist on the
      replica that was accessed for this operation, an empty set is returned. The
      system does not return an error as it cannot guarantee the item does not exist
      on other replicas. '
    displayName: Get Attributes
    queryParameters:
      Action:
        type: string
        enum:
        - GetAttributes
    body:
      application/xml: GetAttributesRequest
    responses:
      200:
        body:
          application/xml: GetAttributesResult
      400:
        description: InvalidParameterValue
/{ListDomains}:
  uriParameters:
    ListDomains?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  displayName: List Domains
  post:
    description: ' The <code>ListDomains</code> operation lists all domains associated
      with the Access Key ID. It returns domain names up to the limit set by <a href="#MaxNumberOfDomains">MaxNumberOfDomains</a>.
      A <a href="#NextToken">NextToken</a> is returned if there are more than <code>MaxNumberOfDomains</code>
      domains. Calling <code>ListDomains</code> successive times with the <code>NextToken</code>
      provided by the operation returns up to <code>MaxNumberOfDomains</code> more
      domain names with each successive operation call. '
    displayName: List Domains
    queryParameters:
      Action:
        type: string
        enum:
        - ListDomains
    body:
      application/xml: ListDomainsRequest
    responses:
      200:
        body:
          application/xml: ListDomainsResult
      400:
        description: InvalidParameterValue
/{PutAttributes}:
  uriParameters:
    PutAttributes?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  displayName: Put Attributes
  post:
    description: ' The PutAttributes operation creates or replaces attributes in an
      item. The client may specify new attributes using a combination of the <code>Attribute.X.Name</code>
      and <code>Attribute.X.Value</code> parameters. The client specifies the first
      attribute by the parameters <code>Attribute.0.Name</code> and <code>Attribute.0.Value</code>,
      the second attribute by the parameters <code>Attribute.1.Name</code> and <code>Attribute.1.Value</code>,
      and so on.   Attributes are uniquely identified in an item by their name/value
      combination. For example, a single item can have the attributes <code>{ "first_name",
      "first_value" }</code> and <code>{ "first_name", second_value" }</code>. However,
      it cannot have two attribute instances where both the <code>Attribute.X.Name</code>
      and <code>Attribute.X.Value</code> are the same.   Optionally, the requestor
      can supply the <code>Replace</code> parameter for each individual attribute.
      Setting this value to <code>true</code> causes the new attribute value to replace
      the existing attribute value(s). For example, if an item has the attributes
      <code>{ ''a'', ''1'' }</code>, <code>{ ''b'', ''2''}</code> and <code>{ ''b'',
      ''3'' }</code> and the requestor calls <code>PutAttributes</code> using the
      attributes <code>{ ''b'', ''4'' }</code> with the <code>Replace</code> parameter
      set to true, the final attributes of the item are changed to <code>{ ''a'',
      ''1'' }</code> and <code>{ ''b'', ''4'' }</code>, which replaces the previous
      values of the ''b'' attribute with the new value.   You cannot specify an empty
      string as an attribute name.   Because Amazon SimpleDB makes multiple copies
      of client data and uses an eventual consistency update model, an immediate <a>GetAttributes</a>
      or <a>Select</a> operation (read) immediately after a <a>PutAttributes</a> or
      <a>DeleteAttributes</a> operation (write) might not return the updated data.   The
      following limitations are enforced for this operation: <ul> <li>256 total attribute
      name-value pairs per item</li> <li>One billion attributes per domain</li> <li>10
      GB of total user data storage per domain</li> </ul> '
    displayName: Put Attributes
    queryParameters:
      Action:
        type: string
        enum:
        - PutAttributes
    body:
      application/xml: PutAttributesRequest
    responses:
      200:
        body:
          application/xml: null
      400:
        description: InvalidParameterValue
      409:
        description: NumberDomainAttributesExceeded
      404:
        description: AttributeDoesNotExist
/{Select}:
  uriParameters:
    Select?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  displayName: Select
  post:
    description: ' The <code>Select</code> operation returns a set of attributes for
      <code>ItemNames</code> that match the select expression. <code>Select</code>
      is similar to the standard SQL SELECT statement.   The total size of the response
      cannot exceed 1 MB in total size. Amazon SimpleDB automatically adjusts the
      number of items returned per page to enforce this limit. For example, if the
      client asks to retrieve 2500 items, but each individual item is 10 kB in size,
      the system returns 100 items and an appropriate <code>NextToken</code> so the
      client can access the next page of results.   For information on how to construct
      select expressions, see Using Select to Create Amazon SimpleDB Queries in the
      Developer Guide. '
    displayName: Select
    queryParameters:
      Action:
        type: string
        enum:
        - Select
    body:
      application/xml: SelectRequest
    responses:
      200:
        body:
          application/xml: SelectResult
      400:
        description: InvalidParameterValue
      408:
        description: RequestTimeout
