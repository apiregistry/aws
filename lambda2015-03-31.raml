#%RAML 1.0
title: AWS Lambda
version: '2015-03-31'
description: '   <b>Overview</b>   This is the <i>AWS Lambda API Reference</i>. The
  AWS Lambda Developer Guide provides additional information. For the service overview,
  go to <a href="http://docs.aws.amazon.com/lambda/latest/dg/welcome.html">What is
  AWS Lambda</a>, and for information about how the service works, go to <a href="http://docs.aws.amazon.com/lambda/latest/dg/lambda-introduction.html">AWS
  Lambda: How it Works</a> in the <i>AWS Lambda Developer Guide</i>.'
mediaType:
- application/json
uses:
  commons: https://raw.githubusercontent.com/apiregistry/commons/master/commons.raml
  extras: https://raw.githubusercontent.com/apiregistry/typesExtras/master/typeExtras.raml
types:
  Action:
    type: string
    pattern: (lambda:[*]|lambda:[a-zA-Z]+|[*])
  Alias:
    type: string
    pattern: (?!^[0-9]+$)([a-zA-Z0-9-_]+)
    minLength: 1
    maxLength: 128
  AliasList:
    type: array
    items:
      type: AliasConfiguration
  Arn:
    type: string
    pattern: arn:aws:([a-zA-Z0-9\-])+:([a-z]{2}-[a-z]+-\d{1})?:(\d{12})?:(.*)
  BatchSize:
    type: integer
    format: int
    minimum: 1
    maximum: 10000
  Blob:
    type: file
  BlobStream:
    type: file
  Boolean:
    type: boolean
  Date:
    type: datetime
  Description:
    type: string
    minLength: 0
    maxLength: 256
  Enabled:
    type: boolean
  EventSourceMappingsList:
    type: array
    items:
      type: EventSourceMappingConfiguration
  EventSourcePosition:
    type: string
    enum:
    - TRIM_HORIZON
    - LATEST
  EventSourceToken:
    type: string
    pattern: '[a-zA-Z0-9._\-]+'
    minLength: 0
    maxLength: 256
  FunctionArn:
    type: string
    pattern: arn:aws:lambda:[a-z]{2}-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9-_]+(:(\$LATEST|[a-zA-Z0-9-_]+))?
  FunctionList:
    type: array
    items:
      type: FunctionConfiguration
  FunctionName:
    type: string
    pattern: (arn:aws:lambda:)?([a-z]{2}-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
    minLength: 1
    maxLength: 140
  Handler:
    type: string
    pattern: '[^\s]+'
    maxLength: 128
  HttpStatus:
    type: integer
    format: int
  Integer:
    type: integer
    format: int
  InvocationType:
    type: string
    enum:
    - Event
    - RequestResponse
    - DryRun
  LogType:
    type: string
    enum:
    - None
    - Tail
  Long:
    type: integer
    format: long
  MaxListItems:
    type: integer
    format: int
    minimum: 1
    maximum: 10000
  MemorySize:
    type: integer
    format: int
    minimum: 128
    maximum: 1536
  Principal:
    type: string
    pattern: .*
  Qualifier:
    type: string
    pattern: (|[a-zA-Z0-9$_-]+)
    minLength: 1
    maxLength: 128
  RoleArn:
    type: string
    pattern: arn:aws:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+
  Runtime:
    type: string
    enum:
    - nodejs
    - nodejs4.3
    - java8
    - python2.7
  S3Bucket:
    type: string
    pattern: ^[0-9A-Za-z\.\-_]*(?<!\.)$
    minLength: 3
    maxLength: 63
  S3Key:
    type: string
    minLength: 1
    maxLength: 1024
  S3ObjectVersion:
    type: string
    minLength: 1
    maxLength: 1024
  SecurityGroupId:
    type: string
  SecurityGroupIds:
    type: array
    maxItems: 5
    items:
      type: SecurityGroupId
  SourceOwner:
    type: string
    pattern: \d{12}
  StatementId:
    type: string
    pattern: ([a-zA-Z0-9-_]+)
    minLength: 1
    maxLength: 100
  String:
    type: string
  SubnetId:
    type: string
  SubnetIds:
    type: array
    maxItems: 16
    items:
      type: SubnetId
  Timeout:
    type: integer
    format: int
    minimum: 1
  Timestamp:
    type: string
  Version:
    type: string
    pattern: (\$LATEST|[0-9]+)
    minLength: 1
    maxLength: 1024
  VpcId:
    type: string
  AddPermissionResponse:
    type: object
    properties:
      Statement?:
        type: String
        description: <p>The permission statement you specified in the request. The response returns the same as a string using a backslash ("\") as an escape character in the JSON.</p>
    description: <p/>
  AliasConfiguration:
    type: object
    properties:
      AliasArn?:
        type: FunctionArn
        description: <p>Lambda function ARN that is qualified using the alias name as the suffix. For example, if you create an alias called <code>BETA</code> that points to a helloworld function version, the ARN is <code>arn:aws:lambda:aws-regions:acct-id:function:helloworld:BETA</code>.</p>
      Name?:
        type: Alias
        description: <p>Alias name.</p>
      FunctionVersion?:
        type: Version
        description: <p>Function version to which the alias points.</p>
      Description?:
        type: Description
        description: <p>Alias description.</p>
    description: <p>Provides configuration information about a Lambda function version alias.</p>
  CreateEventSourceMappingRequest:
    type: object
    properties:
      EventSourceArn:
        type: Arn
        description: <p>The Amazon Resource Name (ARN) of the Amazon Kinesis or the Amazon DynamoDB stream that is the event source. Any record added to this stream could cause AWS Lambda to invoke your Lambda function, it depends on the <code>BatchSize</code>. AWS Lambda POSTs the Amazon Kinesis event, containing records, to your Lambda function as JSON.</p>
      FunctionName:
        type: FunctionName
        description: <p>The Lambda function to invoke when AWS Lambda detects an event on the stream.</p> <p> You can specify the function name (for example, <code>Thumbnail</code>) or you can specify Amazon Resource Name (ARN) of the function (for example, <code>arn:aws:lambda:us-west-2:account-id:function:ThumbNail</code>). </p> <p> If you are using versioning, you can also provide a qualified function ARN (ARN that is qualified with function version or alias name as suffix). For more information about versioning, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a> </p> <p>AWS Lambda also allows you to specify only the function name with the account ID qualifier (for example, <code>account-id:Thumbnail</code>). </p> <p>Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 character in length.</p>
      Enabled?:
        type: Enabled
        description: <p>Indicates whether AWS Lambda should begin polling the event source. By default, <code>Enabled</code> is true. </p>
      BatchSize?:
        type: BatchSize
        description: <p>The largest number of records that AWS Lambda will retrieve from your event source at the time of invoking your function. Your function receives an event with all the retrieved records. The default is 100 records.</p>
      StartingPosition:
        type: EventSourcePosition
        description: <p>The position in the stream where AWS Lambda should start reading. For more information, go to <a href="http://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html#Kinesis-GetShardIterator-request-ShardIteratorType">ShardIteratorType</a> in the <i>Amazon Kinesis API Reference</i>. </p>
    description: <p/>
  CreateFunctionRequest:
    type: object
    properties:
      FunctionName:
        type: FunctionName
        description: <p>The name you want to assign to the function you are uploading. The function names appear in the console and are returned in the <a>ListFunctions</a> API. Function names are used to specify functions to other AWS Lambda APIs, such as <a>Invoke</a>. </p>
      Runtime:
        type: Runtime
        description: <p>The runtime environment for the Lambda function you are uploading.</p> <p>To use the Node.js runtime v4.3, set the value to "nodejs4.3". To use earlier runtime (v0.10.42), set the value to "nodejs".</p>
      Role:
        type: RoleArn
        description: '<p>The Amazon Resource Name (ARN) of the IAM role that Lambda
          assumes when it executes your function to access any other Amazon Web Services
          (AWS) resources. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/lambda-introduction.html">AWS
          Lambda: How it Works</a>. </p>'
      Handler:
        type: Handler
        description: <p>The function within your code that Lambda calls to begin execution. For Node.js, it is the <i>module-name</i>.<i>export</i> value in your function. For Java, it can be <code>package.class-name::handler</code> or <code>package.class-name</code>. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/java-programming-model-handler-types.html">Lambda Function Handler (Java)</a>. </p>
      Code:
        type: FunctionCode
        description: <p>The code for the Lambda function.</p>
      Description?:
        type: Description
        description: <p>A short, user-defined function description. Lambda does not use this value. Assign a meaningful description as you see fit.</p>
      Timeout?:
        type: Timeout
        description: <p>The function execution time at which Lambda should terminate the function. Because the execution time has cost implications, we recommend you set this value based on your expected execution time. The default is 3 seconds.</p>
      MemorySize?:
        type: MemorySize
        description: <p>The amount of memory, in MB, your Lambda function is given. Lambda uses this memory size to infer the amount of CPU and memory allocated to your function. Your function use-case determines your CPU and memory requirements. For example, a database operation might need less memory compared to an image processing function. The default value is 128 MB. The value must be a multiple of 64 MB.</p>
      Publish?:
        type: Boolean
        description: <p>This boolean parameter can be used to request AWS Lambda to create the Lambda function and publish a version as an atomic operation.</p>
      VpcConfig?:
        type: VpcConfig
        description: <p>If your Lambda function accesses resources in a VPC, you provide this parameter identifying the list of security group IDs and subnet IDs. These must belong to the same VPC. You must provide at least one security group and one subnet ID.</p>
    description: <p/>
  EventSourceMappingConfiguration:
    type: object
    properties:
      UUID?:
        type: String
        description: <p>The AWS Lambda assigned opaque identifier for the mapping.</p>
      BatchSize?:
        type: BatchSize
        description: <p>The largest number of records that AWS Lambda will retrieve from your event source at the time of invoking your function. Your function receives an event with all the retrieved records.</p>
      EventSourceArn?:
        type: Arn
        description: <p>The Amazon Resource Name (ARN) of the Amazon Kinesis stream that is the source of events.</p>
      FunctionArn?:
        type: FunctionArn
        description: <p>The Lambda function to invoke when AWS Lambda detects an event on the stream.</p>
      LastModified?:
        type: Date
        description: <p>The UTC time string indicating the last time the event mapping was updated.</p>
      LastProcessingResult?:
        type: String
        description: <p>The result of the last AWS Lambda invocation of your Lambda function.</p>
      State?:
        type: String
        description: <p>The state of the event source mapping. It can be <code>Creating</code>, <code>Enabled</code>, <code>Disabled</code>, <code>Enabling</code>, <code>Disabling</code>, <code>Updating</code>, or <code>Deleting</code>.</p>
      StateTransitionReason?:
        type: String
        description: <p>The reason the event source mapping is in its current state. It is either user-requested or an AWS Lambda-initiated state transition.</p>
    description: <p>Describes mapping between an Amazon Kinesis stream and a Lambda function.</p>
  FunctionCode:
    type: object
    properties:
      ZipFile?:
        type: Blob
        description: <p>The contents of your zip file containing your deployment package. If you are using the web API directly, the contents of the zip file must be base64-encoded. If you are using the AWS SDKs or the AWS CLI, the SDKs or CLI will do the encoding for you. For more information about creating a .zip file, go to <a href="http://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html#lambda-intro-execution-role.html">Execution Permissions</a> in the <i>AWS Lambda Developer Guide</i>. </p>
      S3Bucket?:
        type: S3Bucket
        description: <p>Amazon S3 bucket name where the .zip file containing your deployment package is stored. This bucket must reside in the same AWS region where you are creating the Lambda function.</p>
      S3Key?:
        type: S3Key
        description: <p>The Amazon S3 object (the deployment package) key name you want to upload.</p>
      S3ObjectVersion?:
        type: S3ObjectVersion
        description: <p>The Amazon S3 object (the deployment package) version you want to upload.</p>
    description: <p>The code for the Lambda function.</p>
  FunctionCodeLocation:
    type: object
    properties:
      RepositoryType?:
        type: String
        description: <p>The repository from which you can download the function.</p>
      Location?:
        type: String
        description: <p>The presigned URL you can use to download the function's .zip file that you previously uploaded. The URL is valid for up to 10 minutes.</p>
    description: <p>The object for the Lambda function location.</p>
  FunctionConfiguration:
    type: object
    properties:
      FunctionName?:
        type: FunctionName
        description: <p>The name of the function.</p>
      FunctionArn?:
        type: FunctionArn
        description: <p>The Amazon Resource Name (ARN) assigned to the function.</p>
      Runtime?:
        type: Runtime
        description: <p>The runtime environment for the Lambda function.</p> <p>To use the Node.js runtime v4.3, set the value to "nodejs4.3". To use earlier runtime (v0.10.42), set the value to "nodejs".</p>
      Role?:
        type: RoleArn
        description: <p>The Amazon Resource Name (ARN) of the IAM role that Lambda assumes when it executes your function to access any other Amazon Web Services (AWS) resources.</p>
      Handler?:
        type: Handler
        description: <p>The function Lambda calls to begin executing your function.</p>
      CodeSize?:
        type: Long
        description: <p>The size, in bytes, of the function .zip file you uploaded.</p>
      Description?:
        type: Description
        description: <p>The user-provided description.</p>
      Timeout?:
        type: Timeout
        description: <p>The function execution time at which Lambda should terminate the function. Because the execution time has cost implications, we recommend you set this value based on your expected execution time. The default is 3 seconds.</p>
      MemorySize?:
        type: MemorySize
        description: <p>The memory size, in MB, you configured for the function. Must be a multiple of 64 MB.</p>
      LastModified?:
        type: Timestamp
        description: <p>The time stamp of the last time you updated the function.</p>
      CodeSha256?:
        type: String
        description: <p>It is the SHA256 hash of your function deployment package.</p>
      Version?:
        type: Version
        description: <p>The version of the Lambda function.</p>
      VpcConfig?:
        type: VpcConfigResponse
        description: <p>VPC configuration associated with your Lambda function.</p>
    description: <p>A complex type that describes function metadata.</p>
  GetFunctionResponse:
    type: object
    properties:
      Configuration?:
        type: FunctionConfiguration
      Code?:
        type: FunctionCodeLocation
    description: <p>This response contains the object for the Lambda function location (see .</p>
  GetPolicyResponse:
    type: object
    properties:
      Policy?:
        type: String
        description: <p>The resource policy associated with the specified function. The response returns the same as a string using a backslash ("\") as an escape character in the JSON.</p>
    description: <p/>
  ListAliasesResponse:
    type: object
    properties:
      NextMarker?:
        type: String
        description: <p>A string, present if there are more aliases.</p>
      Aliases?:
        type: AliasList
        description: <p>A list of aliases.</p>
  ListEventSourceMappingsResponse:
    type: object
    properties:
      NextMarker?:
        type: String
        description: <p>A string, present if there are more event source mappings.</p>
      EventSourceMappings?:
        type: EventSourceMappingsList
        description: <p>An array of <code>EventSourceMappingConfiguration</code> objects.</p>
    description: <p>Contains a list of event sources (see )</p>
  ListFunctionsResponse:
    type: object
    properties:
      NextMarker?:
        type: String
        description: <p>A string, present if there are more functions.</p>
      Functions?:
        type: FunctionList
        description: <p>A list of Lambda functions.</p>
    description: <p>Contains a list of AWS Lambda function configurations (see <a>FunctionConfiguration</a>.</p>
  ListVersionsByFunctionResponse:
    type: object
    properties:
      NextMarker?:
        type: String
        description: <p>A string, present if there are more function versions.</p>
      Versions?:
        type: FunctionList
        description: <p>A list of Lambda function versions.</p>
    description: <p/>
  VpcConfig:
    type: object
    properties:
      SubnetIds?:
        type: SubnetIds
        description: <p>A list of one or more subnet IDs in your VPC.</p>
      SecurityGroupIds?:
        type: SecurityGroupIds
        description: <p>A list of one or more security groups IDs in your VPC.</p>
    description: <p>If your Lambda function accesses resources in a VPC, you provide this parameter identifying the list of security group IDs and subnet IDs. These must belong to the same VPC. You must provide at least one security group and one subnet ID.</p>
  VpcConfigResponse:
    type: object
    properties:
      SubnetIds?:
        type: SubnetIds
        description: <p>A list of subnet IDs associated with the Lambda function.</p>
      SecurityGroupIds?:
        type: SecurityGroupIds
        description: <p>A list of security group IDs associated with the Lambda function.</p>
      VpcId?:
        type: VpcId
        description: <p>The VPC ID associated with you Lambda function.</p>
    description: <p>VPC configuration associated with your Lambda function.</p>
/2015-03-31:
  /functions:
    /{FunctionName}:
      uriParameters:
        FunctionName:
          type: FunctionName
          description: <p>Lambda function whose resource policy you want to remove a permission from.</p> <p> You can specify a function name (for example, <code>Thumbnail</code>) or you can specify Amazon Resource Name (ARN) of the function (for example, <code>arn:aws:lambda:us-west-2:account-id:function:ThumbNail</code>). AWS Lambda also allows you to specify a partial ARN (for example, <code>account-id:Thumbnail</code>). Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 character in length. </p>
      /policy:
        /{StatementId}:
          uriParameters:
            StatementId:
              type: StatementId
              description: <p>Statement ID of the permission to remove.</p>
          delete:
            description: You can remove individual permissions from an resource policy associated with a Lambda function by providing a statement ID that you provided when you added the permission. If you are using versioning, the permissions you remove are specific to the Lambda function version or alias you specify in the <code>AddPermission</code> request via the <code>Qualifier</code> parameter. For more information about versioning, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a>.  Note that removal of a permission will cause an active event source to lose permission to the function. You need permission for the <code>lambda:RemovePermission</code> action.
            displayName: Remove Permission
            queryParameters:
              Qualifier?:
                type: Qualifier
                description: <p>You can specify this optional parameter to remove permission associated with a specific function version or function alias. If you don't specify this parameter, the API removes permission associated with the unqualified function ARN.</p>
            responses:
              204:
                body:
                  application/json: null
              500:
                description: ServiceException
              404:
                description: ResourceNotFoundException
              400:
                description: InvalidParameterValueException
              429:
                description: TooManyRequestsException
        get:
          description: 'Returns the resource policy associated with the specified
            Lambda function.  If you are using the versioning feature, you can get
            the resource policy associated with the specific Lambda function version
            or alias by specifying the version or alias name using the <code>Qualifier</code>
            parameter. For more information about versioning, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS
            Lambda Function Versioning and Aliases</a>.  For information about adding
            permissions, see <a>AddPermission</a>. You need permission for the <code>lambda:GetPolicy
            action.</code> '
          displayName: Get Policy
          queryParameters:
            Qualifier?:
              type: Qualifier
              description: <p>You can specify this optional query parameter to specify a function version or an alias name in which case this API will return all permissions associated with the specific qualified ARN. If you don't provide this parameter, the API will return permissions that apply to the unqualified function ARN.</p>
          responses:
            200:
              body:
                application/json: GetPolicyResponse
            500:
              description: ServiceException
            404:
              description: ResourceNotFoundException
            429:
              description: TooManyRequestsException
            400:
              description: InvalidParameterValueException
        post:
          description: 'Adds a permission to the resource policy associated with the
            specified AWS Lambda function. You use resource policies to grant permissions
            to event sources that use <i>push</i> model. In a <i>push</i> model, event
            sources (such as Amazon S3 and custom applications) invoke your Lambda
            function. Each permission you add to the resource policy allows an event
            source, permission to invoke the Lambda function.  For information about
            the push model, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/lambda-introduction.html">AWS
            Lambda: How it Works</a>.  If you are using versioning, the permissions
            you add are specific to the Lambda function version or alias you specify
            in the <code>AddPermission</code> request via the <code>Qualifier</code>
            parameter. For more information about versioning, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS
            Lambda Function Versioning and Aliases</a>.  This operation requires permission
            for the <code>lambda:AddPermission</code> action.'
          displayName: Add Permission
          queryParameters:
            Qualifier?:
              type: Qualifier
              description: <p>You can use this optional query parameter to describe a qualified ARN using a function version or an alias name. The permission will then apply to the specific qualified ARN. For example, if you specify function version 2 as the qualifier, then permission applies only when request is made using qualified function ARN:</p> <p> <code>arn:aws:lambda:aws-region:acct-id:function:function-name:2</code> </p> <p>If you specify an alias name, for example <code>PROD</code>, then the permission is valid only for requests made using the alias ARN:</p> <p> <code>arn:aws:lambda:aws-region:acct-id:function:function-name:PROD</code> </p> <p>If the qualifier is not specified, the permission is valid only when requests is made using unqualified function ARN.</p> <p> <code>arn:aws:lambda:aws-region:acct-id:function:function-name</code> </p>
          body:
            application/json:
              type: object
              properties:
                StatementId?:
                  type: StatementId
                  description: <p>A unique statement identifier.</p>
                Action?:
                  type: Action
                  description: <p>The AWS Lambda action you want to allow in this statement. Each Lambda action is a string starting with <code>lambda:</code> followed by the API name . For example, <code>lambda:CreateFunction</code>. You can use wildcard (<code>lambda:*</code>) to grant permission for all AWS Lambda actions. </p>
                Principal?:
                  type: Principal
                  description: <p>The principal who is getting this permission. It can be Amazon S3 service Principal (<code>s3.amazonaws.com</code>) if you want Amazon S3 to invoke the function, an AWS account ID if you are granting cross-account permission, or any valid AWS service principal such as <code>sns.amazonaws.com</code>. For example, you might want to allow a custom application in another AWS account to push events to AWS Lambda by invoking your function. </p>
                SourceArn:
                  type: Arn
                  description: <p>This is optional; however, when granting Amazon S3 permission to invoke your function, you should specify this field with the Amazon Resource Name (ARN) as its value. This ensures that only events generated from the specified source can invoke the function.</p> <important><p>If you add a permission for the Amazon S3 principal without providing the source ARN, any AWS account that creates a mapping to your function ARN can send events to invoke your Lambda function from Amazon S3.</p> </important>
                SourceAccount:
                  type: SourceOwner
                  description: <p>This parameter is used for S3 and SES only. The AWS account ID (without a hyphen) of the source owner. For example, if the <code>SourceArn</code> identifies a bucket, then this is the bucket owner's account ID. You can use this additional condition to ensure the bucket you specify is owned by a specific account (it is possible the bucket owner deleted the bucket and some other AWS account created the bucket). You can also use this condition to specify all sources (that is, you don't specify the <code>SourceArn</code>) owned by a specific account. </p>
                EventSourceToken:
                  type: EventSourceToken
                  description: <p>A unique token that must be supplied by the principal invoking the function. This is currently only used for Alexa Smart Home functions.</p>
          responses:
            201:
              body:
                application/json: AddPermissionResponse
            500:
              description: ServiceException
            404:
              description: ResourceNotFoundException
            409:
              description: ResourceConflictException
            400:
              description: InvalidParameterValueException | PolicyLengthExceededException
            429:
              description: TooManyRequestsException
      /aliases:
        /{Name}:
          uriParameters:
            Name:
              type: Alias
              description: <p>Name of the alias to delete.</p>
          delete:
            description: Deletes the specified Lambda function alias. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/aliases-intro.html">Introduction to AWS Lambda Aliases</a>. This requires permission for the lambda:DeleteAlias action.
            displayName: Delete Alias
            responses:
              204:
                body:
                  application/json: null
              500:
                description: ServiceException
              400:
                description: InvalidParameterValueException
              429:
                description: TooManyRequestsException
          put:
            description: Using this API you can update the function version to which the alias points and the alias description. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/aliases-intro.html">Introduction to AWS Lambda Aliases</a>. This requires permission for the lambda:UpdateAlias action.
            displayName: Update Alias
            body:
              application/json:
                type: object
                properties:
                  FunctionVersion:
                    type: Version
                    description: <p>Using this parameter you can change the Lambda function version to which the alias points.</p>
                  Description:
                    type: Description
                    description: <p>You can change the description of the alias using this parameter.</p>
            responses:
              200:
                body:
                  application/json: AliasConfiguration
              500:
                description: ServiceException
              404:
                description: ResourceNotFoundException
              400:
                description: InvalidParameterValueException
              429:
                description: TooManyRequestsException
          get:
            description: Returns the specified alias information such as the alias ARN, description, and function version it is pointing to. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/aliases-intro.html">Introduction to AWS Lambda Aliases</a>. This requires permission for the <code>lambda:GetAlias</code> action.
            displayName: Get Alias
            responses:
              200:
                body:
                  application/json: AliasConfiguration
              500:
                description: ServiceException
              404:
                description: ResourceNotFoundException
              400:
                description: InvalidParameterValueException
              429:
                description: TooManyRequestsException
        get:
          description: Returns list of aliases created for a Lambda function. For each alias, the response includes information such as the alias ARN, description, alias name, and the function version to which it points. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/aliases-intro.html">Introduction to AWS Lambda Aliases</a>. This requires permission for the lambda:ListAliases action.
          displayName: List Aliases
          queryParameters:
            FunctionVersion?:
              type: Version
              description: <p>If you specify this optional parameter, the API returns only the aliases that are pointing to the specific Lambda function version, otherwise the API returns all of the aliases created for the Lambda function.</p>
            Marker?:
              type: String
              description: <p>Optional string. An opaque pagination token returned from a previous <code>ListAliases</code> operation. If present, indicates where to continue the listing.</p>
            MaxItems?:
              type: MaxListItems
              description: <p>Optional integer. Specifies the maximum number of aliases to return in response. This parameter value must be greater than 0.</p>
          responses:
            200:
              body:
                application/json: ListAliasesResponse
            500:
              description: ServiceException
            404:
              description: ResourceNotFoundException
            400:
              description: InvalidParameterValueException
            429:
              description: TooManyRequestsException
        post:
          description: Creates an alias that points to the specified Lambda function version. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/aliases-intro.html">Introduction to AWS Lambda Aliases</a>. Alias names are unique for a given function. This requires permission for the lambda:CreateAlias action.
          displayName: Create Alias
          body:
            application/json:
              type: object
              properties:
                Name?:
                  type: Alias
                  description: <p>Name for the alias you are creating.</p>
                FunctionVersion?:
                  type: Version
                  description: <p>Lambda function version for which you are creating the alias.</p>
                Description:
                  type: Description
                  description: <p>Description of the alias.</p>
          responses:
            201:
              body:
                application/json: AliasConfiguration
            500:
              description: ServiceException
            404:
              description: ResourceNotFoundException
            409:
              description: ResourceConflictException
            400:
              description: InvalidParameterValueException
            429:
              description: TooManyRequestsException
      /configuration:
        put:
          description: Updates the configuration parameters for the specified Lambda function by using the values provided in the request. You provide only the parameters you want to change. This operation must only be used on an existing Lambda function and cannot be used to update the function's code. If you are using the versioning feature, note this API will always update the $LATEST version of your Lambda function. For information about the versioning feature, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a>.  This operation requires permission for the <code>lambda:UpdateFunctionConfiguration</code> action.
          displayName: Update Function Configuration
          body:
            application/json:
              type: object
              properties:
                Role:
                  type: RoleArn
                  description: <p>The Amazon Resource Name (ARN) of the IAM role that Lambda will assume when it executes your function.</p>
                Handler:
                  type: Handler
                  description: <p>The function that Lambda calls to begin executing your function. For Node.js, it is the <code>module-name.export</code> value in your function. </p>
                Description:
                  type: Description
                  description: <p>A short user-defined function description. AWS Lambda does not use this value. Assign a meaningful description as you see fit.</p>
                Timeout:
                  type: Timeout
                  description: <p>The function execution time at which AWS Lambda should terminate the function. Because the execution time has cost implications, we recommend you set this value based on your expected execution time. The default is 3 seconds.</p>
                MemorySize:
                  type: MemorySize
                  description: <p>The amount of memory, in MB, your Lambda function is given. AWS Lambda uses this memory size to infer the amount of CPU allocated to your function. Your function use-case determines your CPU and memory requirements. For example, a database operation might need less memory compared to an image processing function. The default value is 128 MB. The value must be a multiple of 64 MB.</p>
                VpcConfig:
                  type: VpcConfig
                Runtime:
                  type: Runtime
                  description: <p>The runtime environment for the Lambda function.</p> <p>To use the Node.js runtime v4.3, set the value to "nodejs4.3". To use earlier runtime (v0.10.42), set the value to "nodejs".</p>
          responses:
            200:
              body:
                application/json: FunctionConfiguration
            500:
              description: ServiceException
            404:
              description: ResourceNotFoundException
            400:
              description: InvalidParameterValueException
            429:
              description: TooManyRequestsException
        get:
          description: Returns the configuration information of the Lambda function. This the same information you provided as parameters when uploading the function by using <a>CreateFunction</a>. If you are using the versioning feature, you can retrieve this information for a specific function version by using the optional <code>Qualifier</code> parameter and specifying the function version or alias that points to it. If you don't provide it, the API returns information about the $LATEST version of the function. For more information about versioning, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a>. This operation requires permission for the <code>lambda:GetFunctionConfiguration</code> operation.
          displayName: Get Function Configuration
          queryParameters:
            Qualifier?:
              type: Qualifier
              description: <p>Using this optional parameter you can specify a function version or an alias name. If you specify function version, the API uses qualified function ARN and returns information about the specific function version. If you specify an alias name, the API uses the alias ARN and returns information about the function version to which the alias points.</p> <p>If you don't specify this parameter, the API uses unqualified function ARN, and returns information about the <code>$LATEST</code> function version.</p>
          responses:
            200:
              body:
                application/json: FunctionConfiguration
            500:
              description: ServiceException
            404:
              description: ResourceNotFoundException
            429:
              description: TooManyRequestsException
            400:
              description: InvalidParameterValueException
      /versions:
        post:
          description: 'Publishes a version of your function from the current snapshot
            of $LATEST. That is, AWS Lambda takes a snapshot of the function code
            and configuration information from $LATEST and publishes a new version.
            The code and configuration cannot be modified after publication. For information
            about the versioning feature, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS
            Lambda Function Versioning and Aliases</a>. '
          displayName: Publish Version
          body:
            application/json:
              type: object
              properties:
                CodeSha256:
                  type: String
                  description: <p>The SHA256 hash of the deployment package you want to publish. This provides validation on the code you are publishing. If you provide this parameter value must match the SHA256 of the $LATEST version for the publication to succeed.</p>
                Description:
                  type: Description
                  description: <p>The description for the version you are publishing. If not provided, AWS Lambda copies the description from the $LATEST version.</p>
          responses:
            201:
              body:
                application/json: FunctionConfiguration
            500:
              description: ServiceException
            404:
              description: ResourceNotFoundException
            400:
              description: InvalidParameterValueException | CodeStorageExceededException
            429:
              description: TooManyRequestsException
        get:
          description: 'List all versions of a function. For information about the
            versioning feature, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS
            Lambda Function Versioning and Aliases</a>. '
          displayName: List Versions By Function
          queryParameters:
            Marker?:
              type: String
              description: <p> Optional string. An opaque pagination token returned from a previous <code>ListVersionsByFunction</code> operation. If present, indicates where to continue the listing. </p>
            MaxItems?:
              type: MaxListItems
              description: <p>Optional integer. Specifies the maximum number of AWS Lambda function versions to return in response. This parameter value must be greater than 0.</p>
          responses:
            200:
              body:
                application/json: ListVersionsByFunctionResponse
            500:
              description: ServiceException
            404:
              description: ResourceNotFoundException
            400:
              description: InvalidParameterValueException
            429:
              description: TooManyRequestsException
      /invocations:
        post:
          description: Invokes a specific Lambda function. If you are using the versioning feature, you can invoke the specific function version by providing function version or alias name that is pointing to the function version using the <code>Qualifier</code> parameter in the request. If you don't provide the <code>Qualifier</code> parameter, the <code>$LATEST</code> version of the Lambda function is invoked. Invocations occur at least once in response to an event and functions must be idempotent to handle this. For information about the versioning feature, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a>.  This operation requires permission for the <code>lambda:InvokeFunction</code> action.
          displayName: Invoke
          queryParameters:
            Qualifier?:
              type: Qualifier
              description: <p>You can use this optional parameter to specify a Lambda function version or alias name. If you specify a function version, the API uses the qualified function ARN to invoke a specific Lambda function. If you specify an alias name, the API uses the alias ARN to invoke the Lambda function version to which the alias points.</p> <p>If you don't provide this parameter, then the API uses unqualified function ARN which results in invocation of the <code>$LATEST</code> version.</p>
          headers:
            X-Amz-Invocation-Type?:
              type: InvocationType
              description: <p>By default, the <code>Invoke</code> API assumes <code>RequestResponse</code> invocation type. You can optionally request asynchronous execution by specifying <code>Event</code> as the <code>InvocationType</code>. You can also use this parameter to request AWS Lambda to not execute the function but do some verification, such as if the caller is authorized to invoke the function and if the inputs are valid. You request this by specifying <code>DryRun</code> as the <code>InvocationType</code>. This is useful in a cross-account scenario when you want to verify access to a function without running it. </p>
            X-Amz-Log-Type?:
              type: LogType
              description: <p>You can set this optional parameter to <code>Tail</code> in the request only if you specify the <code>InvocationType</code> parameter with value <code>RequestResponse</code>. In this case, AWS Lambda returns the base64-encoded last 4 KB of log data produced by your Lambda function in the <code>x-amz-log-result</code> header. </p>
            X-Amz-Client-Context?:
              type: String
              description: <p>Using the <code>ClientContext</code> you can pass client-specific information to the Lambda function you are invoking. You can then process the client information in your Lambda function as you choose through the context variable. For an example of a <code>ClientContext</code> JSON, see <a href="http://docs.aws.amazon.com/mobileanalytics/latest/ug/PutEvents.html">PutEvents</a> in the <i>Amazon Mobile Analytics API Reference and User Guide</i>.</p> <p>The ClientContext JSON must be base64-encoded.</p>
          body:
            application/json:
              type: Blob
              description: <p>JSON that you want to provide to your Lambda function as input.</p>
          responses:
            200:
              headers:
                X-Amz-Function-Error?:
                  type: String
                  description: <p>Indicates whether an error occurred while executing the Lambda function. If an error occurred this field will have one of two values; <code>Handled</code> or <code>Unhandled</code>. <code>Handled</code> errors are errors that are reported by the function while the <code>Unhandled</code> errors are those detected and reported by AWS Lambda. Unhandled errors include out of memory errors and function timeouts. For information about how to report an <code>Handled</code> error, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/programming-model.html">Programming Model</a>. </p>
                X-Amz-Log-Result?:
                  type: String
                  description: <p> It is the base64-encoded logs for the Lambda function invocation. This is present only if the invocation type is <code>RequestResponse</code> and the logs were requested. </p>
              body:
                application/json:
                  type: Blob
                  description: <p> It is the JSON representation of the object returned by the Lambda function. In This is present only if the invocation type is <code>RequestResponse</code>. </p> <p>In the event of a function error this field contains a message describing the error. For the <code>Handled</code> errors the Lambda function will report this message. For <code>Unhandled</code> errors AWS Lambda reports the message. </p>
            500:
              description: ServiceException
            404:
              description: ResourceNotFoundException
            400:
              description: InvalidRequestContentException | InvalidParameterValueException
            413:
              description: RequestTooLargeException
            415:
              description: UnsupportedMediaTypeException
            429:
              description: TooManyRequestsException
            502:
              description: EC2UnexpectedException | SubnetIPAddressLimitReachedException | ENILimitReachedException | EC2ThrottledException | EC2AccessDeniedException | InvalidSubnetIDException | InvalidSecurityGroupIDException | InvalidZipFileException
      /code:
        put:
          description: Updates the code for the specified Lambda function. This operation must only be used on an existing Lambda function and cannot be used to update the function configuration. If you are using the versioning feature, note this API will always update the $LATEST version of your Lambda function. For information about the versioning feature, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a>.  This operation requires permission for the <code>lambda:UpdateFunctionCode</code> action.
          displayName: Update Function Code
          body:
            application/json:
              type: object
              properties:
                ZipFile:
                  type: Blob
                  description: <p>The contents of your zip file containing your deployment package. If you are using the web API directly, the contents of the zip file must be base64-encoded. If you are using the AWS SDKs or the AWS CLI, the SDKs or CLI will do the encoding for you. For more information about creating a .zip file, go to <a href="http://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html#lambda-intro-execution-role.html">Execution Permissions</a> in the <i>AWS Lambda Developer Guide</i>. </p>
                S3Bucket:
                  type: S3Bucket
                  description: <p>Amazon S3 bucket name where the .zip file containing your deployment package is stored. This bucket must reside in the same AWS region where you are creating the Lambda function.</p>
                S3Key:
                  type: S3Key
                  description: <p>The Amazon S3 object (the deployment package) key name you want to upload.</p>
                S3ObjectVersion:
                  type: S3ObjectVersion
                  description: <p>The Amazon S3 object (the deployment package) version you want to upload.</p>
                Publish:
                  type: Boolean
                  description: <p>This boolean parameter can be used to request AWS Lambda to update the Lambda function and publish a version as an atomic operation.</p>
          responses:
            200:
              body:
                application/json: FunctionConfiguration
            500:
              description: ServiceException
            404:
              description: ResourceNotFoundException
            400:
              description: InvalidParameterValueException | CodeStorageExceededException
            429:
              description: TooManyRequestsException
      delete:
        description: Deletes the specified Lambda function code and configuration. If you are using the versioning feature and you don't specify a function version in your <code>DeleteFunction</code> request, AWS Lambda will delete the function, including all its versions, and any aliases pointing to the function versions. To delete a specific function version, you must provide the function version via the <code>Qualifier</code> parameter. For information about function versioning, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a>.  When you delete a function the associated resource policy is also deleted. You will need to delete the event source mappings explicitly. This operation requires permission for the <code>lambda:DeleteFunction</code> action.
        displayName: Delete Function
        queryParameters:
          Qualifier?:
            type: Qualifier
            description: <p>Using this optional parameter you can specify a function version (but not the <code>$LATEST</code> version) to direct AWS Lambda to delete a specific function version. If the function version has one or more aliases pointing to it, you will get an error because you cannot have aliases pointing to it. You can delete any function version but not the <code>$LATEST</code>, that is, you cannot specify <code>$LATEST</code> as the value of this parameter. The <code>$LATEST</code> version can be deleted only when you want to delete all the function versions and aliases.</p> <p>You can only specify a function version, not an alias name, using this parameter. You cannot delete a function version using its alias.</p> <p>If you don't specify this parameter, AWS Lambda will delete the function, including all of its versions and aliases.</p>
        responses:
          204:
            body:
              application/json: null
          500:
            description: ServiceException
          404:
            description: ResourceNotFoundException
          429:
            description: TooManyRequestsException
          400:
            description: InvalidParameterValueException
          409:
            description: ResourceConflictException
      get:
        description: Returns the configuration information of the Lambda function and a presigned URL link to the .zip file you uploaded with <a>CreateFunction</a> so you can download the .zip file. Note that the URL is valid for up to 10 minutes. The configuration information is the same information you provided as parameters when uploading the function. Using the optional <code>Qualifier</code> parameter, you can specify a specific function version for which you want this information. If you don't specify this parameter, the API uses unqualified function ARN which return information about the <code>$LATEST</code> version of the Lambda function. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a>. This operation requires permission for the <code>lambda:GetFunction</code> action.
        displayName: Get Function
        queryParameters:
          Qualifier?:
            type: Qualifier
            description: <p>Using this optional parameter to specify a function version or an alias name. If you specify function version, the API uses qualified function ARN for the request and returns information about the specific Lambda function version. If you specify an alias name, the API uses the alias ARN and returns information about the function version to which the alias points. If you don't provide this parameter, the API uses unqualified function ARN and returns information about the <code>$LATEST</code> version of the Lambda function.</p>
        responses:
          200:
            body:
              application/json: GetFunctionResponse
          500:
            description: ServiceException
          404:
            description: ResourceNotFoundException
          429:
            description: TooManyRequestsException
          400:
            description: InvalidParameterValueException
    post:
      description: Creates a new Lambda function. The function metadata is created from the request parameters, and the code for the function is provided by a .zip file in the request body. If the function name already exists, the operation will fail. Note that the function name is case-sensitive.  If you are using versioning, you can also publish a version of the Lambda function you are creating using the <code>Publish</code> parameter. For more information about versioning, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a>.  This operation requires permission for the <code>lambda:CreateFunction</code> action.
      displayName: Create Function
      body:
        application/json: CreateFunctionRequest
      responses:
        201:
          body:
            application/json: FunctionConfiguration
        500:
          description: ServiceException
        400:
          description: InvalidParameterValueException | CodeStorageExceededException
        404:
          description: ResourceNotFoundException
        409:
          description: ResourceConflictException
        429:
          description: TooManyRequestsException
    get:
      description: 'Returns a list of your Lambda functions. For each function, the
        response includes the function configuration information. You must use <a>GetFunction</a>
        to retrieve the code for your function. This operation requires permission
        for the <code>lambda:ListFunctions</code> action. If you are using versioning
        feature, the response returns list of $LATEST versions of your functions.
        For information about the versioning feature, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS
        Lambda Function Versioning and Aliases</a>. '
      displayName: List Functions
      queryParameters:
        Marker?:
          type: String
          description: <p>Optional string. An opaque pagination token returned from a previous <code>ListFunctions</code> operation. If present, indicates where to continue the listing. </p>
        MaxItems?:
          type: MaxListItems
          description: <p>Optional integer. Specifies the maximum number of AWS Lambda functions to return in response. This parameter value must be greater than 0.</p>
      responses:
        200:
          body:
            application/json: ListFunctionsResponse
        500:
          description: ServiceException
        429:
          description: TooManyRequestsException
  /event-source-mappings:
    /{UUID}:
      uriParameters:
        UUID:
          type: String
          description: <p>The event source mapping ID.</p>
      delete:
        description: Removes an event source mapping. This means AWS Lambda will no longer invoke the function for events in the associated source. This operation requires permission for the <code>lambda:DeleteEventSourceMapping</code> action.
        displayName: Delete Event Source Mapping
        responses:
          202:
            body:
              application/json: EventSourceMappingConfiguration
          500:
            description: ServiceException
          404:
            description: ResourceNotFoundException
          400:
            description: InvalidParameterValueException
          429:
            description: TooManyRequestsException
      put:
        description: You can update an event source mapping. This is useful if you want to change the parameters of the existing mapping without losing your position in the stream. You can change which function will receive the stream records, but to change the stream itself, you must create a new mapping. If you are using the versioning feature, you can update the event source mapping to map to a specific Lambda function version or alias as described in the <code>FunctionName</code> parameter. For information about the versioning feature, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a>.  If you disable the event source mapping, AWS Lambda stops polling. If you enable again, it will resume polling from the time it had stopped polling, so you don't lose processing of any records. However, if you delete event source mapping and create it again, it will reset. This operation requires permission for the <code>lambda:UpdateEventSourceMapping</code> action.
        displayName: Update Event Source Mapping
        body:
          application/json:
            type: object
            properties:
              FunctionName:
                type: FunctionName
                description: <p>The Lambda function to which you want the stream records sent.</p> <p> You can specify a function name (for example, <code>Thumbnail</code>) or you can specify Amazon Resource Name (ARN) of the function (for example, <code>arn:aws:lambda:us-west-2:account-id:function:ThumbNail</code>). AWS Lambda also allows you to specify a partial ARN (for example, <code>account-id:Thumbnail</code>). </p> <p>If you are using versioning, you can also provide a qualified function ARN (ARN that is qualified with function version or alias name as suffix). For more information about versioning, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a> </p> <p>Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 character in length.</p>
              Enabled:
                type: Enabled
                description: <p>Specifies whether AWS Lambda should actively poll the stream or not. If disabled, AWS Lambda will not poll the stream.</p>
              BatchSize:
                type: BatchSize
                description: <p>The maximum number of stream records that can be sent to your Lambda function for a single invocation.</p>
        responses:
          202:
            body:
              application/json: EventSourceMappingConfiguration
          500:
            description: ServiceException
          404:
            description: ResourceNotFoundException
          400:
            description: InvalidParameterValueException
          429:
            description: TooManyRequestsException
          409:
            description: ResourceConflictException
      get:
        description: Returns configuration information for the specified event source mapping (see <a>CreateEventSourceMapping</a>). This operation requires permission for the <code>lambda:GetEventSourceMapping</code> action.
        displayName: Get Event Source Mapping
        responses:
          200:
            body:
              application/json: EventSourceMappingConfiguration
          500:
            description: ServiceException
          404:
            description: ResourceNotFoundException
          400:
            description: InvalidParameterValueException
          429:
            description: TooManyRequestsException
    post:
      description: 'Identifies a stream as an event source for a Lambda function.
        It can be either an Amazon Kinesis stream or an Amazon DynamoDB stream. AWS
        Lambda invokes the specified function when records are posted to the stream.
        This association between a stream source and a Lambda function is called the
        event source mapping. <important>This event source mapping is relevant only
        in the AWS Lambda pull model, where AWS Lambda invokes the function. For more
        information, go to <a href="http://docs.aws.amazon.com/lambda/latest/dg/lambda-introduction.html">AWS
        Lambda: How it Works</a> in the <i>AWS Lambda Developer Guide</i>. </important>
        You provide mapping information (for example, which stream to read from and
        which Lambda function to invoke) in the request body. Each event source, such
        as an Amazon Kinesis or a DynamoDB stream, can be associated with multiple
        AWS Lambda function. A given Lambda function can be associated with multiple
        AWS event sources. If you are using versioning, you can specify a specific
        function version or an alias via the function name parameter. For more information
        about versioning, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS
        Lambda Function Versioning and Aliases</a>.  This operation requires permission
        for the <code>lambda:CreateEventSourceMapping</code> action.'
      displayName: Create Event Source Mapping
      body:
        application/json: CreateEventSourceMappingRequest
      responses:
        202:
          body:
            application/json: EventSourceMappingConfiguration
        500:
          description: ServiceException
        400:
          description: InvalidParameterValueException
        409:
          description: ResourceConflictException
        429:
          description: TooManyRequestsException
        404:
          description: ResourceNotFoundException
    get:
      description: Returns a list of event source mappings you created using the <code>CreateEventSourceMapping</code> (see <a>CreateEventSourceMapping</a>).  For each mapping, the API returns configuration information. You can optionally specify filters to retrieve specific event source mappings. If you are using the versioning feature, you can get list of event source mappings for a specific Lambda function version or an alias as described in the <code>FunctionName</code> parameter. For information about the versioning feature, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a>.  This operation requires permission for the <code>lambda:ListEventSourceMappings</code> action.
      displayName: List Event Source Mappings
      queryParameters:
        EventSourceArn?:
          type: Arn
          description: <p>The Amazon Resource Name (ARN) of the Amazon Kinesis stream. (This parameter is optional.)</p>
        FunctionName?:
          type: FunctionName
          description: <p>The name of the Lambda function.</p> <p> You can specify the function name (for example, <code>Thumbnail</code>) or you can specify Amazon Resource Name (ARN) of the function (for example, <code>arn:aws:lambda:us-west-2:account-id:function:ThumbNail</code>). If you are using versioning, you can also provide a qualified function ARN (ARN that is qualified with function version or alias name as suffix). AWS Lambda also allows you to specify only the function name with the account ID qualifier (for example, <code>account-id:Thumbnail</code>). Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 character in length. </p>
        Marker?:
          type: String
          description: <p>Optional string. An opaque pagination token returned from a previous <code>ListEventSourceMappings</code> operation. If present, specifies to continue the list from where the returning call left off. </p>
        MaxItems?:
          type: MaxListItems
          description: <p>Optional integer. Specifies the maximum number of event sources to return in response. This value must be greater than 0.</p>
      responses:
        200:
          body:
            application/json: ListEventSourceMappingsResponse
        500:
          description: ServiceException
        404:
          description: ResourceNotFoundException
        400:
          description: InvalidParameterValueException
        429:
          description: TooManyRequestsException
/2014-11-13:
  /functions:
    /{FunctionName}:
      uriParameters:
        FunctionName:
          type: FunctionName
          description: <p>The Lambda function name.</p>
      /invoke-async:
        post:
          description: <important>This API is deprecated. We recommend you use <code>Invoke</code> API (see <a>Invoke</a>). </important> Submits an invocation request to AWS Lambda. Upon receiving the request, Lambda executes the specified function asynchronously. To see the logs generated by the Lambda function execution, see the CloudWatch Logs console. This operation requires permission for the <code>lambda:InvokeFunction</code> action.
          displayName: Invoke Async
          body:
            application/json:
              type: BlobStream
              description: <p>JSON that you want to provide to your Lambda function as input.</p>
          responses:
            202:
              body:
                application/json: null
            500:
              description: ServiceException
            404:
              description: ResourceNotFoundException
            400:
              description: InvalidRequestContentException
