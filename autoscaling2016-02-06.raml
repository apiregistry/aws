#%RAML 1.0
title: Application Auto Scaling
version: '2016-02-06'
description: ' Application Auto Scaling is a general purpose Auto Scaling service
  for supported elastic AWS resources. With Application Auto Scaling, you can automatically
  scale your AWS resources, with an experience similar to that of Auto Scaling.  Application
  Auto Scaling supports scaling the following AWS resources: <ul> <li>  Amazon ECS
  services </li> <li>  Amazon EC2 Spot fleet instances </li> </ul>  You can use Application
  Auto Scaling to accomplish the following tasks: <ul> <li>  Define scaling policies
  for automatically adjusting your AWS resources </li> <li>  Scale your resources
  in response to CloudWatch alarms </li> <li>  View history of your scaling events  </li>
  </ul>  Application Auto Scaling is available in the following regions: <ul> <li>   <code>us-east-1</code>  </li>
  <li>   <code>us-west-1</code>  </li> <li>   <code>us-west-2</code>  </li> <li>   <code>ap-southeast-1</code>  </li>
  <li>   <code>ap-southeast-2</code>  </li> <li>   <code>ap-northeast-1</code>  </li>
  <li>   <code>eu-central-1</code>  </li> <li>   <code>eu-west-1</code>  </li> </ul>'
mediaType:
- application/json
uses:
  commons: https://raw.githubusercontent.com/apiregistry/commons/master/commons.raml
  extras: https://raw.githubusercontent.com/apiregistry/typesExtras/master/typeExtras.raml
types:
  AdjustmentType:
    type: string
    enum:
    - ChangeInCapacity
    - PercentChangeInCapacity
    - ExactCapacity
  Alarms:
    type: array
    items:
      type: Alarm
  Cooldown:
    type: integer
    format: int
  MaxResults:
    type: integer
    format: int
  MetricAggregationType:
    type: string
    enum:
    - Average
    - Minimum
    - Maximum
  MetricScale:
    type: number
    format: double
  MinAdjustmentMagnitude:
    type: integer
    format: int
  PolicyName:
    type: string
    pattern: \p{Print}+
    minLength: 1
    maxLength: 256
  PolicyType:
    type: string
    enum:
    - StepScaling
  ResourceCapacity:
    type: integer
    format: int
  ResourceId:
    type: string
    pattern: '[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*'
  ResourceIdMaxLen1600:
    type: string
    pattern: '[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*'
    minLength: 1
    maxLength: 1600
  ResourceIdsMaxLen1600:
    type: array
    items:
      type: ResourceIdMaxLen1600
  ScalableDimension:
    type: string
    enum:
    - ecs:service:DesiredCount
    - ec2:spot-fleet-request:TargetCapacity
  ScalableTargets:
    type: array
    items:
      type: ScalableTarget
  ScalingActivities:
    type: array
    items:
      type: ScalingActivity
  ScalingActivityStatusCode:
    type: string
    enum:
    - Pending
    - InProgress
    - Successful
    - Overridden
    - Unfulfilled
    - Failed
  ScalingAdjustment:
    type: integer
    format: int
  ScalingPolicies:
    type: array
    items:
      type: ScalingPolicy
  ServiceNamespace:
    type: string
    enum:
    - ecs
    - ec2
  StepAdjustments:
    type: array
    items:
      type: StepAdjustment
  TimestampType:
    type: datetime
  XmlString:
    type: string
    pattern: '[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*'
  Alarm:
    type: object
    properties:
      AlarmName:
        type: ResourceId
        description: <p>The name of the alarm.</p>
      AlarmARN:
        type: ResourceId
        description: <p>The Amazon Resource Name (ARN) of the alarm.</p>
    description: <p>An object representing a CloudWatch alarm associated with a scaling policy.</p>
  DeleteScalingPolicyRequest:
    type: object
    properties:
      PolicyName:
        type: ResourceIdMaxLen1600
        description: <p>The name of the scaling policy to delete.</p>
      ServiceNamespace:
        type: ServiceNamespace
        description: <p>The namespace for the AWS service that the scaling policy is associated with. For more information, see <a href="http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the Amazon Web Services General Reference.</p>
      ResourceId:
        type: ResourceIdMaxLen1600
        description: <p>The resource type and unique identifier string for the resource associated with the scaling policy. For Amazon ECS services, the resource type is <code>services</code>, and the identifier is the cluster name and service name; for example, <code>service/default/sample-webapp</code>. For Amazon EC2 Spot fleet requests, the resource type is <code>spot-fleet-request</code>, and the identifier is the Spot fleet request ID; for example, <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
      ScalableDimension:
        type: ScalableDimension
        description: <p>The scalable dimension associated with the scaling policy. The scalable dimension contains the service namespace, resource type, and scaling property, such as <code>ecs:service:DesiredCount</code> for the desired task count of an Amazon ECS service, or <code>ec2:spot-fleet-request:TargetCapacity</code> for the target capacity of an Amazon EC2 Spot fleet request.</p>
  DeleteScalingPolicyResponse:
    type: object
  DeregisterScalableTargetRequest:
    type: object
    properties:
      ServiceNamespace:
        type: ServiceNamespace
        description: <p>The namespace for the AWS service that the scalable target is associated with. For more information, see <a href="http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the Amazon Web Services General Reference.</p>
      ResourceId:
        type: ResourceIdMaxLen1600
        description: <p>The resource type and unique identifier string for the resource associated with the scalable target. For Amazon ECS services, the resource type is <code>services</code>, and the identifier is the cluster name and service name; for example, <code>service/default/sample-webapp</code>. For Amazon EC2 Spot fleet requests, the resource type is <code>spot-fleet-request</code>, and the identifier is the Spot fleet request ID; for example, <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
      ScalableDimension:
        type: ScalableDimension
        description: <p>The scalable dimension associated with the scalable target. The scalable dimension contains the service namespace, resource type, and scaling property, such as <code>ecs:service:DesiredCount</code> for the desired task count of an Amazon ECS service, or <code>ec2:spot-fleet-request:TargetCapacity</code> for the target capacity of an Amazon EC2 Spot fleet request.</p>
  DeregisterScalableTargetResponse:
    type: object
  DescribeScalableTargetsRequest:
    type: object
    properties:
      ServiceNamespace:
        type: ServiceNamespace
        description: <p>The namespace for the AWS service that the scalable target is associated with. For more information, see <a href="http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the Amazon Web Services General Reference.</p>
      ResourceIds?:
        type: ResourceIdsMaxLen1600
        description: <p>The resource type and unique identifier string for the resource associated with the scalable target. For Amazon ECS services, the resource type is <code>services</code>, and the identifier is the cluster name and service name; for example, <code>service/default/sample-webapp</code>. For Amazon EC2 Spot fleet requests, the resource type is <code>spot-fleet-request</code>, and the identifier is the Spot fleet request ID; for example, <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>. If you specify a scalable dimension, you must also specify a resource ID.</p>
      ScalableDimension?:
        type: ScalableDimension
        description: <p>The scalable dimension associated with the scalable target. The scalable dimension contains the service namespace, resource type, and scaling property, such as <code>ecs:service:DesiredCount</code> for the desired task count of an Amazon ECS service, or <code>ec2:spot-fleet-request:TargetCapacity</code> for the target capacity of an Amazon EC2 Spot fleet request. If you specify a scalable dimension, you must also specify a resource ID.</p>
      MaxResults?:
        type: MaxResults
        description: <p>The maximum number of scalable target results returned by <code>DescribeScalableTargets</code> in paginated output. When this parameter is used, <code>DescribeScalableTargets</code> returns up to <code>MaxResults</code> results in a single page along with a <code>NextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeScalableTargets</code> request with the returned <code>NextToken</code> value. This value can be between 1 and 50. If this parameter is not used, then <code>DescribeScalableTargets</code> returns up to 50 results and a <code>NextToken</code> value, if applicable.</p>
      NextToken?:
        type: XmlString
        description: <p>The <code>NextToken</code> value returned from a previous paginated <code>DescribeScalableTargets</code> request. Pagination continues from the end of the previous results that returned the <code>NextToken</code> value. This value is <code>null</code> when there are no more results to return.</p>
  DescribeScalableTargetsResponse:
    type: object
    properties:
      ScalableTargets?:
        type: ScalableTargets
        description: <p>The list of scalable targets that matches the request parameters.</p>
      NextToken?:
        type: XmlString
        description: <p>The <code>NextToken</code> value to include in a future <code>DescribeScalableTargets</code> request. When the results of a <code>DescribeScalableTargets</code> request exceed <code>MaxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
  DescribeScalingActivitiesRequest:
    type: object
    properties:
      ServiceNamespace:
        type: ServiceNamespace
        description: <p>The namespace for the AWS service that the scaling activity is associated with. For more information, see <a href="http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the Amazon Web Services General Reference.</p>
      ResourceId?:
        type: ResourceIdMaxLen1600
        description: <p>The resource type and unique identifier string for the resource associated with the scaling activity. For Amazon ECS services, the resource type is <code>services</code>, and the identifier is the cluster name and service name; for example, <code>service/default/sample-webapp</code>. For Amazon EC2 Spot fleet requests, the resource type is <code>spot-fleet-request</code>, and the identifier is the Spot fleet request ID; for example, <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>. If you specify a scalable dimension, you must also specify a resource ID.</p>
      ScalableDimension?:
        type: ScalableDimension
        description: <p>The scalable dimension associated with the scaling activity. The scalable dimension contains the service namespace, resource type, and scaling property, such as <code>ecs:service:DesiredCount</code> for the desired task count of an Amazon ECS service, or <code>ec2:spot-fleet-request:TargetCapacity</code> for the target capacity of an Amazon EC2 Spot fleet request. If you specify a scalable dimension, you must also specify a resource ID.</p>
      MaxResults?:
        type: MaxResults
        description: <p>The maximum number of scaling activity results returned by <code>DescribeScalingActivities</code> in paginated output. When this parameter is used, <code>DescribeScalingActivities</code> returns up to <code>MaxResults</code> results in a single page along with a <code>NextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeScalingActivities</code> request with the returned <code>NextToken</code> value. This value can be between 1 and 50. If this parameter is not used, then <code>DescribeScalingActivities</code> returns up to 50 results and a <code>NextToken</code> value, if applicable.</p>
      NextToken?:
        type: XmlString
        description: <p>The <code>NextToken</code> value returned from a previous paginated <code>DescribeScalingActivities</code> request. Pagination continues from the end of the previous results that returned the <code>NextToken</code> value. This value is <code>null</code> when there are no more results to return.</p>
  DescribeScalingActivitiesResponse:
    type: object
    properties:
      ScalingActivities?:
        type: ScalingActivities
        description: <p>A list of scaling activity objects.</p>
      NextToken?:
        type: XmlString
        description: <p>The <code>NextToken</code> value to include in a future <code>DescribeScalingActivities</code> request. When the results of a <code>DescribeScalingActivities</code> request exceed <code>MaxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
  DescribeScalingPoliciesRequest:
    type: object
    properties:
      PolicyNames?:
        type: ResourceIdsMaxLen1600
        description: <p>The names of the scaling policies to describe.</p>
      ServiceNamespace:
        type: ServiceNamespace
        description: <p>The AWS service namespace of the scalable target that the scaling policy is associated with. For more information, see <a href="http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the Amazon Web Services General Reference.</p>
      ResourceId?:
        type: ResourceIdMaxLen1600
        description: <p>The unique resource identifier string of the scalable target that the scaling policy is associated with. For Amazon ECS services, the resource type is <code>services</code>, and the identifier is the cluster name and service name; for example, <code>service/default/sample-webapp</code>. For Amazon EC2 Spot fleet requests, the resource type is <code>spot-fleet-request</code>, and the identifier is the Spot fleet request ID; for example, <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>. If you specify a scalable dimension, you must also specify a resource ID.</p>
      ScalableDimension?:
        type: ScalableDimension
        description: <p>The scalable dimension of the scalable target that the scaling policy is associated with. The scalable dimension contains the service namespace, resource type, and scaling property, such as <code>ecs:service:DesiredCount</code> for the desired task count of an Amazon ECS service, or <code>ec2:spot-fleet-request:TargetCapacity</code> for the target capacity of an Amazon EC2 Spot fleet request. If you specify a scalable dimension, you must also specify a resource ID.</p>
      MaxResults?:
        type: MaxResults
        description: <p>The maximum number of scaling policy results returned by <code>DescribeScalingPolicies</code> in paginated output. When this parameter is used, <code>DescribeScalingPolicies</code> returns up to <code>MaxResults</code> results in a single page along with a <code>NextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeScalingPolicies</code> request with the returned <code>NextToken</code> value. This value can be between 1 and 50. If this parameter is not used, then <code>DescribeScalingPolicies</code> returns up to 50 results and a <code>NextToken</code> value, if applicable.</p>
      NextToken?:
        type: XmlString
        description: <p>The <code>NextToken</code> value returned from a previous paginated <code>DescribeScalingPolicies</code> request. Pagination continues from the end of the previous results that returned the <code>NextToken</code> value. This value is <code>null</code> when there are no more results to return.</p>
  DescribeScalingPoliciesResponse:
    type: object
    properties:
      ScalingPolicies?:
        type: ScalingPolicies
        description: <p>A list of scaling policy objects.</p>
      NextToken?:
        type: XmlString
        description: <p>The <code>NextToken</code> value to include in a future <code>DescribeScalingPolicies</code> request. When the results of a <code>DescribeScalingPolicies</code> request exceed <code>MaxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
  PutScalingPolicyRequest:
    type: object
    properties:
      PolicyName:
        type: PolicyName
        description: <p>The name of the scaling policy.</p>
      ServiceNamespace:
        type: ServiceNamespace
        description: <p>The AWS service namespace of the scalable target that this scaling policy applies to. For more information, see <a href="http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the Amazon Web Services General Reference.</p>
      ResourceId:
        type: ResourceIdMaxLen1600
        description: <p>The unique resource identifier string for the scalable target that this scaling policy applies to. For Amazon ECS services, the resource type is <code>services</code>, and the identifier is the cluster name and service name; for example, <code>service/default/sample-webapp</code>. For Amazon EC2 Spot fleet requests, the resource type is <code>spot-fleet-request</code>, and the identifier is the Spot fleet request ID; for example, <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
      ScalableDimension:
        type: ScalableDimension
        description: <p>The scalable dimension of the scalable target that this scaling policy applies to. The scalable dimension contains the service namespace, resource type, and scaling property, such as <code>ecs:service:DesiredCount</code> for the desired task count of an Amazon ECS service, or <code>ec2:spot-fleet-request:TargetCapacity</code> for the target capacity of an Amazon EC2 Spot fleet request.</p>
      PolicyType?:
        type: PolicyType
        description: <p>The policy type. If you are creating a new policy, this parameter is required. If you are updating an existing policy, this parameter is not required.</p>
      StepScalingPolicyConfiguration?:
        type: StepScalingPolicyConfiguration
        description: <p>The configuration for the step scaling policy. If you are creating a new policy, this parameter is required. If you are updating an existing policy, this parameter is not required. For more information, see <a>StepScalingPolicyConfiguration</a> and <a>StepAdjustment</a>.</p>
  PutScalingPolicyResponse:
    type: object
    properties:
      PolicyARN:
        type: ResourceIdMaxLen1600
        description: <p>The Amazon Resource Name (ARN) of the resulting scaling policy.</p>
  RegisterScalableTargetRequest:
    type: object
    properties:
      ServiceNamespace:
        type: ServiceNamespace
        description: <p>The namespace for the AWS service that the scalable target is associated with. For Amazon ECS services, the namespace value is <code>ecs</code>. For more information, see <a href="http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the Amazon Web Services General Reference.</p>
      ResourceId:
        type: ResourceIdMaxLen1600
        description: <p>The resource type and unique identifier string for the resource to associate with the scalable target. For Amazon ECS services, the resource type is <code>services</code>, and the identifier is the cluster name and service name; for example, <code>service/default/sample-webapp</code>. For Amazon EC2 Spot fleet requests, the resource type is <code>spot-fleet-request</code>, and the identifier is the Spot fleet request ID; for example, <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
      ScalableDimension:
        type: ScalableDimension
        description: <p>The scalable dimension associated with the scalable target. The scalable dimension contains the service namespace, resource type, and scaling property, such as <code>ecs:service:DesiredCount</code> for the desired task count of an Amazon ECS service, or <code>ec2:spot-fleet-request:TargetCapacity</code> for the target capacity of an Amazon EC2 Spot fleet request.</p>
      MinCapacity?:
        type: ResourceCapacity
        description: <p>The minimum value for this scalable target to scale in to in response to scaling activities. This parameter is required if you are registering a new scalable target, and it is optional if you are updating an existing one.</p>
      MaxCapacity?:
        type: ResourceCapacity
        description: <p>The maximum value for this scalable target to scale out to in response to scaling activities. This parameter is required if you are registering a new scalable target, and it is optional if you are updating an existing one.</p>
      RoleARN?:
        type: ResourceIdMaxLen1600
        description: <p>The ARN of the IAM role that allows Application Auto Scaling to modify your scalable target on your behalf. This parameter is required if you are registering a new scalable target, and it is optional if you are updating an existing one.</p>
  RegisterScalableTargetResponse:
    type: object
  ScalableTarget:
    type: object
    properties:
      ServiceNamespace:
        type: ServiceNamespace
        description: <p>The namespace for the AWS service that the scalable target is associated with. For more information, see <a href="http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the Amazon Web Services General Reference.</p>
      ResourceId:
        type: ResourceIdMaxLen1600
        description: <p>The resource type and unique identifier string for the resource associated with the scalable target. For Amazon ECS services, the resource type is <code>services</code>, and the identifier is the cluster name and service name; for example, <code>service/default/sample-webapp</code>. For Amazon EC2 Spot fleet requests, the resource type is <code>spot-fleet-request</code>, and the identifier is the Spot fleet request ID; for example, <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
      ScalableDimension:
        type: ScalableDimension
        description: <p>The scalable dimension associated with the scalable target. The scalable dimension contains the service namespace, resource type, and scaling property, such as <code>ecs:service:DesiredCount</code> for the desired task count of an Amazon ECS service, or <code>ec2:spot-fleet-request:TargetCapacity</code> for the target capacity of an Amazon EC2 Spot fleet request.</p>
      MinCapacity:
        type: ResourceCapacity
        description: <p>The minimum value for this scalable target to scale in to in response to scaling activities.</p>
      MaxCapacity:
        type: ResourceCapacity
        description: <p>The maximum value for this scalable target to scale out to in response to scaling activities.</p>
      RoleARN:
        type: ResourceIdMaxLen1600
        description: <p>The ARN of the IAM role that allows Application Auto Scaling to modify your scalable target on your behalf.</p>
      CreationTime:
        type: TimestampType
        description: <p>The Unix timestamp for when the scalable target was created.</p>
    description: <p>An object representing a scalable target.</p>
  ScalingActivity:
    type: object
    properties:
      ActivityId:
        type: ResourceId
        description: <p>The unique identifier string for the scaling activity.</p>
      ServiceNamespace:
        type: ServiceNamespace
        description: <p>The namespace for the AWS service that the scaling activity is associated with. For more information, see <a href="http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the Amazon Web Services General Reference.</p>
      ResourceId:
        type: ResourceIdMaxLen1600
        description: <p>The resource type and unique identifier string for the resource associated with the scaling activity. For Amazon ECS services, the resource type is <code>services</code>, and the identifier is the cluster name and service name; for example, <code>service/default/sample-webapp</code>. For Amazon EC2 Spot fleet requests, the resource type is <code>spot-fleet-request</code>, and the identifier is the Spot fleet request ID; for example, <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
      ScalableDimension:
        type: ScalableDimension
        description: <p>The scalable dimension associated with the scaling activity. The scalable dimension contains the service namespace, resource type, and scaling property, such as <code>ecs:service:DesiredCount</code> for the desired task count of an Amazon ECS service, or <code>ec2:spot-fleet-request:TargetCapacity</code> for the target capacity of an Amazon EC2 Spot fleet request.</p>
      Description:
        type: XmlString
        description: <p>A simple description of what action the scaling activity intends to accomplish.</p>
      Cause:
        type: XmlString
        description: <p>A simple description of what caused the scaling activity to happen.</p>
      StartTime:
        type: TimestampType
        description: <p>The Unix timestamp for when the scaling activity began.</p>
      EndTime?:
        type: TimestampType
        description: <p>The Unix timestamp for when the scaling activity ended.</p>
      StatusCode:
        type: ScalingActivityStatusCode
        description: <p>Indicates the status of the scaling activity.</p>
      StatusMessage?:
        type: XmlString
        description: <p>A simple message about the current status of the scaling activity.</p>
      Details?:
        type: XmlString
        description: <p>The details about the scaling activity.</p>
    description: <p>An object representing a scaling activity.</p>
  ScalingPolicy:
    type: object
    properties:
      PolicyARN:
        type: ResourceIdMaxLen1600
        description: <p>The Amazon Resource Name (ARN) of the scaling policy.</p>
      PolicyName:
        type: PolicyName
        description: <p>The name of the scaling policy.</p>
      ServiceNamespace:
        type: ServiceNamespace
        description: <p>The namespace for the AWS service that the scaling policy is associated with. For more information, see <a href="http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the Amazon Web Services General Reference.</p>
      ResourceId:
        type: ResourceIdMaxLen1600
        description: <p>The resource type and unique identifier string for the resource associated with the scaling policy. For Amazon ECS services, the resource type is <code>services</code>, and the identifier is the cluster name and service name; for example, <code>service/default/sample-webapp</code>. For Amazon EC2 Spot fleet requests, the resource type is <code>spot-fleet-request</code>, and the identifier is the Spot fleet request ID; for example, <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
      ScalableDimension:
        type: ScalableDimension
        description: <p>The scalable dimension associated with the scaling policy. The scalable dimension contains the service namespace, resource type, and scaling property, such as <code>ecs:service:DesiredCount</code> for the desired task count of an Amazon ECS service, or <code>ec2:spot-fleet-request:TargetCapacity</code> for the target capacity of an Amazon EC2 Spot fleet request.</p>
      PolicyType:
        type: PolicyType
        description: <p>The scaling policy type.</p>
      StepScalingPolicyConfiguration?:
        type: StepScalingPolicyConfiguration
        description: <p>The configuration for the step scaling policy.</p>
      Alarms?:
        type: Alarms
        description: <p>The CloudWatch alarms that are associated with the scaling policy.</p>
      CreationTime:
        type: TimestampType
        description: <p>The Unix timestamp for when the scaling policy was created.</p>
    description: <p>An object representing a scaling policy.</p>
  StepAdjustment:
    type: object
    properties:
      MetricIntervalLowerBound?:
        type: MetricScale
        description: <p>The lower bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the lower bound is inclusive (the metric must be greater than or equal to the threshold plus the lower bound). Otherwise, it is exclusive (the metric must be greater than the threshold plus the lower bound). A null value indicates negative infinity.</p>
      MetricIntervalUpperBound?:
        type: MetricScale
        description: <p>The upper bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the upper bound is exclusive (the metric must be less than the threshold plus the upper bound). Otherwise, it is inclusive (the metric must be less than or equal to the threshold plus the upper bound). A null value indicates positive infinity.</p> <p>The upper bound must be greater than the lower bound.</p>
      ScalingAdjustment:
        type: ScalingAdjustment
        description: <p>The amount by which to scale, based on the specified adjustment type. A positive value adds to the current scalable dimension while a negative number removes from the current scalable dimension.</p>
    description: <p>An object representing a step adjustment for a <a>StepScalingPolicyConfiguration</a>. Describes an adjustment based on the difference between the value of the aggregated CloudWatch metric and the breach threshold that you've defined for the alarm. </p> <p>For the following examples, suppose that you have an alarm with a breach threshold of 50:</p> <ul> <li> <p>If you want the adjustment to be triggered when the metric is greater than or equal to 50 and less than 60, specify a lower bound of 0 and an upper bound of 10.</p> </li> <li> <p>If you want the adjustment to be triggered when the metric is greater than 40 and less than or equal to 50, specify a lower bound of -10 and an upper bound of 0.</p> </li> </ul> <p>There are a few rules for the step adjustments for your step policy:</p> <ul> <li> <p>The ranges of your step adjustments can't overlap or have a gap.</p> </li> <li> <p>At most one step adjustment can have a null lower bound. If one step adjustment has a negative lower bound, then there must be a step adjustment with a null lower bound.</p> </li> <li> <p>At most one step adjustment can have a null upper bound. If one step adjustment has a positive upper bound, then there must be a step adjustment with a null upper bound.</p> </li> <li> <p>The upper and lower bound can't be null in the same step adjustment.</p> </li> </ul>
  StepScalingPolicyConfiguration:
    type: object
    properties:
      AdjustmentType?:
        type: AdjustmentType
        description: <p>The adjustment type, which specifies how the <code>ScalingAdjustment</code> parameter in a <a>StepAdjustment</a> is interpreted.</p>
      StepAdjustments?:
        type: StepAdjustments
        description: <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p>
      MinAdjustmentMagnitude?:
        type: MinAdjustmentMagnitude
        description: <p>The minimum number to adjust your scalable dimension as a result of a scaling activity. If the adjustment type is <code>PercentChangeInCapacity</code>, the scaling policy changes the scalable dimension of the scalable target by this amount.</p>
      Cooldown?:
        type: Cooldown
        description: <p>The amount of time, in seconds, after a scaling activity completes where previous trigger-related scaling activities can influence future scaling events.</p> <p>For scale out policies, while <code>Cooldown</code> is in effect, the capacity that has been added by the previous scale out event that initiated the <code>Cooldown</code> is calculated as part of the desired capacity for the next scale out. The intention is to continuously (but not excessively) scale out. For example, an alarm triggers a step scaling policy to scale out an Amazon ECS service by 2 tasks, the scaling activity completes successfully, and a <code>Cooldown</code> period of 5 minutes starts. During the <code>Cooldown</code> period, if the alarm triggers the same policy again but at a more aggressive step adjustment to scale out the service by 3 tasks, the 2 tasks that were added in the previous scale out event are considered part of that capacity and only 1 additional task is added to the desired count.</p> <p>For scale in policies, the <code>Cooldown</code> period is used to block subsequent scale in requests until it has expired. The intention is to scale in conservatively to protect your application's availability. However, if another alarm triggers a scale out policy during the <code>Cooldown</code> period after a scale-in, Application Auto Scaling scales out your scalable target immediately.</p>
      MetricAggregationType?:
        type: MetricAggregationType
        description: <p>The aggregation type for the CloudWatch metrics. Valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>.</p>
    description: <p>An object representing a step scaling policy configuration.</p>
/{DeleteScalingPolicy}:
  uriParameters:
    DeleteScalingPolicy?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  post:
    description: Deletes an Application Auto Scaling scaling policy that was previously created. If you are no longer using a scaling policy, you can delete it with this operation. Deleting a policy deletes the underlying alarm action, but does not delete the CloudWatch alarm associated with the scaling policy, even if it no longer has an associated action. To create a new scaling policy or update an existing one, see <a>PutScalingPolicy</a>.
    displayName: Delete Scaling Policy
    body:
      application/json: DeleteScalingPolicyRequest
    responses:
      200:
        body:
          application/json: DeleteScalingPolicyResponse
      400:
        description: ValidationException
/{DeregisterScalableTarget}:
  uriParameters:
    DeregisterScalableTarget?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  post:
    description: Deregisters a scalable target that was previously registered. If you are no longer using a scalable target, you can delete it with this operation. When you deregister a scalable target, all of the scaling policies that are associated with that scalable target are deleted. To create a new scalable target or update an existing one, see <a>RegisterScalableTarget</a>.
    displayName: Deregister Scalable Target
    body:
      application/json: DeregisterScalableTargetRequest
    responses:
      200:
        body:
          application/json: DeregisterScalableTargetResponse
      400:
        description: ValidationException
/{DescribeScalableTargets}:
  uriParameters:
    DescribeScalableTargets?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  post:
    description: Provides descriptive information for scalable targets with a specified service namespace. You can filter the results in a service namespace with the <code>ResourceIds</code> and <code>ScalableDimension</code> parameters. To create a new scalable target or update an existing one, see <a>RegisterScalableTarget</a>. If you are no longer using a scalable target, you can deregister it with <a>DeregisterScalableTarget</a>.
    displayName: Describe Scalable Targets
    body:
      application/json: DescribeScalableTargetsRequest
    responses:
      200:
        body:
          application/json: DescribeScalableTargetsResponse
      400:
        description: ValidationException
/{DescribeScalingActivities}:
  uriParameters:
    DescribeScalingActivities?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  post:
    description: Provides descriptive information for scaling activities with a specified service namespace for the previous six weeks. You can filter the results in a service namespace with the <code>ResourceId</code> and <code>ScalableDimension</code> parameters. Scaling activities are triggered by CloudWatch alarms that are associated with scaling policies. To view the existing scaling policies for a service namespace, see <a>DescribeScalingPolicies</a>. To create a new scaling policy or update an existing one, see <a>PutScalingPolicy</a>.
    displayName: Describe Scaling Activities
    body:
      application/json: DescribeScalingActivitiesRequest
    responses:
      200:
        body:
          application/json: DescribeScalingActivitiesResponse
      400:
        description: ValidationException
/{DescribeScalingPolicies}:
  uriParameters:
    DescribeScalingPolicies?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  post:
    description: Provides descriptive information for scaling policies with a specified service namespace. You can filter the results in a service namespace with the <code>ResourceId</code>, <code>ScalableDimension</code>, and <code>PolicyNames</code> parameters. To create a new scaling policy or update an existing one, see <a>PutScalingPolicy</a>. If you are no longer using a scaling policy, you can delete it with <a>DeleteScalingPolicy</a>.
    displayName: Describe Scaling Policies
    body:
      application/json: DescribeScalingPoliciesRequest
    responses:
      200:
        body:
          application/json: DescribeScalingPoliciesResponse
      400:
        description: ValidationException
/{PutScalingPolicy}:
  uriParameters:
    PutScalingPolicy?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  post:
    description: Creates or updates a policy for an existing Application Auto Scaling scalable target. Each scalable target is identified by service namespace, a resource ID, and a scalable dimension, and a scaling policy applies to a scalable target that is identified by those three attributes. You cannot create a scaling policy without first registering a scalable target with <a>RegisterScalableTarget</a>. To update an existing policy, use the existing policy name and set the parameters you want to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request. You can view the existing scaling policies for a service namespace with <a>DescribeScalingPolicies</a>. If you are no longer using a scaling policy, you can delete it with <a>DeleteScalingPolicy</a>.
    displayName: Put Scaling Policy
    body:
      application/json: PutScalingPolicyRequest
    responses:
      200:
        body:
          application/json: PutScalingPolicyResponse
      400:
        description: ValidationException
/{RegisterScalableTarget}:
  uriParameters:
    RegisterScalableTarget?:
      type: string
      enum:
      - ''
      (extras.syntetic): true
      description: This url parameter exists only to differentiate different operations on the same url
  post:
    description: Registers or updates a scalable target. A scalable target is a resource that can be scaled out or in with Application Auto Scaling. After you have registered a scalable target, you can use this operation to update the minimum and maximum values for your scalable dimension. After you register a scalable target with Application Auto Scaling, you can create and apply scaling policies to it with <a>PutScalingPolicy</a>. You can view the existing scaling policies for a service namespace with <a>DescribeScalableTargets</a>. If you are no longer using a scalable target, you can deregister it with <a>DeregisterScalableTarget</a>.
    displayName: Register Scalable Target
    body:
      application/json: RegisterScalableTargetRequest
    responses:
      200:
        body:
          application/json: RegisterScalableTargetResponse
      400:
        description: ValidationException
